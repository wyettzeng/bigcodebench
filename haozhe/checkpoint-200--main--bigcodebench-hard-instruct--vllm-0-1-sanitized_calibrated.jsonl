{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    try:\n        # Connect to the FTP server\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n        \n        # Change to the specified directory\n        ftp.cwd(ftp_dir)\n        \n        # List all files in the directory\n        files = ftp.nlst()\n        \n        # Attempt to download each file\n        downloaded_files = []\n        for file in files:\n            try:\n                # Construct the local filename\n                local_filename = os.path.join(os.getcwd(), file)\n                \n                # Use wget to download the file\n                subprocess.run(['wget', f'ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{file}'], check=True)\n                \n                # Add the file to the list of downloaded files\n                downloaded_files.append(file)\n            except Exception as e:\n                print(f\"Failed to download file {file}: {str(e)}\")\n        \n        # Close the FTP connection\n        ftp.quit()\n        \n        return downloaded_files\n    except ftplib.all_errors as e:\n        print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        return []\n    except Exception as e:\n        print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        return []", "raw_solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    try:\n        # Connect to the FTP server\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n        \n        # Change to the specified directory\n        ftp.cwd(ftp_dir)\n        \n        # List all files in the directory\n        files = ftp.nlst()\n        \n        # Attempt to download each file\n        downloaded_files = []\n        for file in files:\n            try:\n                # Construct the local filename\n                local_filename = os.path.join(os.getcwd(), file)\n                \n                # Use wget to download the file\n                subprocess.run(['wget', f'ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{file}'], check=True)\n                \n                # Add the file to the list of downloaded files\n                downloaded_files.append(file)\n            except Exception as e:\n                print(f\"Failed to download file {file}: {str(e)}\")\n        \n        # Close the FTP connection\n        ftp.quit()\n        \n        return downloaded_files\n    except ftplib.all_errors as e:\n        print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        return []\n    except Exception as e:\n        print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        return []\n\n# Example usage\ndownloaded_files = task_func()"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(\"The commands file does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_files = []\n    with open(commands_file_path, mode='r') as file:\n        reader = csv.reader(file)\n        for index, command in enumerate(reader):\n            command = command[0]\n            output_file_path = os.path.join(output_dir_path, f'command_{index}_output.txt')\n            output_files.append(output_file_path)\n            try:\n                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(result.stdout.decode())\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(f\"Error: {e.stderr.decode()}\\nExit code: {e.returncode}\")\n\n    return output_files", "raw_solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(\"The commands file does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_files = []\n    with open(commands_file_path, mode='r') as file:\n        reader = csv.reader(file)\n        for index, command in enumerate(reader):\n            command = command[0]\n            output_file_path = os.path.join(output_dir_path, f'command_{index}_output.txt')\n            output_files.append(output_file_path)\n            try:\n                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(result.stdout.decode())\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(f\"Error: {e.stderr.decode()}\\nExit code: {e.returncode}\")\n\n    return output_files\n\n```"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            # Process is found, restart it\n            proc.kill()\n            time.sleep(1)  # Wait for the process to terminate\n            subprocess.Popen(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # Process is not found, start it\n    subprocess.Popen(process_name)\n    return f\"Process not found. Starting {process_name}.\"", "raw_solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            # Process is found, restart it\n            proc.kill()\n            time.sleep(1)  # Wait for the process to terminate\n            subprocess.Popen(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # Process is not found, start it\n    subprocess.Popen(process_name)\n    return f\"Process not found. Starting {process_name}.\"\n\n# Example usage"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n    \n    files = glob.glob(os.path.join(directory, '*'))\n    if not files:\n        return None\n    \n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            if os.path.isfile(file):\n                zipf.write(file, os.path.basename(file))\n    \n    return zip_path", "raw_solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n    \n    files = glob.glob(os.path.join(directory, '*'))\n    if not files:\n        return None\n    \n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            if os.path.isfile(file):\n                zipf.write(file, os.path.basename(file))\n    \n    return zip_path\n\n```"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs from the text\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\n    \n    # Check if there are any words left after removing URLs\n    if not re.findall(r'\\b\\w+\\b', text):\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n    \n    return wordcloud\ntext = \"Check out this website: https://www.example.com and this one: https://www.test.com\"", "raw_solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Remove URLs from the text\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\n    \n    # Check if there are any words left after removing URLs\n    if not re.findall(r'\\b\\w+\\b', text):\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n    \n    return wordcloud\n\n# Example usage\ntext = \"Check out this website: https://www.example.com and this one: https://www.test.com\"\nwordcloud = task_func(text)\n\n```"}
{"task_id": "BigCodeBench/37", "solution": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n    # Split the dataframe into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n    \n    # Initialize and train the RandomForestClassifier\n    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf_classifier.fit(X, y)\n    \n    # Get feature importances\n    feature_importances = rf_classifier.feature_importances_\n    \n    # Create a DataFrame to hold feature names and their importances\n    feature_importances_df = pd.DataFrame({\n        'Feature': X.columns,\n        'Importance': feature_importances\n    })\n    \n    # Sort the DataFrame by importance in descending order\n    feature_importances_df = feature_importances_df.sort_values(by='Importance', ascending=False)\n    \n    # Plot the bar plot of feature importance\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=feature_importances_df)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n    \n    # Return the trained classifier and the Axes object of the plot\n    return rf_classifier, plt.gca()", "raw_solution": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, target_column):\n    # Split the dataframe into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n    \n    # Initialize and train the RandomForestClassifier\n    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf_classifier.fit(X, y)\n    \n    # Get feature importances\n    feature_importances = rf_classifier.feature_importances_\n    \n    # Create a DataFrame to hold feature names and their importances\n    feature_importances_df = pd.DataFrame({\n        'Feature': X.columns,\n        'Importance': feature_importances\n    })\n    \n    # Sort the DataFrame by importance in descending order\n    feature_importances_df = feature_importances_df.sort_values(by='Importance', ascending=False)\n    \n    # Plot the bar plot of feature importance\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=feature_importances_df)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n    \n    # Return the trained classifier and the Axes object of the plot\n    return rf_classifier, plt.gca()\n\n# Example usage:\n# Assuming 'df' is your DataFrame and 'target_column' is the column you want to predict\n# rf_classifier, ax = task_func(df, 'target_column')\n\n```"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nclass User(UserMixin):\n    def __init__(self, id, username, password):\n        self.id = id\n        self.username = username\n        self.password = password\n\n    def check_password(self, password):\n        return check_password_hash(self.password, password)\nusers = {'user1': User(1, 'user1', generate_password_hash('password1'))}\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.secret_key = secret_key\n    login_manager.init_app(app)\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = users.get(form.username.data)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                return 'Invalid username or password'\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return f'Logged in as: {current_user.username}'\n\n    return app", "raw_solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nclass User(UserMixin):\n    def __init__(self, id, username, password):\n        self.id = id\n        self.username = username\n        self.password = password\n\n    def check_password(self, password):\n        return check_password_hash(self.password, password)\n\nusers = {'user1': User(1, 'user1', generate_password_hash('password1'))}\n\n@login_manager.user_loader\ndef load_user(user_id):\n    for user in users.values():\n        if user.id == int(user_id):\n            return user\n    return None\n\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.secret_key = secret_key\n    login_manager.init_app(app)\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = users.get(form.username.data)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                return 'Invalid username or password'\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return f'Logged in as: {current_user.username}'\n\n    return app\n\n# Example usage\napp = task_func('your_secret_key', 'path_to_template_folder')\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from a specified column of a dataset based on the Z-score.\n    \n    Parameters:\n    data (np.array): The dataset.\n    column (int): The index of the column to analyze.\n    outlier_z_score (float): The Z-score threshold for outlier detection.\n    \n    Returns:\n    tuple: A tuple containing the original data, the data without outliers, and the indices of the outliers.\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data[:, column].reshape(-1, 1))\n    \n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(data_scaled))\n    \n    # Identify outliers\n    outliers = np.where(z_scores > outlier_z_score)[0]\n    \n    # Remove outliers\n    data_without_outliers = np.delete(data, outliers, axis=0)\n    \n    # Plot data with and without outliers\n    plt.figure(figsize=(12, 6))\n    \n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(data)), data[:, column], color='blue')\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    \n    plt.subplot(1, 2, 2)\n    plt.scatter(range(len(data_without_outliers)), data_without_outliers[:, column], color='green')\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return data, data_without_outliers, outliers\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [100, 11, 12]])\ncolumn = 0\noutlier_z_score = 3", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from a specified column of a dataset based on the Z-score.\n    \n    Parameters:\n    data (np.array): The dataset.\n    column (int): The index of the column to analyze.\n    outlier_z_score (float): The Z-score threshold for outlier detection.\n    \n    Returns:\n    tuple: A tuple containing the original data, the data without outliers, and the indices of the outliers.\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data[:, column].reshape(-1, 1))\n    \n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(data_scaled))\n    \n    # Identify outliers\n    outliers = np.where(z_scores > outlier_z_score)[0]\n    \n    # Remove outliers\n    data_without_outliers = np.delete(data, outliers, axis=0)\n    \n    # Plot data with and without outliers\n    plt.figure(figsize=(12, 6))\n    \n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(data)), data[:, column], color='blue')\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    \n    plt.subplot(1, 2, 2)\n    plt.scatter(range(len(data_without_outliers)), data_without_outliers[:, column], color='green')\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return data, data_without_outliers, outliers\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [100, 11, 12]])\ncolumn = 0\noutlier_z_score = 3\noriginal_data, data_without_outliers, outliers = task_func(data, column, outlier_z_score)\n\n```"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Number of clusters must be an integer greater than 1.\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=200, c='red')\n    \n    return labels, ax", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Number of clusters must be an integer greater than 1.\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=200, c='red')\n    \n    return labels, ax\n\n# Example usage:\n# data = pd.DataFrame({\n#     'feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n#     'feature2': [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]\n# })\n# labels, ax = task_func(data)\n# plt.show()\n\n```"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    transformed_df = pd.DataFrame(transformed_data, columns=[f\"PC{i+1}\" for i in range(n_components)])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_df[\"PC1\"], transformed_df[\"PC2\"])\n    ax.set_xlabel(\"Principal Component 1\")\n    ax.set_ylabel(\"Principal Component 2\")\n    ax.set_title(\"PCA Scatter Plot\")\n    \n    return transformed_df, ax\ndata = pd.DataFrame({\n    \"Feature1\": [1, 2, 3, 4, 5],\n    \"Feature2\": [5, 4, 3, 2, 1],\n    \"Feature3\": [2, 3, 4, 5, 6]\n})", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    transformed_df = pd.DataFrame(transformed_data, columns=[f\"PC{i+1}\" for i in range(n_components)])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_df[\"PC1\"], transformed_df[\"PC2\"])\n    ax.set_xlabel(\"Principal Component 1\")\n    ax.set_ylabel(\"Principal Component 2\")\n    ax.set_title(\"PCA Scatter Plot\")\n    \n    return transformed_df, ax\n\n# Example usage\ndata = pd.DataFrame({\n    \"Feature1\": [1, 2, 3, 4, 5],\n    \"Feature2\": [5, 4, 3, 2, 1],\n    \"Feature3\": [2, 3, 4, 5, 6]\n})\n\ntransformed_df, ax = task_func(data)"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target_names[iris.target]\n\n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create a pair plot\n    g = sns.pairplot(df, hue='species')\n\n    # Set the title of the plot\n    g.fig.suptitle('Iris Dataset Pair Plot')\n\n    # Set the labels for each feature on the axes\n    g.set(xlabels=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"],\n          ylabels=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"])\n\n    # Remove the top and right spines from the plot\n    for ax in g.axes.flatten():\n        ax.spines['top'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n\n    # Return the matplotlib Figure object\n    return g.fig", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target_names[iris.target]\n\n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create a pair plot\n    g = sns.pairplot(df, hue='species')\n\n    # Set the title of the plot\n    g.fig.suptitle('Iris Dataset Pair Plot')\n\n    # Set the labels for each feature on the axes\n    g.set(xlabels=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"],\n          ylabels=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"])\n\n    # Remove the top and right spines from the plot\n    for ax in g.axes.flatten():\n        ax.spines['top'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n\n    # Return the matplotlib Figure object\n    return g.fig\n\n# Call the function and display the plot\nfig = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate random data for the past 30 days\n    dates = [datetime(2023, 1, 1) + pd.Timedelta(days=i) for i in range(30)]\n    values = [random.randint(0, 100) for _ in range(30)]\n    \n    # Create a DataFrame\n    df = pd.DataFrame({'Date': dates, 'Value': values})\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df['Value'], marker='o')\n    \n    # Set the title and labels\n    ax.set_title('Random Time Series Data')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Value')\n    \n    # Set the font to Arial\n    for label in ax.get_xticklabels() + ax.get_yticklabels():\n        label.set_fontname('Arial')\n    \n    # Return the Axes object\n    return ax", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate random data for the past 30 days\n    dates = [datetime(2023, 1, 1) + pd.Timedelta(days=i) for i in range(30)]\n    values = [random.randint(0, 100) for _ in range(30)]\n    \n    # Create a DataFrame\n    df = pd.DataFrame({'Date': dates, 'Value': values})\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df['Value'], marker='o')\n    \n    # Set the title and labels\n    ax.set_title('Random Time Series Data')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Value')\n    \n    # Set the font to Arial\n    for label in ax.get_xticklabels() + ax.get_yticklabels():\n        label.set_fontname('Arial')\n    \n    # Return the Axes object\n    return ax\n\n# Example usage\nax = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Load the Boston Housing dataset\n        boston_data = pd.read_csv(data_url, sep=\"\\s+\", header=None)\n        boston_data.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n        \n        # Calculate the correlation matrix\n        correlation_matrix = boston_data.corr()\n        \n        # Create a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        \n        # Save the plot to a specified file\n        plt.savefig(\"correlation_heatmap.png\")\n        \n        # Return the Axes object\n        return plt.gca()\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Load the Boston Housing dataset\n        boston_data = pd.read_csv(data_url, sep=\"\\s+\", header=None)\n        boston_data.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n        \n        # Calculate the correlation matrix\n        correlation_matrix = boston_data.corr()\n        \n        # Create a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        \n        # Save the plot to a specified file\n        plt.savefig(\"correlation_heatmap.png\")\n        \n        # Return the Axes object\n        return plt.gca()\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")\n\n# Example usage\n# Uncomment the following line to test the function\n# task_func()\n\n```"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame.\")\n    \n    # Check if 'value' column exists in the DataFrame\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'value' column.\")\n    \n    # Check if 'value' column contains valid data types\n    if not pd.api.types.is_numeric_dtype(df['value']):\n        raise ValueError(\"The 'value' column must contain numeric data types.\")\n    \n    # Check if 'freq' is a valid frequency string\n    valid_freqs = ['D', 'W', 'M', 'Q', 'A', 'H', 'T', 'S']\n    if freq not in valid_freqs:\n        raise ValueError(\"Invalid frequency string. Please use one of the following: 'D', 'W', 'M', 'Q', 'A', 'H', 'T', 'S'.\")\n    \n    # Check if 'decomposition_model' is either 'additive' or 'multiplicative'\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid decomposition model. Please use either 'additive' or 'multiplicative'.\")\n    \n    # Perform the decomposition\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, period=365 if freq == 'D' else 12 if freq in ['M', 'Q', 'A'] else 52)\n    \n    # Plot the decomposition\n    fig, axes = plt.subplots(4, 1, figsize=(10, 8))\n    decomposition.plot(ax=axes)\n    plt.tight_layout()\n    \n    return decomposition, axes", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame.\")\n    \n    # Check if 'value' column exists in the DataFrame\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'value' column.\")\n    \n    # Check if 'value' column contains valid data types\n    if not pd.api.types.is_numeric_dtype(df['value']):\n        raise ValueError(\"The 'value' column must contain numeric data types.\")\n    \n    # Check if 'freq' is a valid frequency string\n    valid_freqs = ['D', 'W', 'M', 'Q', 'A', 'H', 'T', 'S']\n    if freq not in valid_freqs:\n        raise ValueError(\"Invalid frequency string. Please use one of the following: 'D', 'W', 'M', 'Q', 'A', 'H', 'T', 'S'.\")\n    \n    # Check if 'decomposition_model' is either 'additive' or 'multiplicative'\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid decomposition model. Please use either 'additive' or 'multiplicative'.\")\n    \n    # Perform the decomposition\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, period=365 if freq == 'D' else 12 if freq in ['M', 'Q', 'A'] else 52)\n    \n    # Plot the decomposition\n    fig, axes = plt.subplots(4, 1, figsize=(10, 8))\n    decomposition.plot(ax=axes)\n    plt.tight_layout()\n    \n    return decomposition, axes\n\n# Example usage\n# df = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n# decomposition, axes = task_func(df, freq='D', decomposition_model='multiplicative')\n\n```"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than end_date\")\n    random_seed(seed)\n    date_range = (end_date - start_date).days + 1\n    random_dates = [start_date + timedelta(days=randint(0, date_range - 1)) for _ in range(date_range)]\n    return pd.Series(random_dates)", "raw_solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than end_date\")\n    random_seed(seed)\n    date_range = (end_date - start_date).days + 1\n    random_dates = [start_date + timedelta(days=randint(0, date_range - 1)) for _ in range(date_range)]\n    return pd.Series(random_dates)\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    # Check if my_list is a list\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    \n    # Add '12' to the list\n    my_list.append('12')\n    \n    # Calculate the number of files to concatenate\n    num_files = sum(int(i) for i in my_list if i.isdigit())\n    \n    # Check if there are any files to concatenate\n    if num_files == 0:\n        raise FileNotFoundError(\"No files found in the specified directory\")\n    \n    # Get the list of CSV files to concatenate\n    file_list = glob.glob(os.path.join(file_dir, f'*{file_ext}'))\n    \n    # Check if the number of files matches the expected number\n    if len(file_list) != num_files:\n        raise FileNotFoundError(\"The number of files in the directory does not match the expected number\")\n    \n    # Concatenate the CSV files into a single DataFrame\n    df = pd.concat([pd.read_csv(file) for file in file_list], ignore_index=True)\n    \n    return df\nmy_list = ['1', '2', '3']\nfile_dir = './data_files/'\nfile_ext = '.csv'", "raw_solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    # Check if my_list is a list\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    \n    # Add '12' to the list\n    my_list.append('12')\n    \n    # Calculate the number of files to concatenate\n    num_files = sum(int(i) for i in my_list if i.isdigit())\n    \n    # Check if there are any files to concatenate\n    if num_files == 0:\n        raise FileNotFoundError(\"No files found in the specified directory\")\n    \n    # Get the list of CSV files to concatenate\n    file_list = glob.glob(os.path.join(file_dir, f'*{file_ext}'))\n    \n    # Check if the number of files matches the expected number\n    if len(file_list) != num_files:\n        raise FileNotFoundError(\"The number of files in the directory does not match the expected number\")\n    \n    # Concatenate the CSV files into a single DataFrame\n    df = pd.concat([pd.read_csv(file) for file in file_list], ignore_index=True)\n    \n    return df\n\n# Example usage\nmy_list = ['1', '2', '3']\nfile_dir = './data_files/'\nfile_ext = '.csv'\ndf = task_func(my_list, file_dir, file_ext)"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"my_list must contain only numeric elements\")\n    \n    my_list.append(12)\n    total = sum(my_list)\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    \n    random_seed(seed)\n    start_time = time.time()\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    end_time = time.time()\n    \n    time_taken = end_time - start_time\n    \n    plt.hist(random_numbers, bins=range(1, 102), edgecolor='black')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Numbers')\n    plt.show()\n    \n    return time_taken, plt.gca()", "raw_solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"my_list must contain only numeric elements\")\n    \n    my_list.append(12)\n    total = sum(my_list)\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    \n    random_seed(seed)\n    start_time = time.time()\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    end_time = time.time()\n    \n    time_taken = end_time - start_time\n    \n    plt.hist(random_numbers, bins=range(1, 102), edgecolor='black')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Numbers')\n    plt.show()\n    \n    return time_taken, plt.gca()\n\n```"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Failed to connect to {url}: {e}\")\n    except requests.HTTPError as e:\n        raise HTTPError(f\"HTTP error occurred while fetching {url}: {e}\")\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table')\n    if not table:\n        raise ValueError(\"No table found on the page\")\n\n    headers = [header.text.strip() for header in table.find_all('th')]\n    rows = []\n    for row in table.find_all('tr'):\n        cells = [cell.text.strip() for cell in row.find_all(['td', 'th'])]\n        rows.append(cells)\n\n    if headers:\n        df = pd.DataFrame(rows[1:], columns=headers)\n    else:\n        df = pd.DataFrame(rows[1:])\n\n    return df\nurl = 'http://example.com'", "raw_solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Failed to connect to {url}: {e}\")\n    except requests.HTTPError as e:\n        raise HTTPError(f\"HTTP error occurred while fetching {url}: {e}\")\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table')\n    if not table:\n        raise ValueError(\"No table found on the page\")\n\n    headers = [header.text.strip() for header in table.find_all('th')]\n    rows = []\n    for row in table.find_all('tr'):\n        cells = [cell.text.strip() for cell in row.find_all(['td', 'th'])]\n        rows.append(cells)\n\n    if headers:\n        df = pd.DataFrame(rows[1:], columns=headers)\n    else:\n        df = pd.DataFrame(rows[1:])\n\n    return df\n\n# Example usage\nurl = 'http://example.com'\ndf = task_func(url)"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame\")\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if not numeric_cols.size:\n        raise ValueError(\"DataFrame must contain at least one numeric column\")\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=30, figsize=(8, 6))\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    return axes", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame\")\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if not numeric_cols.size:\n        raise ValueError(\"DataFrame must contain at least one numeric column\")\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=30, figsize=(8, 6))\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    return axes\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    ip_list = [str(ip) for ip in IPv4Network(ip_range)]\n    results = {}\n\n    def check_port(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((ip, port))\n            results[ip] = result == 0\n            sock.close()\n        except Exception as e:\n            results[ip] = False\n\n    threads = []\n    for ip in ip_list:\n        thread = Thread(target=check_port, args=(ip,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return results\nip_range = '192.168.1.0/24'\nport = 80", "raw_solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    ip_list = [str(ip) for ip in IPv4Network(ip_range)]\n    results = {}\n\n    def check_port(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((ip, port))\n            results[ip] = result == 0\n            sock.close()\n        except Exception as e:\n            results[ip] = False\n\n    threads = []\n    for ip in ip_list:\n        thread = Thread(target=check_port, args=(ip,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return results\n\n# Example usage:\nip_range = '192.168.1.0/24'\nport = 80"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n    # Regular expression pattern to match log entries\n    pattern = r'(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)'\n    \n    # Initialize lists to store log data\n    log_types = []\n    timestamps = []\n    messages = []\n    \n    # Open the log file and read line by line\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = re.match(pattern, line)\n            if match:\n                log_type, timestamp, message = match.groups()\n                log_types.append(log_type)\n                timestamps.append(timestamp)\n                messages.append(message)\n    \n    # Check if any valid log entries were found\n    if not log_types:\n        raise ValueError(\"No valid log entries found.\")\n    \n    # Create a DataFrame from the log data\n    df = pd.DataFrame({\n        'Type': log_types,\n        'Timestamp': timestamps,\n        'Message': messages\n    })\n    \n    # Convert the timestamp column to datetime format\n    df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n    \n    # Create a new CSV file to store the structured log data\n    csv_file = 'structured_logs.csv'\n    df.to_csv(csv_file, index=False)\n    \n    # Return the file path to the newly created CSV file\n    return csv_file\nlog_file = 'example.log'", "raw_solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\ndef task_func(log_file):\n    # Regular expression pattern to match log entries\n    pattern = r'(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)'\n    \n    # Initialize lists to store log data\n    log_types = []\n    timestamps = []\n    messages = []\n    \n    # Open the log file and read line by line\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = re.match(pattern, line)\n            if match:\n                log_type, timestamp, message = match.groups()\n                log_types.append(log_type)\n                timestamps.append(timestamp)\n                messages.append(message)\n    \n    # Check if any valid log entries were found\n    if not log_types:\n        raise ValueError(\"No valid log entries found.\")\n    \n    # Create a DataFrame from the log data\n    df = pd.DataFrame({\n        'Type': log_types,\n        'Timestamp': timestamps,\n        'Message': messages\n    })\n    \n    # Convert the timestamp column to datetime format\n    df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n    \n    # Create a new CSV file to store the structured log data\n    csv_file = 'structured_logs.csv'\n    df.to_csv(csv_file, index=False)\n    \n    # Return the file path to the newly created CSV file\n    return csv_file\n\n# Example usage\nlog_file = 'example.log'\ncsv_file = task_func(log_file)"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Split the text into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if there are any words\n    if not words:\n        return plt.figure().add_subplot(111)\n    \n    # Calculate the lengths of the words\n    word_lengths = [len(word) for word in words]\n    \n    # Create a histogram of word lengths\n    fig, ax = plt.subplots()\n    ax.hist(word_lengths, bins=np.arange(min(word_lengths), max(word_lengths) + 2) - 0.5, rwidth=rwidth)\n    \n    # Set labels and title\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths')\n    \n    return ax\ntext = \"This is a sample text to demonstrate the function.\"", "raw_solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(text, rwidth=0.8):\n    # Split the text into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if there are any words\n    if not words:\n        return plt.figure().add_subplot(111)\n    \n    # Calculate the lengths of the words\n    word_lengths = [len(word) for word in words]\n    \n    # Create a histogram of word lengths\n    fig, ax = plt.subplots()\n    ax.hist(word_lengths, bins=np.arange(min(word_lengths), max(word_lengths) + 2) - 0.5, rwidth=rwidth)\n    \n    # Set labels and title\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths')\n    \n    return ax\n\n# Example usage\ntext = \"This is a sample text to demonstrate the function.\"\nax = task_func(text)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\ndef task_func(df):\n    if not df.empty and 'Title' in df.columns and 'Content' in df.columns:\n        # Filter articles with titles containing 'like' or 'what'\n        filtered_articles = df[df['Title'].str.contains('like|what', case=False, na=False)]\n        \n        # Initialize a Counter to store word frequencies\n        word_freq = Counter()\n        \n        # Iterate over the filtered articles\n        for content in filtered_articles['Content']:\n            # Remove punctuation and convert to lowercase\n            cleaned_content = re.sub(f\"[{re.escape(punctuation)}]\", \"\", content).lower()\n            # Split the content into words and update the Counter\n            words = cleaned_content.split()\n            word_freq.update(words)\n        \n        return dict(word_freq)\n    else:\n        raise ValueError(\"DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\")", "raw_solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\n\ndef task_func(df):\n    if not df.empty and 'Title' in df.columns and 'Content' in df.columns:\n        # Filter articles with titles containing 'like' or 'what'\n        filtered_articles = df[df['Title'].str.contains('like|what', case=False, na=False)]\n        \n        # Initialize a Counter to store word frequencies\n        word_freq = Counter()\n        \n        # Iterate over the filtered articles\n        for content in filtered_articles['Content']:\n            # Remove punctuation and convert to lowercase\n            cleaned_content = re.sub(f\"[{re.escape(punctuation)}]\", \"\", content).lower()\n            # Split the content into words and update the Counter\n            words = cleaned_content.split()\n            word_freq.update(words)\n        \n        return dict(word_freq)\n    else:\n        raise ValueError(\"DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\")\n\n# Example usage:\n# df = pd.DataFrame({\n#     'Title': ['I like this article', 'What is your opinion?', 'This is a test'],\n#     'Content': ['This is the content of the first article', 'This is the content of the second article', 'This is the content of the third article']\n# })\n# print(task_func(df))\n\n```"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n    # Remove stopwords, numbers, and punctuation\n    def preprocess(text):\n        text = re.sub(r'\\d+', '', text)  # Remove numbers\n        text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n        words = text.split()\n        words = [word for word in words if word.lower() not in STOPWORDS]\n        return ' '.join(words)\n\n    dataframe[text_column] = dataframe[text_column].apply(preprocess)\n\n    # Vectorize the preprocessed text\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe[text_column])\n\n    # Create a DataFrame from the vectorized data\n    result_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return result_df", "raw_solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\ndef task_func(dataframe, text_column):\n    # Remove stopwords, numbers, and punctuation\n    def preprocess(text):\n        text = re.sub(r'\\d+', '', text)  # Remove numbers\n        text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n        words = text.split()\n        words = [word for word in words if word.lower() not in STOPWORDS]\n        return ' '.join(words)\n\n    dataframe[text_column] = dataframe[text_column].apply(preprocess)\n\n    # Vectorize the preprocessed text\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe[text_column])\n\n    # Create a DataFrame from the vectorized data\n    result_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return result_df\n\n# Example usage\ndata = {'text': ['Hello world', 'This is a test', 'Another example']}\ndf = pd.DataFrame(data)\nresult = task_func(df, 'text')"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"Missing 'Lon' or 'Lat' keys in the dictionary\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Values of 'Lon' and 'Lat' keys must be tuples\")\n    \n    lon_range = dic['Lon']\n    lat_range = dic['Lat']\n    \n    cities_data = []\n    for city in cities:\n        lon = np.random.uniform(lon_range[0], lon_range[1])\n        lat = np.random.uniform(lat_range[0], lat_range[1])\n        cities_data.append({'City': city, 'Coordinates': Point(lon, lat)})\n    \n    gdf = gpd.GeoDataFrame(cities_data)\n    return gdf", "raw_solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"Missing 'Lon' or 'Lat' keys in the dictionary\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Values of 'Lon' and 'Lat' keys must be tuples\")\n    \n    lon_range = dic['Lon']\n    lat_range = dic['Lat']\n    \n    cities_data = []\n    for city in cities:\n        lon = np.random.uniform(lon_range[0], lon_range[1])\n        lat = np.random.uniform(lat_range[0], lat_range[1])\n        cities_data.append({'City': city, 'Coordinates': Point(lon, lat)})\n    \n    gdf = gpd.GeoDataFrame(cities_data)\n    return gdf\n\n# Example usage\ngdf = task_func()"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Check if utc_datetime is a datetime object\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    \n    # Set the seed for random number generation\n    set_seed(seed)\n    \n    # Create an empty list to store the weather report\n    weather_report = []\n    \n    # Iterate over each city\n    for city in cities:\n        # Get the timezone for the city\n        timezone = timezones[city]\n        \n        # Convert the UTC datetime to the city's local time\n        local_time = utc_datetime.astimezone(pytz.timezone(timezone))\n        \n        # Select a random weather condition\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        \n        # Append the city, local time, and weather condition to the report\n        weather_report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    \n    # Create a DataFrame from the weather report\n    weather_df = pd.DataFrame(weather_report)\n    \n    return weather_df\nutc_datetime = datetime(2023, 10, 1, 12, 0, 0, tzinfo=pytz.utc)", "raw_solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Check if utc_datetime is a datetime object\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    \n    # Set the seed for random number generation\n    set_seed(seed)\n    \n    # Create an empty list to store the weather report\n    weather_report = []\n    \n    # Iterate over each city\n    for city in cities:\n        # Get the timezone for the city\n        timezone = timezones[city]\n        \n        # Convert the UTC datetime to the city's local time\n        local_time = utc_datetime.astimezone(pytz.timezone(timezone))\n        \n        # Select a random weather condition\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        \n        # Append the city, local time, and weather condition to the report\n        weather_report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    \n    # Create a DataFrame from the weather report\n    weather_df = pd.DataFrame(weather_report)\n    \n    return weather_df\n\n# Example usage\nutc_datetime = datetime(2023, 10, 1, 12, 0, 0, tzinfo=pytz.utc)\nweather_df = task_func(utc_datetime)"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n    \n    np.random.seed(seed)\n    random_walk = np.cumsum(np.random.choice([-1, 1], size=elements))\n    \n    descriptive_stats = {\n        'count': len(random_walk),\n        'mean': random_walk.mean(),\n        'std': random_walk.std(),\n        'min': random_walk.min(),\n        '5th_percentile': np.percentile(random_walk, 5),\n        '25th_percentile': np.percentile(random_walk, 25),\n        'median': np.median(random_walk),\n        '75th_percentile': np.percentile(random_walk, 75),\n        '95th_percentile': np.percentile(random_walk, 95),\n        'max': random_walk.max()\n    }\n    \n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title('Random Walk')\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Position')\n    \n    return descriptive_stats, ax\nelements = 1000", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(elements, seed=0):\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n    \n    np.random.seed(seed)\n    random_walk = np.cumsum(np.random.choice([-1, 1], size=elements))\n    \n    descriptive_stats = {\n        'count': len(random_walk),\n        'mean': random_walk.mean(),\n        'std': random_walk.std(),\n        'min': random_walk.min(),\n        '5th_percentile': np.percentile(random_walk, 5),\n        '25th_percentile': np.percentile(random_walk, 25),\n        'median': np.median(random_walk),\n        '75th_percentile': np.percentile(random_walk, 75),\n        '95th_percentile': np.percentile(random_walk, 95),\n        'max': random_walk.max()\n    }\n    \n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title('Random Walk')\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Position')\n    \n    return descriptive_stats, ax\n\n# Example usage\nelements = 1000\ndescriptive_stats, ax = task_func(elements)"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    # Download the zip file from the URL\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()  # Raise an exception for HTTP errors\n\n    # Create the destination directory if it doesn't exist\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Save the zip file to the destination directory\n    zip_path = os.path.join(destination_directory, 'downloaded_file.zip')\n    with open(zip_path, 'wb') as file:\n        file.write(response.content)\n\n    # Extract the contents of the zip file to the destination directory\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Get the list of extracted files\n    extracted_files = [f for f in os.listdir(destination_directory) if f != 'downloaded_file.zip']\n\n    # Return the list of extracted files\n    return extracted_files\nurl = 'https://example.com/path/to/file.zip'\ndestination_directory = '/path/to/destination'\nheaders = {'User-Agent': 'Mozilla/5.0'}", "raw_solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    # Download the zip file from the URL\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()  # Raise an exception for HTTP errors\n\n    # Create the destination directory if it doesn't exist\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Save the zip file to the destination directory\n    zip_path = os.path.join(destination_directory, 'downloaded_file.zip')\n    with open(zip_path, 'wb') as file:\n        file.write(response.content)\n\n    # Extract the contents of the zip file to the destination directory\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Get the list of extracted files\n    extracted_files = [f for f in os.listdir(destination_directory) if f != 'downloaded_file.zip']\n\n    # Return the list of extracted files\n    return extracted_files\n\n# Example usage\nurl = 'https://example.com/path/to/file.zip'\ndestination_directory = '/path/to/destination'\nheaders = {'User-Agent': 'Mozilla/5.0'}\nextracted_files = task_func(url, destination_directory, headers)"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    \n    random.seed(seed)\n    image = np.random.randint(range_low, range_high, image_size, dtype=np.uint8)\n    \n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.axis('off')\n    \n    return ax, image", "raw_solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    \n    random.seed(seed)\n    image = np.random.randint(range_low, range_high, image_size, dtype=np.uint8)\n    \n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.axis('off')\n    \n    return ax, image\n\n# Example usage\nax, image = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    # Check if the audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(\"The specified audio file does not exist.\")\n    \n    # Read the audio file\n    audio_data, sample_rate = sf.read(audio_file)\n    \n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(audio_data**2)))\n    \n    # Create an MxN matrix from the list L\n    matrix = np.array(L).reshape(M, N)\n    \n    # Normalize the matrix based on the SPL\n    normalized_matrix = matrix / (10 ** (spl / 20))\n    \n    # Generate a spectrogram from the normalized matrix\n    fig, ax = plt.subplots()\n    librosa.display.specshow(normalized_matrix, sr=sample_rate, x_axis='time', y_axis='log', ax=ax)\n    ax.set_title('Spectrogram')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Frequency (Hz)')\n    \n    return normalized_matrix, fig\nL = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nM = 2\nN = 5\naudio_file = 'path_to_audio_file.wav'", "raw_solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    # Check if the audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(\"The specified audio file does not exist.\")\n    \n    # Read the audio file\n    audio_data, sample_rate = sf.read(audio_file)\n    \n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(audio_data**2)))\n    \n    # Create an MxN matrix from the list L\n    matrix = np.array(L).reshape(M, N)\n    \n    # Normalize the matrix based on the SPL\n    normalized_matrix = matrix / (10 ** (spl / 20))\n    \n    # Generate a spectrogram from the normalized matrix\n    fig, ax = plt.subplots()\n    librosa.display.specshow(normalized_matrix, sr=sample_rate, x_axis='time', y_axis='log', ax=ax)\n    ax.set_title('Spectrogram')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Frequency (Hz)')\n    \n    return normalized_matrix, fig\n\n# Example usage\nL = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nM = 2\nN = 5\naudio_file = 'path_to_audio_file.wav'\nnormalized_matrix, fig = task_func(L, M, N, audio_file)\n\n# Display the spectrogram\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = [item for sublist in original for item in sublist if isinstance(item, (int, float))]\n    \n    # Convert the list of numeric values to a numpy array\n    numeric_array = np.array(numeric_values)\n    \n    # Calculate basic statistics\n    mean = np.mean(numeric_array)\n    std_dev = np.std(numeric_array)\n    min_val = np.min(numeric_array)\n    max_val = np.max(numeric_array)\n    basic_stats = {'mean': mean, 'std_dev': std_dev, 'min': min_val, 'max': max_val}\n    \n    # Generate a histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(numeric_array, density=True, alpha=0.6, bins='auto')\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    return numeric_array, basic_stats, ax\noriginal = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = [item for sublist in original for item in sublist if isinstance(item, (int, float))]\n    \n    # Convert the list of numeric values to a numpy array\n    numeric_array = np.array(numeric_values)\n    \n    # Calculate basic statistics\n    mean = np.mean(numeric_array)\n    std_dev = np.std(numeric_array)\n    min_val = np.min(numeric_array)\n    max_val = np.max(numeric_array)\n    basic_stats = {'mean': mean, 'std_dev': std_dev, 'min': min_val, 'max': max_val}\n    \n    # Generate a histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(numeric_array, density=True, alpha=0.6, bins='auto')\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    return numeric_array, basic_stats, ax\n\n# Example usage\noriginal = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nnumeric_array, basic_stats, ax = task_func(original)\n\n# Display the histogram\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array using MinMaxScaler from sklearn\n    normalized_array = preprocessing.MinMaxScaler().fit_transform(original_array.reshape(-1, 1)).flatten()\n    \n    # Plotting the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original Data')\n    ax.plot(normalized_array, label='Normalized Data')\n    ax.set_title('Original vs. Normalized Data')\n    ax.legend()\n    \n    # Return the numpy array, normalized array, and the axes object\n    return original_array, normalized_array, ax", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array using MinMaxScaler from sklearn\n    normalized_array = preprocessing.MinMaxScaler().fit_transform(original_array.reshape(-1, 1)).flatten()\n    \n    # Plotting the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original Data')\n    ax.plot(normalized_array, label='Normalized Data')\n    ax.set_title('Original vs. Normalized Data')\n    ax.legend()\n    \n    # Return the numpy array, normalized array, and the axes object\n    return original_array, normalized_array, ax\n\n# Example usage:\noriginal_data = [1, 2, 3, 4, 5]\noriginal_array, normalized_array, ax = task_func(original_data)\n\n# Display the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data['a'] = 1\n    \n    # Generate a signal based on the values in \"data\"\n    signal = np.array(list(data.values()))\n    \n    # Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n    \n    # Generate the frequency axis\n    freq_axis = np.linspace(0, sample_rate, len(fft_result))\n    \n    # Plot and return the FFT of the signal with a title of 'FFT of the signal'\n    plt.figure()\n    plt.plot(freq_axis[:len(fft_result)//2], np.abs(fft_result[:len(fft_result)//2]))\n    plt.title('FFT of the signal')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Amplitude')\n    plt.show()\n    \n    return fft_result, plt.gca()\ndata = {'b': 2, 'c': 3, 'd': 4}", "raw_solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\ndef task_func(data, sample_rate=8000):\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data['a'] = 1\n    \n    # Generate a signal based on the values in \"data\"\n    signal = np.array(list(data.values()))\n    \n    # Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n    \n    # Generate the frequency axis\n    freq_axis = np.linspace(0, sample_rate, len(fft_result))\n    \n    # Plot and return the FFT of the signal with a title of 'FFT of the signal'\n    plt.figure()\n    plt.plot(freq_axis[:len(fft_result)//2], np.abs(fft_result[:len(fft_result)//2]))\n    plt.title('FFT of the signal')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Amplitude')\n    plt.show()\n    \n    return fft_result, plt.gca()\n\n# Example usage\ndata = {'b': 2, 'c': 3, 'd': 4}\nfft_result, plot = task_func(data)\n\n```"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nclass JSONRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_type = self.headers['Content-Type']\n        if content_type != 'application/json':\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'Content-Type header is not application/json'}).encode('utf-8'))\n            return\n\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        try:\n            data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'Invalid JSON'}).encode('utf-8'))\n            return\n\n        if 'data' not in data:\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'No data key in request'}).encode('utf-8'))\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\ndef task_func():\n    return JSONRequestHandler", "raw_solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\nclass JSONRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_type = self.headers['Content-Type']\n        if content_type != 'application/json':\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'Content-Type header is not application/json'}).encode('utf-8'))\n            return\n\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        try:\n            data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'Invalid JSON'}).encode('utf-8'))\n            return\n\n        if 'data' not in data:\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'error': 'No data key in request'}).encode('utf-8'))\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\n\ndef task_func():\n    return JSONRequestHandler\n\n```"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\nclass EmailHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        try:\n            email_data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_error(400, 'Invalid JSON data')\n            return\n\n        if 'subject' not in email_data or 'message' not in email_data or 'to' not in email_data:\n            self.send_error(400, 'Missing required fields')\n            return\n\n        try:\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                msg = MIMEText(email_data['message'])\n                msg['Subject'] = email_data['subject']\n                msg['From'] = smtp_username\n                msg['To'] = email_data['to']\n                server.sendmail(smtp_username, email_data['to'], msg.as_string())\n        except smtplib.SMTPAuthenticationError:\n            self.send_error(535, 'Authentication failed')\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'text/plain')\n        self.send_header('Content-Length', '0')\n        self.end_headers()\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    httpd = http.server.HTTPServer(('localhost', 8000), EmailHandler)\n    httpd.serve_forever()", "raw_solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\nclass EmailHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        try:\n            email_data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_error(400, 'Invalid JSON data')\n            return\n\n        if 'subject' not in email_data or 'message' not in email_data or 'to' not in email_data:\n            self.send_error(400, 'Missing required fields')\n            return\n\n        try:\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                msg = MIMEText(email_data['message'])\n                msg['Subject'] = email_data['subject']\n                msg['From'] = smtp_username\n                msg['To'] = email_data['to']\n                server.sendmail(smtp_username, email_data['to'], msg.as_string())\n        except smtplib.SMTPAuthenticationError:\n            self.send_error(535, 'Authentication failed')\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'text/plain')\n        self.send_header('Content-Length', '0')\n        self.end_headers()\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    httpd = http.server.HTTPServer(('localhost', 8000), EmailHandler)\n    httpd.serve_forever()\n\n```"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    word_counts = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.txt'):\n                with open(os.path.join(root, file), 'r') as f:\n                    words = f.read().split()\n                    word_counts.update(words)\n    with open(filename, 'w') as f:\n        json.dump(dict(word_counts), f)\n    return sum(word_counts.values())\nfilename = 'word_counts.json'\ndirectory = 'path/to/your/directory'", "raw_solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    word_counts = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.txt'):\n                with open(os.path.join(root, file), 'r') as f:\n                    words = f.read().split()\n                    word_counts.update(words)\n    with open(filename, 'w') as f:\n        json.dump(dict(word_counts), f)\n    return sum(word_counts.values())\n\n# Example usage\nfilename = 'word_counts.json'\ndirectory = 'path/to/your/directory'\ntotal_words = task_func(filename, directory)"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes a pandas DataFrame by splitting lists in the 'Value' column into separate columns,\n    calculates the Pearson correlation coefficient between these columns, and optionally visualizes\n    the correlation matrix using a heatmap.\n\n    Args:\n        df (pandas.DataFrame): Input DataFrame with 'Date' and 'Value' columns.\n        plot (bool, optional): Whether to plot the correlation matrix as a heatmap. Defaults to False.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the correlation coefficients among the lists in the 'Value' column.\n        matplotlib.axes._subplots.AxesSubplot (optional): A matplotlib Axes object containing the heatmap plot, returned if 'plot' is True.\n\n    Raises:\n        ValueError: If the DataFrame input is empty or has invalid 'Value'.\n    \"\"\"\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame input is empty.\")\n\n    # Check if the 'Value' column contains valid lists\n    if not all(isinstance(value, list) for value in df['Value']):\n        raise ValueError(\"The 'Value' column contains invalid lists.\")\n\n    # Split lists in the 'Value' column into separate columns\n    for i, value in enumerate(df['Value']):\n        for j, item in enumerate(value):\n            df[f'Value_{i}_{j}'] = item\n\n    # Drop the original 'Value' column\n    df = df.drop(columns=['Value'])\n\n    # Calculate the Pearson correlation coefficient between these columns\n    correlation_matrix = df.corr(method='pearson')\n\n    # Optionally plot the correlation matrix as a heatmap\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        plt.title('Correlation Heatmap')\n        plt.show()\n\n    return correlation_matrix\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03'],\n    'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes a pandas DataFrame by splitting lists in the 'Value' column into separate columns,\n    calculates the Pearson correlation coefficient between these columns, and optionally visualizes\n    the correlation matrix using a heatmap.\n\n    Args:\n        df (pandas.DataFrame): Input DataFrame with 'Date' and 'Value' columns.\n        plot (bool, optional): Whether to plot the correlation matrix as a heatmap. Defaults to False.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the correlation coefficients among the lists in the 'Value' column.\n        matplotlib.axes._subplots.AxesSubplot (optional): A matplotlib Axes object containing the heatmap plot, returned if 'plot' is True.\n\n    Raises:\n        ValueError: If the DataFrame input is empty or has invalid 'Value'.\n    \"\"\"\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame input is empty.\")\n\n    # Check if the 'Value' column contains valid lists\n    if not all(isinstance(value, list) for value in df['Value']):\n        raise ValueError(\"The 'Value' column contains invalid lists.\")\n\n    # Split lists in the 'Value' column into separate columns\n    for i, value in enumerate(df['Value']):\n        for j, item in enumerate(value):\n            df[f'Value_{i}_{j}'] = item\n\n    # Drop the original 'Value' column\n    df = df.drop(columns=['Value'])\n\n    # Calculate the Pearson correlation coefficient between these columns\n    correlation_matrix = df.corr(method='pearson')\n\n    # Optionally plot the correlation matrix as a heatmap\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        plt.title('Correlation Heatmap')\n        plt.show()\n\n    return correlation_matrix\n\n# Example usage\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03'],\n    'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n}\ndf = pd.DataFrame(data)\ncorrelation_matrix = task_func(df, plot=True)"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    # Create a dictionary to store the grades for each student and subject\n    grades = {student: {field: random.randint(0, 100) for field in FIELDS} for student in STUDENTS}\n    \n    # Create a dictionary to store the average grades for each subject\n    average_grades = {field: mean(grades[student][field] for student in STUDENTS) for field in FIELDS}\n    \n    # Create a dictionary to store the average grades for each student\n    student_average_grades = {student: mean(grades[student][field] for field in FIELDS) for student in STUDENTS}\n    \n    # Create a DataFrame to store the grades and average grades\n    df = pd.DataFrame(grades)\n    df['Average'] = student_average_grades\n    \n    # Add the average grades for each subject as a new row\n    df.loc['Average Grade'] = average_grades\n    \n    # Set the index of the DataFrame to the subjects\n    df = df.T\n    \n    # Return the DataFrame\n    return df", "raw_solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    # Create a dictionary to store the grades for each student and subject\n    grades = {student: {field: random.randint(0, 100) for field in FIELDS} for student in STUDENTS}\n    \n    # Create a dictionary to store the average grades for each subject\n    average_grades = {field: mean(grades[student][field] for student in STUDENTS) for field in FIELDS}\n    \n    # Create a dictionary to store the average grades for each student\n    student_average_grades = {student: mean(grades[student][field] for field in FIELDS) for student in STUDENTS}\n    \n    # Create a DataFrame to store the grades and average grades\n    df = pd.DataFrame(grades)\n    df['Average'] = student_average_grades\n    \n    # Add the average grades for each subject as a new row\n    df.loc['Average Grade'] = average_grades\n    \n    # Set the index of the DataFrame to the subjects\n    df = df.T\n    \n    # Return the DataFrame\n    return df\n\n# Test the function"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    # Generate random data for 100 people\n    data = []\n    for _ in range(PEOPLE_COUNT):\n        name = f\"Person{random.randint(1, 1000)}\"\n        age = random.randint(18, 65)\n        height = random.randint(150, 200)\n        weight = random.randint(40, 150)\n        data.append([name, age, height, weight])\n\n    # Calculate average age, height, and weight\n    avg_age = mean([person[1] for person in data])\n    avg_height = mean([person[2] for person in data])\n    avg_weight = mean([person[3] for person in data])\n\n    # Append average values to the data\n    data.append(['Average', avg_age, avg_height, avg_weight])\n\n    # Write data to a CSV file\n    with open(filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        writer.writerows(data)\n\n    # Return the path of the created CSV file\n    return filename\nfilename = 'simulated_data.csv'", "raw_solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    # Generate random data for 100 people\n    data = []\n    for _ in range(PEOPLE_COUNT):\n        name = f\"Person{random.randint(1, 1000)}\"\n        age = random.randint(18, 65)\n        height = random.randint(150, 200)\n        weight = random.randint(40, 150)\n        data.append([name, age, height, weight])\n\n    # Calculate average age, height, and weight\n    avg_age = mean([person[1] for person in data])\n    avg_height = mean([person[2] for person in data])\n    avg_weight = mean([person[3] for person in data])\n\n    # Append average values to the data\n    data.append(['Average', avg_age, avg_height, avg_weight])\n\n    # Write data to a CSV file\n    with open(filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        writer.writerows(data)\n\n    # Return the path of the created CSV file\n    return filename\n\n# Example usage\nfilename = 'simulated_data.csv'\nresult = task_func(filename)"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    # Dictionary to store files by their new subdirectory names\n    files_by_subdir = {}\n    \n    # Iterate over each file in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        \n        # Check if the file is a regular file\n        if os.path.isfile(file_path):\n            # Use regular expression to find the first text not enclosed in square brackets\n            match = re.search(r'(?<!\\[)\\b\\w+\\b(?!\\])', filename)\n            \n            if match:\n                # Get the text that matches the pattern\n                subdir_name = match.group()\n                \n                # Create the subdirectory if it doesn't exist\n                if subdir_name not in files_by_subdir:\n                    files_by_subdir[subdir_name] = []\n                \n                # Move the file to the new subdirectory\n                new_path = os.path.join(directory, subdir_name, filename)\n                shutil.move(file_path, new_path)\n                files_by_subdir[subdir_name].append(filename)\n    \n    # Return the directory path and the dictionary of files by subdirectory\n    return directory, files_by_subdir", "raw_solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\ndef task_func(directory):\n    # Dictionary to store files by their new subdirectory names\n    files_by_subdir = {}\n    \n    # Iterate over each file in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        \n        # Check if the file is a regular file\n        if os.path.isfile(file_path):\n            # Use regular expression to find the first text not enclosed in square brackets\n            match = re.search(r'(?<!\\[)\\b\\w+\\b(?!\\])', filename)\n            \n            if match:\n                # Get the text that matches the pattern\n                subdir_name = match.group()\n                \n                # Create the subdirectory if it doesn't exist\n                if subdir_name not in files_by_subdir:\n                    files_by_subdir[subdir_name] = []\n                \n                # Move the file to the new subdirectory\n                new_path = os.path.join(directory, subdir_name, filename)\n                shutil.move(file_path, new_path)\n                files_by_subdir[subdir_name].append(filename)\n    \n    # Return the directory path and the dictionary of files by subdirectory\n    return directory, files_by_subdir\n\n# Example usage:\n# directory_path = '/path/to/your/directory'\n# result = task_func(directory_path)\n# print(result)\n\n```"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    exit_codes = []\n    def run_file(file):\n        process = subprocess.Popen(file, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        exit_codes.append(process.returncode)\n    \n    threads = []\n    for file in file_list:\n        thread = threading.Thread(target=run_file, args=(file,))\n        threads.append(thread)\n        thread.start()\n    \n    for thread in threads:\n        thread.join()\n    \n    return exit_codes\nfile_list = ['file1.py', 'file2.py', 'file3.py']", "raw_solution": "import subprocess\nimport time\nimport threading\n\ndef task_func(file_list):\n    exit_codes = []\n    def run_file(file):\n        process = subprocess.Popen(file, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        exit_codes.append(process.returncode)\n    \n    threads = []\n    for file in file_list:\n        thread = threading.Thread(target=run_file, args=(file,))\n        threads.append(thread)\n        thread.start()\n    \n    for thread in threads:\n        thread.join()\n    \n    return exit_codes\n\n# Example usage\nfile_list = ['file1.py', 'file2.py', 'file3.py']\nexit_codes = task_func(file_list)"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    result = []\n    for file_path in glob.glob(os.path.join(directory_path, '*.bat')):\n        try:\n            process = subprocess.Popen(file_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n            stdout, stderr = process.communicate()\n            exit_code = process.returncode\n            result.append((os.path.basename(file_path), exit_code))\n        except Exception as e:\n            result.append((os.path.basename(file_path), None))\n    return result\ndirectory_path = 'C:\\\\path\\\\to\\\\your\\\\directory'", "raw_solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    result = []\n    for file_path in glob.glob(os.path.join(directory_path, '*.bat')):\n        try:\n            process = subprocess.Popen(file_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n            stdout, stderr = process.communicate()\n            exit_code = process.returncode\n            result.append((os.path.basename(file_path), exit_code))\n        except Exception as e:\n            result.append((os.path.basename(file_path), None))\n    return result\n\n# Example usage\ndirectory_path = 'C:\\\\path\\\\to\\\\your\\\\directory'"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty\")\n    if col not in df.columns:\n        raise ValueError(\"The input df must contain the specified column\")\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n    if df[col].dtype in ['int64', 'float64']:\n        sns.histplot(df[col], kde=True, ax=axes[0])\n    else:\n        sns.countplot(df[col], ax=axes[0])\n\n    sns.boxplot(df[col], ax=axes[1])\n\n    plt.tight_layout()\n    return fig\ndata = {'A': [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty\")\n    if col not in df.columns:\n        raise ValueError(\"The input df must contain the specified column\")\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n    if df[col].dtype in ['int64', 'float64']:\n        sns.histplot(df[col], kde=True, ax=axes[0])\n    else:\n        sns.countplot(df[col], ax=axes[0])\n\n    sns.boxplot(df[col], ax=axes[1])\n\n    plt.tight_layout()\n    return fig\n\n# Example usage\ndata = {'A': [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}\ndf = pd.DataFrame(data)\nfig = task_func(df, 'A')\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    if not os.path.exists(script_path):\n        raise ValueError(\"Script does not exist\")\n    \n    try:\n        if wait:\n            result = subprocess.run([sys.executable, script_path] + list(args), check=True, capture_output=True, text=True)\n            return result.returncode\n        else:\n            subprocess.Popen([sys.executable, script_path] + list(args))\n            return None\n    except subprocess.CalledProcessError as e:\n        raise e", "raw_solution": "import subprocess\nimport os\nimport sys\nimport time\n\ndef task_func(script_path, wait=True, *args):\n    if not os.path.exists(script_path):\n        raise ValueError(\"Script does not exist\")\n    \n    try:\n        if wait:\n            result = subprocess.run([sys.executable, script_path] + list(args), check=True, capture_output=True, text=True)\n            return result.returncode\n        else:\n            subprocess.Popen([sys.executable, script_path] + list(args))\n            return None\n    except subprocess.CalledProcessError as e:\n        raise e\n\n# Example usage:\n# task_func('path_to_your_script.py', wait=True, 'arg1', 'arg2')\n\n```"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    # Check if the file exists\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(\"The specified file does not exist at the specified path.\")\n    \n    # Load the Excel file\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except KeyError:\n        raise ValueError(\"The specified sheet does not exist in the workbook.\")\n    \n    # Calculate mean and standard deviation for each column\n    stats = {\n        'mean': df.mean(),\n        'std': df.std()\n    }\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(stats['mean'].index, stats['mean'], yerr=stats['std'], capsize=5)\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    \n    return stats, fig\nfile_location = 'path_to_your_excel_file.xlsx'\nsheet_name = 'Sheet1'", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    # Check if the file exists\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(\"The specified file does not exist at the specified path.\")\n    \n    # Load the Excel file\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except KeyError:\n        raise ValueError(\"The specified sheet does not exist in the workbook.\")\n    \n    # Calculate mean and standard deviation for each column\n    stats = {\n        'mean': df.mean(),\n        'std': df.std()\n    }\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(stats['mean'].index, stats['mean'], yerr=stats['std'], capsize=5)\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    \n    return stats, fig\n\n# Example usage\nfile_location = 'path_to_your_excel_file.xlsx'\nsheet_name = 'Sheet1'\nstats, fig = task_func(file_location, sheet_name)\n\n# Display the figure\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n    \n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.strftime('%A')] += 1\n    \n    days = list(day_counts.keys())\n    counts = list(day_counts.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax\nactivities = [\n    datetime(2023, 1, 1, 10, 0),\n    datetime(2023, 1, 2, 11, 0),\n    datetime(2023, 1, 3, 12, 0),\n    datetime(2023, 1, 4, 13, 0),\n    datetime(2023, 1, 5, 14, 0),\n    datetime(2023, 1, 6, 15, 0),\n    datetime(2023, 1, 7, 16, 0),\n    datetime(2023, 1, 1, 17, 0),\n    datetime(2023, 1, 2, 18, 0),\n    datetime(2023, 1, 3, 19, 0),\n    datetime(2023, 1, 4, 20, 0),\n    datetime(2023, 1, 5, 21, 0),\n    datetime(2023, 1, 6, 22, 0),\n    datetime(2023, 1, 7, 23, 0),\n]", "raw_solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n    \n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.strftime('%A')] += 1\n    \n    days = list(day_counts.keys())\n    counts = list(day_counts.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax\n\n# Example usage:\nactivities = [\n    datetime(2023, 1, 1, 10, 0),\n    datetime(2023, 1, 2, 11, 0),\n    datetime(2023, 1, 3, 12, 0),\n    datetime(2023, 1, 4, 13, 0),\n    datetime(2023, 1, 5, 14, 0),\n    datetime(2023, 1, 6, 15, 0),\n    datetime(2023, 1, 7, 16, 0),\n    datetime(2023, 1, 1, 17, 0),\n    datetime(2023, 1, 2, 18, 0),\n    datetime(2023, 1, 3, 19, 0),\n    datetime(2023, 1, 4, 20, 0),\n    datetime(2023, 1, 5, 21, 0),\n    datetime(2023, 1, 6, 22, 0),\n    datetime(2023, 1, 7, 23, 0),\n]\n\nax = task_func(activities)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    # Set the random seed for reproducibility\n    random.seed(seed)\n    \n    # List all files in the source directory\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    \n    # Check if there are any files in the source directory\n    if not files:\n        return \"No files to move.\"\n    \n    # Select a random file from the list\n    random_file = random.choice(files)\n    \n    # Construct the full path of the source file\n    src_file_path = os.path.join(src_dir, random_file)\n    \n    # Construct the full path of the destination file\n    dest_file_path = os.path.join(dest_dir, random_file)\n    \n    # Move the file from the source directory to the destination directory\n    shutil.move(src_file_path, dest_file_path)\n    \n    # Return the name of the moved file\n    return random_file", "raw_solution": "import os\nimport shutil\nimport random\n\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    # Set the random seed for reproducibility\n    random.seed(seed)\n    \n    # List all files in the source directory\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    \n    # Check if there are any files in the source directory\n    if not files:\n        return \"No files to move.\"\n    \n    # Select a random file from the list\n    random_file = random.choice(files)\n    \n    # Construct the full path of the source file\n    src_file_path = os.path.join(src_dir, random_file)\n    \n    # Construct the full path of the destination file\n    dest_file_path = os.path.join(dest_dir, random_file)\n    \n    # Move the file from the source directory to the destination directory\n    shutil.move(src_file_path, dest_file_path)\n    \n    # Return the name of the moved file\n    return random_file\n\n# Example usage:\n# src_dir = \"/path/to/source/directory\"\n# dest_dir = \"/path/to/destination/directory\"\n# print(task_func(src_dir, dest_dir))\n\n```"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    # Initialize a counter for the number of files processed\n    file_count = 0\n    \n    # Use glob to find all .xlsx files in the specified directory\n    for file_path in glob.glob(directory_path + '*.xlsx'):\n        # Load the workbook\n        workbook = load_workbook(file_path)\n        \n        # Iterate through all sheets in the workbook\n        for sheet in workbook.sheetnames:\n            # Select the sheet\n            worksheet = workbook[sheet]\n            \n            # Iterate through all cells in the sheet\n            for row in worksheet.iter_rows():\n                for cell in row:\n                    # Check if the cell value is a string and contains double quotes\n                    if isinstance(cell.value, str) and '\"' in cell.value:\n                        # Replace double quotes with double backslashes followed by double quotes\n                        cell.value = re.sub(r'\"', r'\\\"', cell.value)\n        \n        # Save the modified workbook\n        workbook.save(file_path)\n        \n        # Increment the file count\n        file_count += 1\n    \n    # Return the number of files processed\n    return file_count\ndirectory_path = './xlsx_files/'", "raw_solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\ndef task_func(directory_path='./xlsx_files/'):\n    # Initialize a counter for the number of files processed\n    file_count = 0\n    \n    # Use glob to find all .xlsx files in the specified directory\n    for file_path in glob.glob(directory_path + '*.xlsx'):\n        # Load the workbook\n        workbook = load_workbook(file_path)\n        \n        # Iterate through all sheets in the workbook\n        for sheet in workbook.sheetnames:\n            # Select the sheet\n            worksheet = workbook[sheet]\n            \n            # Iterate through all cells in the sheet\n            for row in worksheet.iter_rows():\n                for cell in row:\n                    # Check if the cell value is a string and contains double quotes\n                    if isinstance(cell.value, str) and '\"' in cell.value:\n                        # Replace double quotes with double backslashes followed by double quotes\n                        cell.value = re.sub(r'\"', r'\\\"', cell.value)\n        \n        # Save the modified workbook\n        workbook.save(file_path)\n        \n        # Increment the file count\n        file_count += 1\n    \n    # Return the number of files processed\n    return file_count\n\n# Example usage\ndirectory_path = './xlsx_files/'\nresult = task_func(directory_path)"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n    \n    t = np.linspace(0, 1, sample_size)\n    sine_wave = np.sin(2 * math.pi * frequency * t)\n    cosine_wave = np.cos(2 * math.pi * frequency * t)\n    \n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine Wave')\n    ax.plot(t, cosine_wave, label='Cosine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title('Sine and Cosine Waves')\n    ax.legend()\n    \n    return fig, ax\nfrequency = 1", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n    \n    t = np.linspace(0, 1, sample_size)\n    sine_wave = np.sin(2 * math.pi * frequency * t)\n    cosine_wave = np.cos(2 * math.pi * frequency * t)\n    \n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine Wave')\n    ax.plot(t, cosine_wave, label='Cosine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title('Sine and Cosine Waves')\n    ax.legend()\n    \n    return fig, ax\n\n# Example usage\nfrequency = 1\nfig, ax = task_func(frequency)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': bool(os.getenv('MAIL_USE_TLS', False)),\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', None),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', None)\n    }\n    mail = Mail(app)\n    return mail, mail_config\napp_name = 'my_flask_app'", "raw_solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': bool(os.getenv('MAIL_USE_TLS', False)),\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', None),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', None)\n    }\n    mail = Mail(app)\n    return mail, mail_config\n\n# Example usage\napp_name = 'my_flask_app'\nmail, mail_config = task_func(app_name)"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    # Construct the full path to the Excel file\n    file_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(\"The specified file does not exist at the given path.\")\n    \n    # Load the Excel file into a pandas DataFrame\n    try:\n        df = pd.read_excel(file_path)\n    except Exception as e:\n        raise ValueError(\"An error occurred while reading the Excel file.\") from e\n    \n    # Check if the specified column exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(\"The specified column is not found in the Excel file.\")\n    \n    # Calculate the mean, median, and standard deviation of the specified column\n    mean = df[column_name].mean()\n    median = df[column_name].median()\n    std_dev = df[column_name].std()\n    \n    # Return the results as a dictionary\n    return {\n        'mean': mean,\n        'median': median,\n        'std_dev': std_dev\n    }", "raw_solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    # Construct the full path to the Excel file\n    file_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(\"The specified file does not exist at the given path.\")\n    \n    # Load the Excel file into a pandas DataFrame\n    try:\n        df = pd.read_excel(file_path)\n    except Exception as e:\n        raise ValueError(\"An error occurred while reading the Excel file.\") from e\n    \n    # Check if the specified column exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(\"The specified column is not found in the Excel file.\")\n    \n    # Calculate the mean, median, and standard deviation of the specified column\n    mean = df[column_name].mean()\n    median = df[column_name].median()\n    std_dev = df[column_name].std()\n    \n    # Return the results as a dictionary\n    return {\n        'mean': mean,\n        'median': median,\n        'std_dev': std_dev\n    }\n\n# Example usage:\n# result = task_func('/path/to/excel/files', 'data.xlsx', 'column_name')\n# print(result)\n\n```"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    \n    # Construct a Sequential model with one dense hidden layer and a sigmoid activation function\n    model = Sequential()\n    model.add(Dense(10, input_dim=2, activation='relu'))  # Hidden layer with 10 neurons and ReLU activation\n    model.add(Dense(1, activation='sigmoid'))  # Output layer with 1 neuron and sigmoid activation\n    \n    # Compile the model using binary cross-entropy loss and SGD optimizer with a specified learning rate\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n    \n    # Fit the model to the training data (without verbose output), also evaluating it on the test set as validation data\n    history = model.fit(X_train, Y_train, epochs=50, batch_size=10, verbose=0, validation_data=(X_test, Y_test))\n    \n    # Plot the model's training and validation loss over epochs\n    plt.figure(figsize=(10, 5))\n    plt.plot(history.history['loss'], label='Train')\n    plt.plot(history.history['val_loss'], label='Test')\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Return the model and the Axes object of the plot\n    return model, plt.gca()", "raw_solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    \n    # Construct a Sequential model with one dense hidden layer and a sigmoid activation function\n    model = Sequential()\n    model.add(Dense(10, input_dim=2, activation='relu'))  # Hidden layer with 10 neurons and ReLU activation\n    model.add(Dense(1, activation='sigmoid'))  # Output layer with 1 neuron and sigmoid activation\n    \n    # Compile the model using binary cross-entropy loss and SGD optimizer with a specified learning rate\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n    \n    # Fit the model to the training data (without verbose output), also evaluating it on the test set as validation data\n    history = model.fit(X_train, Y_train, epochs=50, batch_size=10, verbose=0, validation_data=(X_test, Y_test))\n    \n    # Plot the model's training and validation loss over epochs\n    plt.figure(figsize=(10, 5))\n    plt.plot(history.history['loss'], label='Train')\n    plt.plot(history.history['val_loss'], label='Test')\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Return the model and the Axes object of the plot\n    return model, plt.gca()\n\n# Example usage:\n# X = ...  # Your input data\n# Y = ...  # Your target labels\n# model, axes = task_func(X, Y)\n\n```"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer\n    model = keras.Sequential([\n        keras.layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model with binary cross-entropy loss and an SGD optimizer\n    model.compile(optimizer=keras.optimizers.SGD(learning_rate=0.01), loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data in a non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Predict probabilities on the test set\n    Y_pred = model.predict(X_test)\n\n    # Calculate the ROC curve and AUC score\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()", "raw_solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer\n    model = keras.Sequential([\n        keras.layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model with binary cross-entropy loss and an SGD optimizer\n    model.compile(optimizer=keras.optimizers.SGD(learning_rate=0.01), loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data in a non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Predict probabilities on the test set\n    Y_pred = model.predict(X_test)\n\n    # Calculate the ROC curve and AUC score\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()\n\n# Example usage\n# X = ...\n# Y = ...\n# model, ax = task_func(X, Y)\n\n```"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(\"The image file does not exist at the specified path.\")\n    \n    # Check if 'n_clusters' is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"The number of clusters must be a positive integer.\")\n    \n    # Read the image\n    image = cv2.imread(image_path)\n    \n    # Convert the image from BGR to RGB\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    # Reshape the image to a 2D array of pixels\n    pixels = image_rgb.reshape(-1, 3)\n    \n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    \n    # Replace each pixel with the centroid of its cluster\n    segmented_pixels = kmeans.cluster_centers_[kmeans.labels_]\n    \n    # Reshape the segmented pixels back to the original image shape\n    segmented_image = segmented_pixels.reshape(image_rgb.shape)\n    \n    # Convert the segmented image back to BGR for saving\n    segmented_image_bgr = cv2.cvtColor(segmented_image, cv2.COLOR_RGB2BGR)\n    \n    # Save the segmented image\n    cv2.imwrite('segmented_image.jpg', segmented_image_bgr)\n    \n    # Return the original and segmented images as numpy arrays\n    return image_rgb, segmented_image", "raw_solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(\"The image file does not exist at the specified path.\")\n    \n    # Check if 'n_clusters' is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"The number of clusters must be a positive integer.\")\n    \n    # Read the image\n    image = cv2.imread(image_path)\n    \n    # Convert the image from BGR to RGB\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    # Reshape the image to a 2D array of pixels\n    pixels = image_rgb.reshape(-1, 3)\n    \n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    \n    # Replace each pixel with the centroid of its cluster\n    segmented_pixels = kmeans.cluster_centers_[kmeans.labels_]\n    \n    # Reshape the segmented pixels back to the original image shape\n    segmented_image = segmented_pixels.reshape(image_rgb.shape)\n    \n    # Convert the segmented image back to BGR for saving\n    segmented_image_bgr = cv2.cvtColor(segmented_image, cv2.COLOR_RGB2BGR)\n    \n    # Save the segmented image\n    cv2.imwrite('segmented_image.jpg', segmented_image_bgr)\n    \n    # Return the original and segmented images as numpy arrays\n    return image_rgb, segmented_image\n\n# Example usage\noriginal_image, segmented_image = task_func('image.jpg', n_clusters=3)"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate the product of a matrix 'P' and a 3D tensor 'T', flatten the result, apply KMeans clustering to the flattened data, and visualize it.\n\n    Args:\n        P (np.ndarray): A matrix.\n        T (np.ndarray): A 3D tensor.\n        n_clusters (int, optional): The number of clusters. Defaults to 3.\n        random_state (int, optional): The random state for reproducibility. Defaults to 0.\n        n_init (int, optional): The number of times the KMeans algorithm will be run with different centroid seeds. Defaults to 10.\n\n    Returns:\n        cluster_result (np.ndarray): The result of KMeans clustering.\n        ax (plt.Axes): The visualization of the KMeans clustering, with the title 'KMeans Clustering Visualization'.\n    \"\"\"\n    # Calculate the product of matrix 'P' and 3D tensor 'T'\n    result = np.dot(P, T)\n\n    # Flatten the result\n    flattened_result = result.flatten()\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result.reshape(-1, 1))\n\n    # Visualize the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(flattened_result)), flattened_result, c=cluster_result)\n    ax.set_title('KMeans Clustering Visualization')\n\n    return cluster_result, ax\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])", "raw_solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate the product of a matrix 'P' and a 3D tensor 'T', flatten the result, apply KMeans clustering to the flattened data, and visualize it.\n\n    Args:\n        P (np.ndarray): A matrix.\n        T (np.ndarray): A 3D tensor.\n        n_clusters (int, optional): The number of clusters. Defaults to 3.\n        random_state (int, optional): The random state for reproducibility. Defaults to 0.\n        n_init (int, optional): The number of times the KMeans algorithm will be run with different centroid seeds. Defaults to 10.\n\n    Returns:\n        cluster_result (np.ndarray): The result of KMeans clustering.\n        ax (plt.Axes): The visualization of the KMeans clustering, with the title 'KMeans Clustering Visualization'.\n    \"\"\"\n    # Calculate the product of matrix 'P' and 3D tensor 'T'\n    result = np.dot(P, T)\n\n    # Flatten the result\n    flattened_result = result.flatten()\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result.reshape(-1, 1))\n\n    # Visualize the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(flattened_result)), flattened_result, c=cluster_result)\n    ax.set_title('KMeans Clustering Visualization')\n\n    return cluster_result, ax\n\n# Example usage\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\ncluster_result, ax = task_func(P, T)\n\n# Print the cluster result"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate the Voronoi diagram for a number of points in 2D and plot it.\n    \n    Parameters:\n    points (np.ndarray): A 2D array of points.\n    seed (int): A seed for the random number generator.\n    \n    Returns:\n    tuple: A tuple containing:\n        vor (Voronoi): A Voronoi object representing the Voronoi diagram of the points.\n        ax (Axes): The axes of the plotted Voronoi diagram.\n    \"\"\"\n    # Check if the input is a 2D array\n    if not isinstance(points, np.ndarray) or points.ndim != 2:\n        raise ValueError(\"Input points must be a 2D array.\")\n    \n    # Check if the input array has at least two points\n    if points.shape[0] < 2:\n        raise ValueError(\"Input points must have at least two points.\")\n    \n    # Check if the input array has two columns\n    if points.shape[1] != 2:\n        raise ValueError(\"Input points must have two columns.\")\n    \n    # Apply jittering to the points\n    np.random.seed(seed)\n    jitter = 0.1\n    points += jitter * np.random.randn(points.shape[0], points.shape[1])\n    \n    # Calculate the Voronoi diagram\n    vor = Voronoi(points)\n    \n    # Plot the Voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    \n    return vor, ax\npoints = np.array([[0, 0], [1, 4], [2, 3], [4, 1], [1, 1], [2, 2], [5, 3]])", "raw_solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate the Voronoi diagram for a number of points in 2D and plot it.\n    \n    Parameters:\n    points (np.ndarray): A 2D array of points.\n    seed (int): A seed for the random number generator.\n    \n    Returns:\n    tuple: A tuple containing:\n        vor (Voronoi): A Voronoi object representing the Voronoi diagram of the points.\n        ax (Axes): The axes of the plotted Voronoi diagram.\n    \"\"\"\n    # Check if the input is a 2D array\n    if not isinstance(points, np.ndarray) or points.ndim != 2:\n        raise ValueError(\"Input points must be a 2D array.\")\n    \n    # Check if the input array has at least two points\n    if points.shape[0] < 2:\n        raise ValueError(\"Input points must have at least two points.\")\n    \n    # Check if the input array has two columns\n    if points.shape[1] != 2:\n        raise ValueError(\"Input points must have two columns.\")\n    \n    # Apply jittering to the points\n    np.random.seed(seed)\n    jitter = 0.1\n    points += jitter * np.random.randn(points.shape[0], points.shape[1])\n    \n    # Calculate the Voronoi diagram\n    vor = Voronoi(points)\n    \n    # Plot the Voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    \n    return vor, ax\n\n# Example usage\npoints = np.array([[0, 0], [1, 4], [2, 3], [4, 1], [1, 1], [2, 2], [5, 3]])\nvor, ax = task_func(points)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(\"Destination directory does not exist\")\n\n    moved_files = []\n    for file_path in glob.glob(os.path.join(src_dir, f\"*.{ext}\")):\n        file_name = os.path.basename(file_path)\n        dest_file_path = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file_path):\n            shutil.move(file_path, dest_file_path)\n            moved_files.append(dest_file_path)\n\n    return moved_files", "raw_solution": "import os\nimport shutil\nimport glob\n\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(\"Destination directory does not exist\")\n\n    moved_files = []\n    for file_path in glob.glob(os.path.join(src_dir, f\"*.{ext}\")):\n        file_name = os.path.basename(file_path)\n        dest_file_path = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file_path):\n            shutil.move(file_path, dest_file_path)\n            moved_files.append(dest_file_path)\n\n    return moved_files\n\n```"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    if not json_str:\n        return pd.DataFrame()\n    \n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n    \n    def normalize_value(value):\n        if isinstance(value, list):\n            return [normalize_value(v) for v in value]\n        elif isinstance(value, str):\n            try:\n                return float(re.sub(r'[^\\d.-]', '', value)) * 2\n            except ValueError:\n                return value\n        else:\n            return value * 2\n    \n    normalized_data = {key: normalize_value(value) for key, value in data.items()}\n    \n    return pd.DataFrame(normalized_data)", "raw_solution": "import json\nimport re\nimport pandas as pd\n\ndef task_func(json_str):\n    if not json_str:\n        return pd.DataFrame()\n    \n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n    \n    def normalize_value(value):\n        if isinstance(value, list):\n            return [normalize_value(v) for v in value]\n        elif isinstance(value, str):\n            try:\n                return float(re.sub(r'[^\\d.-]', '', value)) * 2\n            except ValueError:\n                return value\n        else:\n            return value * 2\n    \n    normalized_data = {key: normalize_value(value) for key, value in data.items()}\n    \n    return pd.DataFrame(normalized_data)\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script not found: {script_path}\")\n\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    cpu_usage = 0\n    memory_usage = 0\n    start_time = time.time()\n\n    while process.poll() is None and time.time() - start_time < timeout:\n        try:\n            process_info = psutil.Process(process.pid)\n            cpu_usage += process_info.cpu_percent(interval=1)\n            memory_usage += process_info.memory_info().rss\n        except psutil.NoSuchProcess:\n            break\n\n    if process.poll() is None:\n        process.terminate()\n        process.wait()\n\n    return {\n        'CPU Usage': cpu_usage,\n        'Memory Usage': memory_usage\n    }\nscript_path = 'path_to_your_script.sh'", "raw_solution": "import subprocess\nimport psutil\nimport time\nimport os\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script not found: {script_path}\")\n\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    cpu_usage = 0\n    memory_usage = 0\n    start_time = time.time()\n\n    while process.poll() is None and time.time() - start_time < timeout:\n        try:\n            process_info = psutil.Process(process.pid)\n            cpu_usage += process_info.cpu_percent(interval=1)\n            memory_usage += process_info.memory_info().rss\n        except psutil.NoSuchProcess:\n            break\n\n    if process.poll() is None:\n        process.terminate()\n        process.wait()\n\n    return {\n        'CPU Usage': cpu_usage,\n        'Memory Usage': memory_usage\n    }\n\n# Example usage\nscript_path = 'path_to_your_script.sh'\nresult = task_func(script_path)"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a DataFrame with N rows and 3 columns\n    df = pd.DataFrame({\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, N)\n    })\n    \n    # Ensure each category appears at least once if N is greater than or equal to the number of categories\n    if N >= len(CATEGORIES):\n        for category in CATEGORIES:\n            if category not in df[\"category\"].values:\n                df.loc[len(df)] = [np.random.rand(), np.random.rand(), category]\n    \n    # Draw a scatter plot of \"x\" vs \"y,\" colored by \"category\"\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        subset = df[df[\"category\"] == category]\n        ax.scatter(subset[\"x\"], subset[\"y\"], label=category)\n    \n    ax.legend()\n    plt.show()\n    \n    # Return the DataFrame and the Axes object of the scatter plot\n    return df, ax", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a DataFrame with N rows and 3 columns\n    df = pd.DataFrame({\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, N)\n    })\n    \n    # Ensure each category appears at least once if N is greater than or equal to the number of categories\n    if N >= len(CATEGORIES):\n        for category in CATEGORIES:\n            if category not in df[\"category\"].values:\n                df.loc[len(df)] = [np.random.rand(), np.random.rand(), category]\n    \n    # Draw a scatter plot of \"x\" vs \"y,\" colored by \"category\"\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        subset = df[df[\"category\"] == category]\n        ax.scatter(subset[\"x\"], subset[\"y\"], label=category)\n    \n    ax.legend()\n    plt.show()\n    \n    # Return the DataFrame and the Axes object of the scatter plot\n    return df, ax\n\n# Example usage\ndf, ax = task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42)\n\n```"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, trend, seed=42):\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a date range from start_time to end_time with the specified step\n    date_range = pd.date_range(start=start_time, end=end_time, freq=timedelta(seconds=step))\n    \n    # Generate random values from a normal distribution\n    values = np.random.randn(len(date_range))\n    \n    # Add a linear trend to the values\n    values += np.arange(len(date_range)) * trend\n    \n    # Create a DataFrame to hold the date and value data\n    data = pd.DataFrame({'Time': date_range, 'Value': values})\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(data['Time'], data['Value'], marker='o')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax\nstart_time = datetime(2023, 1, 1)\nend_time = datetime(2023, 1, 2)\nstep = 3600\ntrend = 0.1", "raw_solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a date range from start_time to end_time with the specified step\n    date_range = pd.date_range(start=start_time, end=end_time, freq=timedelta(seconds=step))\n    \n    # Generate random values from a normal distribution\n    values = np.random.randn(len(date_range))\n    \n    # Add a linear trend to the values\n    values += np.arange(len(date_range)) * trend\n    \n    # Create a DataFrame to hold the date and value data\n    data = pd.DataFrame({'Time': date_range, 'Value': values})\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(data['Time'], data['Value'], marker='o')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax\n\n# Example usage\nstart_time = datetime(2023, 1, 1)\nend_time = datetime(2023, 1, 2)\nstep = 3600  # 1 hour in seconds\ntrend = 0.1  # 0.1 units per hour\n\nax = task_func(start_time, end_time, step, trend)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"Invalid epoch time\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"Invalid random seed\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"Invalid products list\")\n\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n\n    # Convert epoch time to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Get current date\n    end_date = datetime.now()\n\n    # Generate sales data\n    sales_data = []\n    for product in products:\n        for date in pd.date_range(start=start_date, end=end_date):\n            sales = random.randint(10, 50)\n            sales_data.append({\"Product\": product, \"Date\": date, \"Sales\": sales})\n\n    # Create DataFrame\n    df = pd.DataFrame(sales_data)\n\n    return df\nepoch_milliseconds = 1609459200000", "raw_solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"Invalid epoch time\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"Invalid random seed\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"Invalid products list\")\n\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n\n    # Convert epoch time to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Get current date\n    end_date = datetime.now()\n\n    # Generate sales data\n    sales_data = []\n    for product in products:\n        for date in pd.date_range(start=start_date, end=end_date):\n            sales = random.randint(10, 50)\n            sales_data.append({\"Product\": product, \"Date\": date, \"Sales\": sales})\n\n    # Create DataFrame\n    df = pd.DataFrame(sales_data)\n\n    return df\n\n# Example usage\nepoch_milliseconds = 1609459200000  # January 1, 2021\ndf = task_func(epoch_milliseconds)"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\nimport json\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    # Check if the input is a valid JSON string\n    try:\n        json_data = json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n    # Check if the input is a string\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"Input must be a string, bytes, or bytearray\")\n\n    # Create a DataFrame from the JSON data\n    df = pd.DataFrame(json_data)\n\n    # Create a new Excel file\n    with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:\n        df.to_excel(writer, sheet_name=sheet_name, index=False)\n\n    # Return the absolute path of the created Excel file\n    return os.path.abspath(filename)\njson_str = '[]'\nfilename = 'output.xlsx'", "raw_solution": "import xlwt\nimport os\nimport pandas as pd\nimport json\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    # Check if the input is a valid JSON string\n    try:\n        json_data = json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n    # Check if the input is a string\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"Input must be a string, bytes, or bytearray\")\n\n    # Create a DataFrame from the JSON data\n    df = pd.DataFrame(json_data)\n\n    # Create a new Excel file\n    with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:\n        df.to_excel(writer, sheet_name=sheet_name, index=False)\n\n    # Return the absolute path of the created Excel file\n    return os.path.abspath(filename)\n\n# Example usage\njson_str = '[]'\nfilename = 'output.xlsx'"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Create a list of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Create an empty list to store the data\n    data = []\n    \n    # Loop through the number of days in the past\n    for i in range(days_in_past):\n        # Create a date for the current day\n        date = datetime.now() - timedelta(days=i)\n        \n        # Loop through the activities\n        for activity in activities:\n            # Generate a random duration for the current activity\n            duration = random.randint(0, 120)\n            \n            # Append the data to the list\n            data.append([date, activity, duration])\n    \n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Date\", \"Activity\", \"Duration\"])\n    \n    # Convert the Date column to datetime\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n    \n    # Set the Date column as the index\n    df.set_index(\"Date\", inplace=True)\n    \n    # Create a lineplot using Seaborn\n    ax = sns.lineplot(data=df, x=df.index, y=\"Duration\", hue=\"Activity\")\n    \n    # Return the ax and df\n    return ax, df", "raw_solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\ndef task_func(days_in_past=7, random_seed=0):\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Create a list of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Create an empty list to store the data\n    data = []\n    \n    # Loop through the number of days in the past\n    for i in range(days_in_past):\n        # Create a date for the current day\n        date = datetime.now() - timedelta(days=i)\n        \n        # Loop through the activities\n        for activity in activities:\n            # Generate a random duration for the current activity\n            duration = random.randint(0, 120)\n            \n            # Append the data to the list\n            data.append([date, activity, duration])\n    \n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Date\", \"Activity\", \"Duration\"])\n    \n    # Convert the Date column to datetime\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n    \n    # Set the Date column as the index\n    df.set_index(\"Date\", inplace=True)\n    \n    # Create a lineplot using Seaborn\n    ax = sns.lineplot(data=df, x=df.index, y=\"Duration\", hue=\"Activity\")\n    \n    # Return the ax and df\n    return ax, df\n\n# Example usage\nax, df = task_func(days_in_past=7, random_seed=0)\n\n# Show the plot\nax.figure.show()\n\n```"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Create a DataFrame to store the stock prices\n    stock_prices = pd.DataFrame(index=range(days_in_past), columns=stock_names)\n    \n    # Generate random stock prices for each stock\n    for stock in stock_names:\n        stock_prices[stock] = np.random.rand(days_in_past)\n    \n    # Set the index to represent the date of each day\n    stock_prices.index = pd.date_range(start=datetime.now() - pd.Timedelta(days=days_in_past), periods=days_in_past)\n    \n    return stock_prices", "raw_solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Create a DataFrame to store the stock prices\n    stock_prices = pd.DataFrame(index=range(days_in_past), columns=stock_names)\n    \n    # Generate random stock prices for each stock\n    for stock in stock_names:\n        stock_prices[stock] = np.random.rand(days_in_past)\n    \n    # Set the index to represent the date of each day\n    stock_prices.index = pd.date_range(start=datetime.now() - pd.Timedelta(days=days_in_past), periods=days_in_past)\n    \n    return stock_prices\n\n# Example usage"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as file1, open(file_path2, 'r', newline='', encoding='utf-8') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n            \n            if not file1.read(1):\n                raise ValueError(\"File 1 is empty\")\n            if not file2.read(1):\n                raise ValueError(\"File 2 is empty\")\n            \n            file1.seek(0)\n            file2.seek(0)\n            \n            diff_df = pd.DataFrame(columns=['Line Number', 'Status', 'Content'])\n            line_number = 1\n            \n            for line1, line2 in zip(reader1, reader2):\n                if line1 != line2:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '-', 'Content': ' '.join(line1)}, ignore_index=True)\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '+', 'Content': ' '.join(line2)}, ignore_index=True)\n                line_number += 1\n            \n            if len(list(reader1)) > len(list(reader2)):\n                for line in reader1:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '-', 'Content': ' '.join(line)}, ignore_index=True)\n                    line_number += 1\n            elif len(list(reader1)) < len(list(reader2)):\n                for line in reader2:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '+', 'Content': ' '.join(line)}, ignore_index=True)\n                    line_number += 1\n            \n            return diff_df\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both of the files cannot be found\")\n    except Exception as e:\n        raise Exception(f\"An IO related error occurred: {e}\")", "raw_solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as file1, open(file_path2, 'r', newline='', encoding='utf-8') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n            \n            if not file1.read(1):\n                raise ValueError(\"File 1 is empty\")\n            if not file2.read(1):\n                raise ValueError(\"File 2 is empty\")\n            \n            file1.seek(0)\n            file2.seek(0)\n            \n            diff_df = pd.DataFrame(columns=['Line Number', 'Status', 'Content'])\n            line_number = 1\n            \n            for line1, line2 in zip(reader1, reader2):\n                if line1 != line2:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '-', 'Content': ' '.join(line1)}, ignore_index=True)\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '+', 'Content': ' '.join(line2)}, ignore_index=True)\n                line_number += 1\n            \n            if len(list(reader1)) > len(list(reader2)):\n                for line in reader1:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '-', 'Content': ' '.join(line)}, ignore_index=True)\n                    line_number += 1\n            elif len(list(reader1)) < len(list(reader2)):\n                for line in reader2:\n                    diff_df = diff_df.append({'Line Number': line_number, 'Status': '+', 'Content': ' '.join(line)}, ignore_index=True)\n                    line_number += 1\n            \n            return diff_df\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both of the files cannot be found\")\n    except Exception as e:\n        raise Exception(f\"An IO related error occurred: {e}\")\n\n# Example usage:\n# diff_report = task_func('file1.csv', 'file2.csv')\n# print(diff_report)\n\n```"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n\n    df = pd.DataFrame(data)\n    if column not in df.columns:\n        raise ValueError(f\"Column '{column}' not found in the data\")\n\n    column_data = df[column]\n    result = {\n        'sum': column_data.sum(),\n        'mean': column_data.mean(),\n        'min': column_data.min(),\n        'max': column_data.max()\n    }\n\n    fig, ax = plt.subplots()\n    ax.pie(column_data.value_counts(), labels=column_data.value_counts().index, autopct='%1.1f%%')\n    ax.axis('equal')\n\n    return result, ax\ndata = [\n    {'Name': 'John', 'Age': 30, 'Salary': 50000},\n    {'Name': 'Jane', 'Age': 25, 'Salary': 40000},\n    {'Name': 'Bob', 'Age': 35, 'Salary': 60000},\n    {'Name': 'Alice', 'Age': 28, 'Salary': 55000}\n]", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n\n    df = pd.DataFrame(data)\n    if column not in df.columns:\n        raise ValueError(f\"Column '{column}' not found in the data\")\n\n    column_data = df[column]\n    result = {\n        'sum': column_data.sum(),\n        'mean': column_data.mean(),\n        'min': column_data.min(),\n        'max': column_data.max()\n    }\n\n    fig, ax = plt.subplots()\n    ax.pie(column_data.value_counts(), labels=column_data.value_counts().index, autopct='%1.1f%%')\n    ax.axis('equal')\n\n    return result, ax\n\n# Example usage:\ndata = [\n    {'Name': 'John', 'Age': 30, 'Salary': 50000},\n    {'Name': 'Jane', 'Age': 25, 'Salary': 40000},\n    {'Name': 'Bob', 'Age': 35, 'Salary': 60000},\n    {'Name': 'Alice', 'Age': 28, 'Salary': 55000}\n]\n\nresult, ax = task_func('Age', data)"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Check if the data list is empty\n    if not data:\n        raise ValueError(\"Data list is empty\")\n    \n    # Convert the data list to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if the specified column is valid\n    if column not in df.columns:\n        raise KeyError(\"Invalid column\")\n    \n    # Check if the numeric values for steps, calories burned, and distance walked are non-negative\n    if column in ['steps', 'calories_burned', 'distance_walked']:\n        if (df[column] < 0).any():\n            raise ValueError(\"Numeric values for steps, calories burned, and distance walked must be non-negative\")\n    \n    # Calculate the sum, mean, min, and max of the column\n    column_stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    # Draw a line chart\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df[column], label=column)\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    ax.legend()\n    \n    return (column_stats, ax)\ndata = [\n    {'Date': '2022-01-01', 'steps': 10000, 'calories_burned': 500, 'distance_walked': 5},\n    {'Date': '2022-01-02', 'steps': 12000, 'calories_burned': 600, 'distance_walked': 6},\n    {'Date': '2022-01-03', 'steps': 11000, 'calories_burned': 550, 'distance_walked': 5.5}\n]\ncolumn = 'steps'", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    # Check if the data list is empty\n    if not data:\n        raise ValueError(\"Data list is empty\")\n    \n    # Convert the data list to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if the specified column is valid\n    if column not in df.columns:\n        raise KeyError(\"Invalid column\")\n    \n    # Check if the numeric values for steps, calories burned, and distance walked are non-negative\n    if column in ['steps', 'calories_burned', 'distance_walked']:\n        if (df[column] < 0).any():\n            raise ValueError(\"Numeric values for steps, calories burned, and distance walked must be non-negative\")\n    \n    # Calculate the sum, mean, min, and max of the column\n    column_stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    # Draw a line chart\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df[column], label=column)\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    ax.legend()\n    \n    return (column_stats, ax)\n\n# Example usage\ndata = [\n    {'Date': '2022-01-01', 'steps': 10000, 'calories_burned': 500, 'distance_walked': 5},\n    {'Date': '2022-01-02', 'steps': 12000, 'calories_burned': 600, 'distance_walked': 6},\n    {'Date': '2022-01-03', 'steps': 11000, 'calories_burned': 550, 'distance_walked': 5.5}\n]\n\ncolumn = 'steps'\nresult = task_func(column, data)"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    # Read the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize dictionaries to store means and medians\n    means = defaultdict(list)\n    medians = defaultdict(list)\n    \n    # Iterate over each dictionary in the list\n    for item in data:\n        for key, value in item.items():\n            # Check if the value is numeric and not None\n            if isinstance(value, (int, float)):\n                means[key].append(value)\n                medians[key].append(value)\n    \n    # Calculate mean and median for each key\n    mean_values = {key: np.mean(values) for key, values in means.items()}\n    median_values = {key: np.median(values) for key, values in medians.items()}\n    \n    # Create a DataFrame from the results\n    df = pd.DataFrame({'mean': mean_values, 'median': median_values})\n    \n    # Sort the DataFrame by the index (variable names)\n    df = df.sort_index()\n    \n    return df", "raw_solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\ndef task_func(input_file=\"data.json\"):\n    # Read the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize dictionaries to store means and medians\n    means = defaultdict(list)\n    medians = defaultdict(list)\n    \n    # Iterate over each dictionary in the list\n    for item in data:\n        for key, value in item.items():\n            # Check if the value is numeric and not None\n            if isinstance(value, (int, float)):\n                means[key].append(value)\n                medians[key].append(value)\n    \n    # Calculate mean and median for each key\n    mean_values = {key: np.mean(values) for key, values in means.items()}\n    median_values = {key: np.median(values) for key, values in medians.items()}\n    \n    # Create a DataFrame from the results\n    df = pd.DataFrame({'mean': mean_values, 'median': median_values})\n    \n    # Sort the DataFrame by the index (variable names)\n    df = df.sort_index()\n    \n    return df\n\n# Example usage\n# Assuming 'data.json' is in the same directory as the script\n# result = task_func()\n# print(result)\n\n```"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Check if the file is a CSV file\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"The file must be a CSV file.\")\n\n    # Read the CSV file and store the rows in a list\n    with open(file_path, mode='r', newline='', encoding='utf-8') as file:\n        reader = csv.reader(file)\n        rows = [row for row in reader]\n\n    # Count the occurrences of each row\n    row_counts = Counter(tuple(row) for row in rows)\n\n    # Filter out the rows that occur more than once\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert the duplicates to a pandas DataFrame\n    df = pd.DataFrame(list(duplicates.keys()), columns=[f'Column {i+1}' for i in range(len(rows[0]))])\n\n    # Plot the bar chart of duplicate rows\n    fig, ax = plt.subplots()\n    ax.bar(duplicates.keys(), duplicates.values())\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates, ax\nfile_path = 'path_to_your_csv_file.csv'", "raw_solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(file_path):\n    # Check if the file is a CSV file\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"The file must be a CSV file.\")\n\n    # Read the CSV file and store the rows in a list\n    with open(file_path, mode='r', newline='', encoding='utf-8') as file:\n        reader = csv.reader(file)\n        rows = [row for row in reader]\n\n    # Count the occurrences of each row\n    row_counts = Counter(tuple(row) for row in rows)\n\n    # Filter out the rows that occur more than once\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert the duplicates to a pandas DataFrame\n    df = pd.DataFrame(list(duplicates.keys()), columns=[f'Column {i+1}' for i in range(len(rows[0]))])\n\n    # Plot the bar chart of duplicate rows\n    fig, ax = plt.subplots()\n    ax.bar(duplicates.keys(), duplicates.values())\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates, ax\n\n# Example usage\nfile_path = 'path_to_your_csv_file.csv'\nduplicates, ax = task_func(file_path)"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    df['age'] = df['age'].apply(np.floor).astype(int)\n    \n    duplicates = df[df.duplicated('name', keep=False)]\n    \n    if duplicates.empty:\n        return Counter(), None\n    \n    age_distribution = Counter(duplicates['age'])\n    \n    plt.figure(figsize=(10, 6))\n    sns.histplot(duplicates['age'], bins=np.arange(age_distribution.keys().min() - 0.5, age_distribution.keys().max() + 1.5, 1), kde=False)\n    plt.xlabel('Age')\n    plt.ylabel('Count')\n    plt.title('Age Distribution among Duplicate Names')\n    \n    return age_distribution, plt.gca()\ndata = {\n    'name': ['Alice', 'Bob', 'Charlie', 'Alice', 'Bob', 'Alice'],\n    'age': [25.5, 30.2, 35.7, 25.5, 30.2, 25.5]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    df['age'] = df['age'].apply(np.floor).astype(int)\n    \n    duplicates = df[df.duplicated('name', keep=False)]\n    \n    if duplicates.empty:\n        return Counter(), None\n    \n    age_distribution = Counter(duplicates['age'])\n    \n    plt.figure(figsize=(10, 6))\n    sns.histplot(duplicates['age'], bins=np.arange(age_distribution.keys().min() - 0.5, age_distribution.keys().max() + 1.5, 1), kde=False)\n    plt.xlabel('Age')\n    plt.ylabel('Count')\n    plt.title('Age Distribution among Duplicate Names')\n    \n    return age_distribution, plt.gca()\n\n# Example usage:\ndata = {\n    'name': ['Alice', 'Bob', 'Charlie', 'Alice', 'Bob', 'Alice'],\n    'age': [25.5, 30.2, 35.7, 25.5, 30.2, 25.5]\n}\ndf = pd.DataFrame(data)\nage_distribution, plot = task_func(df)"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df, bins=4):\n    # Count duplicates in the 'value' column\n    duplicates = df['value'].value_counts()\n    duplicates = duplicates[duplicates > 1]\n    \n    # Create a Counter object for the duplicates\n    duplicate_counter = Counter(duplicates)\n    \n    # Plot histogram of the 'value' column\n    fig, ax = plt.subplots()\n    ax.hist(df['value'], bins=bins, color='green', alpha=0.6)\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(df['value'])\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set plot title and labels\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Return the Counter object and the Axes object\n    return duplicate_counter, ax\ndata = {'value': [1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 9, 10, 10, 10, 10]}\ndf = pd.DataFrame(data)", "raw_solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\ndef task_func(df, bins=4):\n    # Count duplicates in the 'value' column\n    duplicates = df['value'].value_counts()\n    duplicates = duplicates[duplicates > 1]\n    \n    # Create a Counter object for the duplicates\n    duplicate_counter = Counter(duplicates)\n    \n    # Plot histogram of the 'value' column\n    fig, ax = plt.subplots()\n    ax.hist(df['value'], bins=bins, color='green', alpha=0.6)\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(df['value'])\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set plot title and labels\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Return the Counter object and the Axes object\n    return duplicate_counter, ax\n\n# Example usage\nimport pandas as pd\ndata = {'value': [1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 9, 10, 10, 10, 10]}\ndf = pd.DataFrame(data)\nduplicate_counter, ax = task_func(df)\n\n# Print the Counter object"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    \"\"\"\n    Generate a pandas DataFrame with random values based on lists 'a' and 'b', and plot it as a bar chart.\n    List 'a' sets the DataFrame's row indices, while the length of list 'b' determines the number of columns using predefined names from the 'COLUMNS' list.\n    Data Structure: Uses pandas DataFrame to structure the data.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the plotted bar chart.\n    \"\"\"\n    # Create a DataFrame with random values\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=COLUMNS[:len(b)])\n    \n    # Plot the DataFrame as a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n    \n    # Set the title and labels\n    ax.set_title('Random Values Bar Chart')\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Random Values')\n    \n    # Return the Axes object\n    return ax\na = ['row1', 'row2', 'row3']\nb = [1, 2, 3, 4, 5]", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\ndef task_func(a, b):\n    \"\"\"\n    Generate a pandas DataFrame with random values based on lists 'a' and 'b', and plot it as a bar chart.\n    List 'a' sets the DataFrame's row indices, while the length of list 'b' determines the number of columns using predefined names from the 'COLUMNS' list.\n    Data Structure: Uses pandas DataFrame to structure the data.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the plotted bar chart.\n    \"\"\"\n    # Create a DataFrame with random values\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=COLUMNS[:len(b)])\n    \n    # Plot the DataFrame as a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n    \n    # Set the title and labels\n    ax.set_title('Random Values Bar Chart')\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Random Values')\n    \n    # Return the Axes object\n    return ax\n\n# Example usage\na = ['row1', 'row2', 'row3']\nb = [1, 2, 3, 4, 5]\nax = task_func(a, b)\n\n# Show the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Convert the 'month' column to datetime format\n    df['month'] = pd.to_datetime(df['month'], format='%B')\n    \n    # Set the 'month' column as the index\n    df.set_index('month', inplace=True)\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df['value'])\n    \n    # Format the plot\n    ax.set_title(f'Monthly Data for {df.index.year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax\ndata = {\n    'month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    'value': [10, 15, 7, 12, 9, 14, 11, 16, 8, 13, 10, 15]\n}", "raw_solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef task_func(data):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Convert the 'month' column to datetime format\n    df['month'] = pd.to_datetime(df['month'], format='%B')\n    \n    # Set the 'month' column as the index\n    df.set_index('month', inplace=True)\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df['value'])\n    \n    # Format the plot\n    ax.set_title(f'Monthly Data for {df.index.year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax\n\n# Example usage\ndata = {\n    'month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    'value': [10, 15, 7, 12, 9, 14, 11, 16, 8, 13, 10, 15]\n}\n\nax = task_func(data)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert the input string to a list of integers\n    data_list = [int(x) for x in data.split()]\n    \n    # Create a pandas DataFrame from the list\n    df = pd.DataFrame(data_list, columns=['Value'])\n    \n    # Calculate the frequency distribution\n    value_counts = df['Value'].value_counts().sort_index()\n    \n    # Create a histogram using matplotlib\n    fig, ax = plt.subplots()\n    ax.bar(value_counts.index, value_counts.values, width=1, align='center', edgecolor='black')\n    \n    # Set the title and labels\n    ax.set_title('Histogram of Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Set the x-axis limits\n    ax.set_xlim(value_counts.index.min() - 0.5, value_counts.index.max() + 0.5)\n    \n    # Return the Axes object\n    return ax\ndata = \"1 2 2 3 3 3 4 4 4 4\"", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    # Convert the input string to a list of integers\n    data_list = [int(x) for x in data.split()]\n    \n    # Create a pandas DataFrame from the list\n    df = pd.DataFrame(data_list, columns=['Value'])\n    \n    # Calculate the frequency distribution\n    value_counts = df['Value'].value_counts().sort_index()\n    \n    # Create a histogram using matplotlib\n    fig, ax = plt.subplots()\n    ax.bar(value_counts.index, value_counts.values, width=1, align='center', edgecolor='black')\n    \n    # Set the title and labels\n    ax.set_title('Histogram of Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Set the x-axis limits\n    ax.set_xlim(value_counts.index.min() - 0.5, value_counts.index.max() + 0.5)\n    \n    # Return the Axes object\n    return ax\n\n# Example usage\ndata = \"1 2 2 3 3 3 4 4 4 4\"\nax = task_func(data)\n\n# Display the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate a noisy sine wave\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n\n    # Define the sine function to fit\n    def sine_func(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n\n    # Initial guess for the parameters\n    p0 = [1, 1, 0, 0]\n\n    # Perform curve fitting\n    popt, pcov = curve_fit(sine_func, x, y, p0)\n\n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='Noisy data')\n    ax.plot(x, sine_func(x, *popt), 'r-', label='Fitted curve')\n\n    # Add labels and legend\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n\n    return ax", "raw_solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate a noisy sine wave\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n\n    # Define the sine function to fit\n    def sine_func(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n\n    # Initial guess for the parameters\n    p0 = [1, 1, 0, 0]\n\n    # Perform curve fitting\n    popt, pcov = curve_fit(sine_func, x, y, p0)\n\n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='Noisy data')\n    ax.plot(x, sine_func(x, *popt), 'r-', label='Fitted curve')\n\n    # Add labels and legend\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n\n    return ax\n\n# Example usage\nax = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join([row[0] for row in reader])\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The CSV file cannot be found at the specified path.\")\n    except IOError:\n        raise IOError(\"An error occurred while reading the file.\")\n\n    normalized_text = unicodedata.normalize('NFD', text).encode('ascii', 'ignore').decode('utf-8')\n    words = normalized_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    fig, ax = plt.subplots()\n    ax.bar([word for word, _ in most_common_words], [count for _, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('10 Most Common Words')\n\n    return ax, most_common_words\ncsv_file = 'example.csv'", "raw_solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join([row[0] for row in reader])\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The CSV file cannot be found at the specified path.\")\n    except IOError:\n        raise IOError(\"An error occurred while reading the file.\")\n\n    normalized_text = unicodedata.normalize('NFD', text).encode('ascii', 'ignore').decode('utf-8')\n    words = normalized_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    fig, ax = plt.subplots()\n    ax.bar([word for word, _ in most_common_words], [count for _, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('10 Most Common Words')\n\n    return ax, most_common_words\n\n# Example usage\ncsv_file = 'example.csv'\nax, most_common_words = task_func(csv_file)\nplt.show()"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.randn(size)\n    \n    # Create a figure object\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    \n    # Plot the probability density function\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, 0, 1)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set the title and labels\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    \n    # Return the figure object\n    return fig", "raw_solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.randn(size)\n    \n    # Create a figure object\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    \n    # Plot the probability density function\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, 0, 1)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set the title and labels\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    \n    # Return the figure object\n    return fig\n\n# Example usage\nfig = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    public_key, private_key = rsa.newkeys(2048)\n    \n    # Generate a random password and nonce\n    password = get_random_bytes(16)\n    nonce = get_random_bytes(16)\n    \n    # Encrypt the private key using AES\n    cipher = AES.new(password, AES.MODE_GCM, nonce)\n    encrypted_private_key = cipher.encrypt(private_key.save_pkcs1())\n    \n    # Generate a filename for the encrypted private key\n    filename = f\"private_key_{os.urandom(8).hex()}.txt\"\n    \n    # Save the encrypted private key to a file\n    with open(filename, 'wb') as f:\n        f.write(b64encode(encrypted_private_key))\n    \n    # Return the public key, filename, password, and nonce\n    return public_key, filename, password, nonce", "raw_solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    # Generate RSA key pair\n    public_key, private_key = rsa.newkeys(2048)\n    \n    # Generate a random password and nonce\n    password = get_random_bytes(16)\n    nonce = get_random_bytes(16)\n    \n    # Encrypt the private key using AES\n    cipher = AES.new(password, AES.MODE_GCM, nonce)\n    encrypted_private_key = cipher.encrypt(private_key.save_pkcs1())\n    \n    # Generate a filename for the encrypted private key\n    filename = f\"private_key_{os.urandom(8).hex()}.txt\"\n    \n    # Save the encrypted private key to a file\n    with open(filename, 'wb') as f:\n        f.write(b64encode(encrypted_private_key))\n    \n    # Return the public key, filename, password, and nonce\n    return public_key, filename, password, nonce\n\n# Test the function\npublic_key, filename, password, nonce = task_func()"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n    \n    # Encrypt the file using AES encryption\n    aes_key = os.urandom(32)  # AES-256 key\n    iv = os.urandom(16)  # AES block size\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    encrypted_file_data = encryptor.update(file_data) + encryptor.finalize()\n    \n    # Encrypt the AES key with the public RSA key\n    encrypted_aes_key = rsa.encrypt(aes_key, public_key)\n    \n    # Save the encrypted file and the encrypted AES key in separate new files\n    encrypted_file_path = file_path + '.enc'\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(encrypted_file_data)\n    \n    encrypted_aes_key_path = file_path + '.aes.enc'\n    with open(encrypted_aes_key_path, 'wb') as f:\n        f.write(encrypted_aes_key)\n    \n    return public_key, encrypted_file_path, encrypted_aes_key_path\nfile_path = 'example.txt'", "raw_solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n    \n    # Encrypt the file using AES encryption\n    aes_key = os.urandom(32)  # AES-256 key\n    iv = os.urandom(16)  # AES block size\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    encrypted_file_data = encryptor.update(file_data) + encryptor.finalize()\n    \n    # Encrypt the AES key with the public RSA key\n    encrypted_aes_key = rsa.encrypt(aes_key, public_key)\n    \n    # Save the encrypted file and the encrypted AES key in separate new files\n    encrypted_file_path = file_path + '.enc'\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(encrypted_file_data)\n    \n    encrypted_aes_key_path = file_path + '.aes.enc'\n    with open(encrypted_aes_key_path, 'wb') as f:\n        f.write(encrypted_aes_key)\n    \n    return public_key, encrypted_file_path, encrypted_aes_key_path\n\n# Example usage\nfile_path = 'example.txt'\npublic_key, encrypted_file_path, encrypted_aes_key_path = task_func(file_path)"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    if not url:\n        raise ValueError(\"URL is empty\")\n    try:\n        response = urllib.request.urlopen(url)\n        html = response.read()\n        doc = pq(html)\n        anchor_tags = doc('a')\n        data = []\n        for tag in anchor_tags:\n            text = pq(tag).text()\n            href = pq(tag).attr('href')\n            data.append({'text': text, 'href': href})\n        df = pd.DataFrame(data)\n        df['fetch_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        return df\n    except ValueError as e:\n        raise ValueError(\"Invalid URL\") from e\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(\"Network error or server issue\") from e", "raw_solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    if not url:\n        raise ValueError(\"URL is empty\")\n    try:\n        response = urllib.request.urlopen(url)\n        html = response.read()\n        doc = pq(html)\n        anchor_tags = doc('a')\n        data = []\n        for tag in anchor_tags:\n            text = pq(tag).text()\n            href = pq(tag).attr('href')\n            data.append({'text': text, 'href': href})\n        df = pd.DataFrame(data)\n        df['fetch_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        return df\n    except ValueError as e:\n        raise ValueError(\"Invalid URL\") from e\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(\"Network error or server issue\") from e\n\n```"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Define the output file path\n    output_file = os.path.join(output_dir, 'sensor_data.csv')\n\n    # Open the CSV file for writing\n    with open(output_file, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        # Write the header row\n        writer.writerow(['Time'] + SENSORS)\n\n        # Generate and write data for the specified number of hours\n        for i in range(hours):\n            # Generate random sensor data\n            sensor_data = [randint(20, 30) for _ in range(len(SENSORS))]\n            # Get the current time\n            current_time = datetime.now() + timedelta(hours=i)\n            # Write the data row\n            writer.writerow([current_time] + sensor_data)\n\n    # Return the number of hours processed\n    return hours\nhours = 24", "raw_solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Define the output file path\n    output_file = os.path.join(output_dir, 'sensor_data.csv')\n\n    # Open the CSV file for writing\n    with open(output_file, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        # Write the header row\n        writer.writerow(['Time'] + SENSORS)\n\n        # Generate and write data for the specified number of hours\n        for i in range(hours):\n            # Generate random sensor data\n            sensor_data = [randint(20, 30) for _ in range(len(SENSORS))]\n            # Get the current time\n            current_time = datetime.now() + timedelta(hours=i)\n            # Write the data row\n            writer.writerow([current_time] + sensor_data)\n\n    # Return the number of hours processed\n    return hours\n\n# Example usage\nhours = 24\nresult = task_func(hours)"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate traffic data\n    data = []\n    for i in range(hours):\n        time = datetime.now() + timedelta(hours=i)\n        vehicle_counts = {vehicle: randint(10, 100) for vehicle in VEHICLE_TYPES}\n        data.append([time, *vehicle_counts.values()])\n\n    # Save data to CSV\n    csv_file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(csv_file_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + VEHICLE_TYPES)\n        writer.writerows(data)\n\n    # Plot the data\n    df = pd.read_csv(csv_file_path)\n    df['Time'] = pd.to_datetime(df['Time'])\n    df.set_index('Time', inplace=True)\n    ax = df.plot(kind='line', marker='o')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n\n    return csv_file_path, ax", "raw_solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate traffic data\n    data = []\n    for i in range(hours):\n        time = datetime.now() + timedelta(hours=i)\n        vehicle_counts = {vehicle: randint(10, 100) for vehicle in VEHICLE_TYPES}\n        data.append([time, *vehicle_counts.values()])\n\n    # Save data to CSV\n    csv_file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(csv_file_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + VEHICLE_TYPES)\n        writer.writerows(data)\n\n    # Plot the data\n    df = pd.read_csv(csv_file_path)\n    df['Time'] = pd.to_datetime(df['Time'])\n    df.set_index('Time', inplace=True)\n    ax = df.plot(kind='line', marker='o')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n\n    return csv_file_path, ax\n\n# Example usage\ncsv_file_path, ax = task_func(24)"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        current_time = datetime.now() + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append({'Time': current_time.strftime('%Y-%m-%d %H:%M:%S'), 'Condition': condition})\n\n    # Save the data to a CSV file\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(csv_file_path, mode='w', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=['Time', 'Condition'])\n        writer.writeheader()\n        writer.writerows(weather_data)\n\n    # Backup the file\n    backup_dir = './backup'\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file_path = os.path.join(backup_dir, 'weather_data_backup.csv')\n    shutil.copy(csv_file_path, backup_file_path)\n\n    return csv_file_path\nhours = 24", "raw_solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        current_time = datetime.now() + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append({'Time': current_time.strftime('%Y-%m-%d %H:%M:%S'), 'Condition': condition})\n\n    # Save the data to a CSV file\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(csv_file_path, mode='w', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=['Time', 'Condition'])\n        writer.writeheader()\n        writer.writerows(weather_data)\n\n    # Backup the file\n    backup_dir = './backup'\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file_path = os.path.join(backup_dir, 'weather_data_backup.csv')\n    shutil.copy(csv_file_path, backup_file_path)\n\n    return csv_file_path\n\n# Example usage\nhours = 24\noutput_path = task_func(hours)"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties):\n    # Generate random data for each team\n    data = {\n        'Team': TEAMS,\n        'Goals': [randint(0, goals) for _ in TEAMS],\n        'Penalty Cost': [randint(0, penalties) for _ in TEAMS]\n    }\n    \n    # Convert penalty costs to fines\n    data['Fine'] = data['Penalty Cost'] * PENALTY_COST\n    \n    # Create a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create plots\n    fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n    \n    # Plot goals\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0])\n    axes[0].set_title('Goals per Team')\n    \n    # Plot fines\n    sns.barplot(x='Team', y='Fine', data=df, ax=axes[1])\n    axes[1].set_title('Fines per Team')\n    \n    # Return the DataFrame and list of plots\n    return df, [axes[0], axes[1]]", "raw_solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    # Generate random data for each team\n    data = {\n        'Team': TEAMS,\n        'Goals': [randint(0, goals) for _ in TEAMS],\n        'Penalty Cost': [randint(0, penalties) for _ in TEAMS]\n    }\n    \n    # Convert penalty costs to fines\n    data['Fine'] = data['Penalty Cost'] * PENALTY_COST\n    \n    # Create a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create plots\n    fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n    \n    # Plot goals\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0])\n    axes[0].set_title('Goals per Team')\n    \n    # Plot fines\n    sns.barplot(x='Team', y='Fine', data=df, ax=axes[1])\n    axes[1].set_title('Fines per Team')\n    \n    # Return the DataFrame and list of plots\n    return df, [axes[0], axes[1]]\n\n# Example usage\ndf, plots = task_func(10, 5)"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    # Create a DataFrame with random integer values between 0 and 9\n    data = {col: np.random.randint(0, 10, rows) for col in COLUMNS}\n    df = pd.DataFrame(data)\n    \n    # Count the non-zero values in each column\n    non_zero_counts = df.count() - df.eq(0).sum()\n    \n    # Create a bar plot to visualize the non-zero values\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Non-zero values')\n    ax.set_title('Non-zero values in each column')\n    \n    return df, ax\nrows = 10", "raw_solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\ndef task_func(rows):\n    # Create a DataFrame with random integer values between 0 and 9\n    data = {col: np.random.randint(0, 10, rows) for col in COLUMNS}\n    df = pd.DataFrame(data)\n    \n    # Count the non-zero values in each column\n    non_zero_counts = df.count() - df.eq(0).sum()\n    \n    # Create a bar plot to visualize the non-zero values\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Non-zero values')\n    ax.set_title('Non-zero values in each column')\n    \n    return df, ax\n\n# Example usage\nrows = 10\ndf, ax = task_func(rows)"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n    # Generate random grades for students in multiple courses\n    courses = ['Math', 'Science', 'History', 'English']\n    grades = {course: [np.random.randint(50, 100) for _ in range(num_students)] for course in courses}\n    df = pd.DataFrame(grades)\n    \n    # Calculate average grade in each course\n    avg_grades = df.mean()\n    \n    # Count the number of students with a passing grade (>= 60)\n    passing_counts = (df >= 60).sum()\n    \n    # Create a new DataFrame to store the results\n    result_df = pd.DataFrame({\n        'Average Grade': avg_grades,\n        'Passing Count': passing_counts\n    })\n    \n    # Visualize the information using a bar plot\n    fig, ax = plt.subplots()\n    result_df.plot(kind='bar', ax=ax)\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_xlabel('Course')\n    ax.set_ylabel('Values')\n    \n    return result_df, ax\nnum_students = 10", "raw_solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndef task_func(num_students):\n    # Generate random grades for students in multiple courses\n    courses = ['Math', 'Science', 'History', 'English']\n    grades = {course: [np.random.randint(50, 100) for _ in range(num_students)] for course in courses}\n    df = pd.DataFrame(grades)\n    \n    # Calculate average grade in each course\n    avg_grades = df.mean()\n    \n    # Count the number of students with a passing grade (>= 60)\n    passing_counts = (df >= 60).sum()\n    \n    # Create a new DataFrame to store the results\n    result_df = pd.DataFrame({\n        'Average Grade': avg_grades,\n        'Passing Count': passing_counts\n    })\n    \n    # Visualize the information using a bar plot\n    fig, ax = plt.subplots()\n    result_df.plot(kind='bar', ax=ax)\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_xlabel('Course')\n    ax.set_ylabel('Values')\n    \n    return result_df, ax\n\n# Example usage\nnum_students = 10\nresult_df, ax = task_func(num_students)"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Filter the array to include only rows where the first column matches the target value\n    filtered_array = array[array[:, 0] == target_value]\n    \n    # Extract the indices and the second column values for fitting\n    indices = filtered_array[:, 1]\n    values = filtered_array[:, 2]\n    \n    # Define the exponential decay function\n    def exponential_decay(x, a, b):\n        return a * np.exp(-b * x)\n    \n    # Perform the curve fitting\n    popt, _ = optimize.curve_fit(exponential_decay, indices, values)\n    \n    # Create a plot to visualize the fit\n    fig, ax = plt.subplots()\n    ax.scatter(indices, values, label='Data')\n    ax.plot(indices, exponential_decay(indices, *popt), 'r-', label='Fit')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    # Return the optimized parameters and the Axes object\n    return popt, ax\narray = np.array([[1, 0, 10], [1, 1, 5], [1, 2, 2], [2, 0, 15], [2, 1, 7], [2, 2, 3]])\ntarget_value = 1", "raw_solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\ndef task_func(array, target_value):\n    # Filter the array to include only rows where the first column matches the target value\n    filtered_array = array[array[:, 0] == target_value]\n    \n    # Extract the indices and the second column values for fitting\n    indices = filtered_array[:, 1]\n    values = filtered_array[:, 2]\n    \n    # Define the exponential decay function\n    def exponential_decay(x, a, b):\n        return a * np.exp(-b * x)\n    \n    # Perform the curve fitting\n    popt, _ = optimize.curve_fit(exponential_decay, indices, values)\n    \n    # Create a plot to visualize the fit\n    fig, ax = plt.subplots()\n    ax.scatter(indices, values, label='Data')\n    ax.plot(indices, exponential_decay(indices, *popt), 'r-', label='Fit')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    # Return the optimized parameters and the Axes object\n    return popt, ax\n\n# Example usage\narray = np.array([[1, 0, 10], [1, 1, 5], [1, 2, 2], [2, 0, 15], [2, 1, 7], [2, 2, 3]])\ntarget_value = 1\npopt, ax = task_func(array, target_value)"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts, num_topics):\n    \"\"\"\n    Extracts topics from a collection of text documents using Non-Negative Matrix Factorization (NMF).\n    \n    Parameters:\n    texts (list of str): A list of text documents.\n    num_topics (int): The number of topics to extract.\n    \n    Returns:\n    list of list of str: A list where each element is a list of words representing a topic.\n    \"\"\"\n    # Preprocess the input texts\n    processed_texts = []\n    for text in texts:\n        text = ALPHANUMERIC.sub(' ', text).lower()\n        words = text.split()\n        words = [word for word in words if word not in STOPWORDS]\n        processed_texts.append(' '.join(words))\n    \n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    X = vectorizer.fit_transform(processed_texts)\n    \n    # Apply NMF to extract the specified number of topics\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(X)\n    \n    # Extract the most significant words for each topic\n    topics = []\n    for i in range(num_topics):\n        topic_words = [vectorizer.get_feature_names_out()[j] for j in nmf.components_[i].argsort()[:-11:-1]]\n        topics.append(topic_words)\n    \n    return topics\ntexts = [\n    \"Python is a great programming language\",\n    \"Machine learning is a subset of artificial intelligence\",\n    \"Artificial intelligence is the simulation of human intelligence in machines\",\n    \"Deep learning is a subset of machine learning\",\n    \"Natural language processing is a field of artificial intelligence\"\n]\nnum_topics = 2", "raw_solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Extracts topics from a collection of text documents using Non-Negative Matrix Factorization (NMF).\n    \n    Parameters:\n    texts (list of str): A list of text documents.\n    num_topics (int): The number of topics to extract.\n    \n    Returns:\n    list of list of str: A list where each element is a list of words representing a topic.\n    \"\"\"\n    # Preprocess the input texts\n    processed_texts = []\n    for text in texts:\n        text = ALPHANUMERIC.sub(' ', text).lower()\n        words = text.split()\n        words = [word for word in words if word not in STOPWORDS]\n        processed_texts.append(' '.join(words))\n    \n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    X = vectorizer.fit_transform(processed_texts)\n    \n    # Apply NMF to extract the specified number of topics\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(X)\n    \n    # Extract the most significant words for each topic\n    topics = []\n    for i in range(num_topics):\n        topic_words = [vectorizer.get_feature_names_out()[j] for j in nmf.components_[i].argsort()[:-11:-1]]\n        topics.append(topic_words)\n    \n    return topics\n\n# Example usage\ntexts = [\n    \"Python is a great programming language\",\n    \"Machine learning is a subset of artificial intelligence\",\n    \"Artificial intelligence is the simulation of human intelligence in machines\",\n    \"Deep learning is a subset of machine learning\",\n    \"Natural language processing is a field of artificial intelligence\"\n]\nnum_topics = 2\ntopics = task_func(texts, num_topics)"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    # Download stopwords if not already downloaded\n    if stopwords is None:\n        nltk.download('stopwords')\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n    \n    # Clean and tokenize texts\n    cleaned_texts = []\n    for text in texts:\n        # Remove non-alphanumeric characters except space\n        cleaned_text = ALPHANUMERIC.sub(' ', text)\n        # Convert to lowercase\n        cleaned_text = cleaned_text.lower()\n        # Tokenize and remove stopwords\n        tokens = [word for word in cleaned_text.split() if word not in stopwords]\n        cleaned_texts.append(tokens)\n    \n    # Train Word2Vec model\n    word2vec_model = Word2Vec(cleaned_texts, vector_size=100, window=5, min_count=1, workers=4)\n    \n    return word2vec_model\ntexts = [\n    \"Hello, how are you?\",\n    \"I am fine, thank you!\",\n    \"What about you?\"\n]", "raw_solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(texts, stopwords=None):\n    # Download stopwords if not already downloaded\n    if stopwords is None:\n        nltk.download('stopwords')\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n    \n    # Clean and tokenize texts\n    cleaned_texts = []\n    for text in texts:\n        # Remove non-alphanumeric characters except space\n        cleaned_text = ALPHANUMERIC.sub(' ', text)\n        # Convert to lowercase\n        cleaned_text = cleaned_text.lower()\n        # Tokenize and remove stopwords\n        tokens = [word for word in cleaned_text.split() if word not in stopwords]\n        cleaned_texts.append(tokens)\n    \n    # Train Word2Vec model\n    word2vec_model = Word2Vec(cleaned_texts, vector_size=100, window=5, min_count=1, workers=4)\n    \n    return word2vec_model\n\n# Example usage\ntexts = [\n    \"Hello, how are you?\",\n    \"I am fine, thank you!\",\n    \"What about you?\"\n]\n\nword2vec_model = task_func(texts)"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    # Create a list to store DataFrames\n    dfs = []\n    \n    # Create a \"processed\" subdirectory if it doesn't exist\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n    \n    # List all JSON files in the directory\n    json_files = [f for f in os.listdir(path) if f.endswith('.json')]\n    \n    # Process each JSON file\n    for file in json_files:\n        file_path = os.path.join(path, file)\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        \n        # Create a DataFrame from the JSON data\n        df = pd.DataFrame(data)\n        \n        # Add a \"Source\" column with the filename\n        df['Source'] = file\n        \n        # Append the DataFrame to the list\n        dfs.append(df)\n    \n    # Concatenate all DataFrames into a single DataFrame\n    df = pd.concat(dfs, ignore_index=True)\n    \n    # Move all processed files to the \"processed\" subdirectory\n    for file in json_files:\n        shutil.move(os.path.join(path, file), os.path.join(processed_path, file))\n    \n    return df\npath = 'your_directory_path_here'", "raw_solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    # Create a list to store DataFrames\n    dfs = []\n    \n    # Create a \"processed\" subdirectory if it doesn't exist\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n    \n    # List all JSON files in the directory\n    json_files = [f for f in os.listdir(path) if f.endswith('.json')]\n    \n    # Process each JSON file\n    for file in json_files:\n        file_path = os.path.join(path, file)\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        \n        # Create a DataFrame from the JSON data\n        df = pd.DataFrame(data)\n        \n        # Add a \"Source\" column with the filename\n        df['Source'] = file\n        \n        # Append the DataFrame to the list\n        dfs.append(df)\n    \n    # Concatenate all DataFrames into a single DataFrame\n    df = pd.concat(dfs, ignore_index=True)\n    \n    # Move all processed files to the \"processed\" subdirectory\n    for file in json_files:\n        shutil.move(os.path.join(path, file), os.path.join(processed_path, file))\n    \n    return df\n\n# Example usage\npath = 'your_directory_path_here'\nresult_df = task_func(path)"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    # Define the path to the CSV file\n    file_path = \"task_func_data/Output.txt\"\n    \n    # Create the directory if it doesn't exist\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    \n    # Open the CSV file in append mode\n    with open(file_path, mode='a', newline='') as file:\n        writer = csv.writer(file)\n        \n        # Write the header if the file is empty\n        if file.tell() == 0:\n            writer.writerow(['Timestamp', 'Temperature', 'Humidity'])\n        \n        # Generate random data and write to the file\n        for _ in range(5):  # Example: write 5 rows of data\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            temperature = random.uniform(20.0, 30.0)\n            humidity = random.uniform(30.0, 70.0)\n            writer.writerow([timestamp, temperature, humidity])\n    \n    # Return the path to the CSV file\n    return file_path", "raw_solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    # Define the path to the CSV file\n    file_path = \"task_func_data/Output.txt\"\n    \n    # Create the directory if it doesn't exist\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    \n    # Open the CSV file in append mode\n    with open(file_path, mode='a', newline='') as file:\n        writer = csv.writer(file)\n        \n        # Write the header if the file is empty\n        if file.tell() == 0:\n            writer.writerow(['Timestamp', 'Temperature', 'Humidity'])\n        \n        # Generate random data and write to the file\n        for _ in range(5):  # Example: write 5 rows of data\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            temperature = random.uniform(20.0, 30.0)\n            humidity = random.uniform(30.0, 70.0)\n            writer.writerow([timestamp, temperature, humidity])\n    \n    # Return the path to the CSV file\n    return file_path\n\n# Example usage\nfile_path = task_func()"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    # Send a request to the URL\n    response = urllib.request.urlopen(url)\n    html = response.read()\n    \n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(html, 'html.parser')\n    \n    # Find all the data you want to scrape\n    # For example, let's assume we want to scrape all the <a> tags\n    data = []\n    for link in soup.find_all('a'):\n        data.append(link.get('href'))\n    \n    # Write the scraped data to a CSV file\n    with open(CSV_FILE_PATH, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['URL'])\n        for item in data:\n            writer.writerow([item])\n    \n    # Return the path of the CSV file\n    return CSV_FILE_PATH\nurl = 'https://example.com'", "raw_solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    # Send a request to the URL\n    response = urllib.request.urlopen(url)\n    html = response.read()\n    \n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(html, 'html.parser')\n    \n    # Find all the data you want to scrape\n    # For example, let's assume we want to scrape all the <a> tags\n    data = []\n    for link in soup.find_all('a'):\n        data.append(link.get('href'))\n    \n    # Write the scraped data to a CSV file\n    with open(CSV_FILE_PATH, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['URL'])\n        for item in data:\n            writer.writerow([item])\n    \n    # Return the path of the CSV file\n    return CSV_FILE_PATH\n\n# Example usage\nurl = 'https://example.com'\ncsv_file_path = task_func(url)"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    # Check if data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a DataFrame\")\n    \n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"Data cannot be empty\")\n    \n    # Check if target_column is a column of data\n    if target_column not in data.columns:\n        raise ValueError(\"Target column must be a column of data\")\n    \n    # Check if data contains values that are not numeric\n    if not all(data.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise ValueError(\"Data must contain only numeric values\")\n    \n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state must be an integer\")\n    \n    # Check if test_size is between 0 and 1\n    if not 0 < test_size < 1:\n        raise ValueError(\"Test size must be between 0 and 1\")\n    \n    # Split data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data.drop(target_column, axis=1), data[target_column], test_size=test_size, random_state=random_state)\n    \n    # Train linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Return model score of the test set\n    return model.score(X_test, y_test)\nrng = np.random.default_rng(9)\ndata = pd.DataFrame({'x1': rng.random(500)})", "raw_solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    # Check if data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a DataFrame\")\n    \n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"Data cannot be empty\")\n    \n    # Check if target_column is a column of data\n    if target_column not in data.columns:\n        raise ValueError(\"Target column must be a column of data\")\n    \n    # Check if data contains values that are not numeric\n    if not all(data.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise ValueError(\"Data must contain only numeric values\")\n    \n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state must be an integer\")\n    \n    # Check if test_size is between 0 and 1\n    if not 0 < test_size < 1:\n        raise ValueError(\"Test size must be between 0 and 1\")\n    \n    # Split data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data.drop(target_column, axis=1), data[target_column], test_size=test_size, random_state=random_state)\n    \n    # Train linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Return model score of the test set\n    return model.score(X_test, y_test)\n\n# Test the function with provided data\nrng = np.random.default_rng(9)\ndata = pd.DataFrame({'x1': rng.random(500)})\ndata['y'] = data['x1'] * 2 + 1\nresult = task_func(data, 'y', random_state=9, test_size=0.1)"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    names = latin_names + other_names\n    df = pd.DataFrame(columns=['ID', 'Name', 'Date of Birth', 'Email'])\n    \n    for i in range(1, 101):\n        name = np.random.choice(names)\n        year = np.random.randint(start_year, end_year + 1)\n        month = np.random.randint(1, 13)\n        day = np.random.randint(1, 28)\n        date_of_birth = datetime.datetime(year, month, day)\n        email = re.sub(r'[^a-zA-Z0-9]', '', name.lower()) + str(year) + '@' + email_domain\n        df = df.append({'ID': i, 'Name': name, 'Date of Birth': date_of_birth, 'Email': email}, ignore_index=True)\n    \n    return df", "raw_solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    names = latin_names + other_names\n    df = pd.DataFrame(columns=['ID', 'Name', 'Date of Birth', 'Email'])\n    \n    for i in range(1, 101):\n        name = np.random.choice(names)\n        year = np.random.randint(start_year, end_year + 1)\n        month = np.random.randint(1, 13)\n        day = np.random.randint(1, 28)\n        date_of_birth = datetime.datetime(year, month, day)\n        email = re.sub(r'[^a-zA-Z0-9]', '', name.lower()) + str(year) + '@' + email_domain\n        df = df.append({'ID': i, 'Name': name, 'Date of Birth': date_of_birth, 'Email': email}, ignore_index=True)\n    \n    return df\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    # Read the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize a dictionary to store the mean and median for each key\n    results = defaultdict(dict)\n    \n    # Iterate over each key in the first dictionary to calculate mean and median\n    for key in data[0].keys():\n        values = [item[key] for item in data]\n        mean = np.mean(values)\n        median = np.median(values)\n        results[key]['mean'] = mean\n        results[key]['median'] = median\n    \n    # Write the results to a CSV file\n    with open(output_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for key, values in results.items():\n            writer.writerow([key, values['mean'], values['median']])\n    \n    return results\ninput_file = 'input.json'\noutput_file = 'output.csv'", "raw_solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    # Read the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize a dictionary to store the mean and median for each key\n    results = defaultdict(dict)\n    \n    # Iterate over each key in the first dictionary to calculate mean and median\n    for key in data[0].keys():\n        values = [item[key] for item in data]\n        mean = np.mean(values)\n        median = np.median(values)\n        results[key]['mean'] = mean\n        results[key]['median'] = median\n    \n    # Write the results to a CSV file\n    with open(output_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for key, values in results.items():\n            writer.writerow([key, values['mean'], values['median']])\n    \n    return results\n\n# Example usage\ninput_file = 'input.json'\noutput_file = 'output.csv'\ntask_func(input_file, output_file)\n\n```"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content:\n            target_path = Path(target_dir) / Path(file_path).name\n            shutil.copy(file_path, target_path)\n            copied_files.append(str(target_path))\n    return copied_files\nkwargs = {\n    \"/path/to/file1.txt\": \"content1\",\n    \"/path/to/file2.txt\": \"\",\n    \"/path/to/file3.txt\": \"content3\"\n}", "raw_solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content:\n            target_path = Path(target_dir) / Path(file_path).name\n            shutil.copy(file_path, target_path)\n            copied_files.append(str(target_path))\n    return copied_files\n\n# Example usage:\nkwargs = {\n    \"/path/to/file1.txt\": \"content1\",\n    \"/path/to/file2.txt\": \"\",\n    \"/path/to/file3.txt\": \"content3\"\n}"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            new_filename = re.sub(pattern, r'\\1.csv', filename)\n            new_file_path = Path(directory) / new_filename\n            old_file_path = Path(directory) / filename\n            with open(old_file_path, 'r') as old_file, open(new_file_path, 'w', newline='') as new_file:\n                reader = csv.reader(old_file)\n                writer = csv.writer(new_file)\n                for row in reader:\n                    writer.writerow(row)\n            new_files.append(new_filename)\n    return new_files", "raw_solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            new_filename = re.sub(pattern, r'\\1.csv', filename)\n            new_file_path = Path(directory) / new_filename\n            old_file_path = Path(directory) / filename\n            with open(old_file_path, 'r') as old_file, open(new_file_path, 'w', newline='') as new_file:\n                reader = csv.reader(old_file)\n                writer = csv.writer(new_file)\n                for row in reader:\n                    writer.writerow(row)\n            new_files.append(new_filename)\n    return new_files\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            extract_dir = os.path.join(directory, prefix)\n            if not os.path.exists(extract_dir):\n                os.makedirs(extract_dir)\n            with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            extracted_dirs.append(extract_dir)\n    return extracted_dirs\ndirectory = '/path/to/your/directory'", "raw_solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            extract_dir = os.path.join(directory, prefix)\n            if not os.path.exists(extract_dir):\n                os.makedirs(extract_dir)\n            with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            extracted_dirs.append(extract_dir)\n    return extracted_dirs\n\n# Example usage\ndirectory = '/path/to/your/directory'\nextracted_dirs = task_func(directory)"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    \n    # Find all files that match the pattern\n    files = glob.glob(pattern)\n    \n    # Create an archive file path\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    \n    # Archive the files\n    subprocess.run(['tar', '-czf', archive_file] + files)\n    \n    # Delete the original files\n    for file in files:\n        os.remove(file)\n    \n    # Return the archive file path\n    return archive_file\npattern = '/path/to/your/files/*.txt'", "raw_solution": "import subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    \n    # Find all files that match the pattern\n    files = glob.glob(pattern)\n    \n    # Create an archive file path\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    \n    # Archive the files\n    subprocess.run(['tar', '-czf', archive_file] + files)\n    \n    # Delete the original files\n    for file in files:\n        os.remove(file)\n    \n    # Return the archive file path\n    return archive_file\n\n# Example usage\npattern = '/path/to/your/files/*.txt'\narchive_path = task_func(pattern)"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\nCSV_FILE_PATH = 'match_data.csv'\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    count = Counter()\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            count['goals'] += int(row['goals'])\n            count['penalties'] += int(row['penalties'])\n    count['goals'] += goals\n    count['penalties'] += penalties\n    return count", "raw_solution": "import csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    count = Counter()\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            count['goals'] += int(row['goals'])\n            count['penalties'] += int(row['penalties'])\n    count['goals'] += goals\n    count['penalties'] += penalties\n    return count\n# Test the function\nsetup_csv()"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    moved_files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                shutil.move(os.path.join(root, file), os.path.join(target_dir, file))\n                moved_files_count += 1\n    return moved_files_count", "raw_solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    moved_files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                shutil.move(os.path.join(root, file), os.path.join(target_dir, file))\n                moved_files_count += 1\n    return moved_files_count\n\n# Example usage\nsource_directory = '/path/to/source'\ntarget_directory = '/path/to/target'\npattern = r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'\nmoved_count = task_func(source_directory, target_directory, pattern)"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean the texts\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n    \n    # Tokenize the texts\n    words1 = text1.split()\n    words2 = text2.split()\n    \n    # Calculate term frequency\n    tf1 = Counter(words1)\n    tf2 = Counter(words2)\n    \n    # Calculate cosine similarity\n    common_words = set(tf1.keys()) & set(tf2.keys())\n    numerator = sum(tf1[word] * tf2[word] for word in common_words)\n    denominator = np.sqrt(sum(tf1[word] ** 2 for word in tf1.keys())) * np.sqrt(sum(tf2[word] ** 2 for word in tf2.keys()))\n    cosine_similarity = numerator / denominator if denominator else 0\n    \n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n    \n    return (cosine_similarity, levenshtein_ratio)", "raw_solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    # Clean the texts\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n    \n    # Tokenize the texts\n    words1 = text1.split()\n    words2 = text2.split()\n    \n    # Calculate term frequency\n    tf1 = Counter(words1)\n    tf2 = Counter(words2)\n    \n    # Calculate cosine similarity\n    common_words = set(tf1.keys()) & set(tf2.keys())\n    numerator = sum(tf1[word] * tf2[word] for word in common_words)\n    denominator = np.sqrt(sum(tf1[word] ** 2 for word in tf1.keys())) * np.sqrt(sum(tf2[word] ** 2 for word in tf2.keys()))\n    cosine_similarity = numerator / denominator if denominator else 0\n    \n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n    \n    return (cosine_similarity, levenshtein_ratio)\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"Input numbers must be non-negative\")\n\n    def factorial(n):\n        return math.factorial(n)\n\n    def sum_of_factorials(perm):\n        return reduce(lambda x, y: x + y, map(factorial, perm))\n\n    permutations_list = list(permutations(numbers))\n    sums_of_factorials = [sum_of_factorials(perm) for perm in permutations_list]\n\n    return sums_of_factorials, permutations_list", "raw_solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"Input numbers must be non-negative\")\n\n    def factorial(n):\n        return math.factorial(n)\n\n    def sum_of_factorials(perm):\n        return reduce(lambda x, y: x + y, map(factorial, perm))\n\n    permutations_list = list(permutations(numbers))\n    sums_of_factorials = [sum_of_factorials(perm) for perm in permutations_list]\n\n    return sums_of_factorials, permutations_list\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n    for extension in EXTENSIONS:\n        for file_path in glob.glob(os.path.join(SOURCE_DIR, f'*.{extension}')):\n            try:\n                shutil.move(file_path, DEST_DIR)\n                transferred_files.append(os.path.basename(file_path))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {file_path}: {e}\")\n    return transferred_files\nSOURCE_DIR = '/path/to/source'\nDEST_DIR = '/path/to/destination'\nEXTENSIONS = ['txt', 'csv']", "raw_solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n    for extension in EXTENSIONS:\n        for file_path in glob.glob(os.path.join(SOURCE_DIR, f'*.{extension}')):\n            try:\n                shutil.move(file_path, DEST_DIR)\n                transferred_files.append(os.path.basename(file_path))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {file_path}: {e}\")\n    return transferred_files\n\n# Example usage\nSOURCE_DIR = '/path/to/source'\nDEST_DIR = '/path/to/destination'\nEXTENSIONS = ['txt', 'csv']\n\ntransferred_files = task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS)"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Extract items, counts, and weights from the input data\n    items = [item for item, count, weight in data]\n    counts = [count for item, count, weight in data]\n    weights = [weight for item, count, weight in data]\n    \n    # Normalize counts using z-score normalization\n    normalized_counts = zscore(counts)\n    \n    # Normalize weights using min-max scaling\n    scaler = MinMaxScaler()\n    normalized_weights = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n    \n    # Create a DataFrame with the results\n    result_df = pd.DataFrame({\n        'Item': items,\n        'Normalized Count': normalized_counts,\n        'Normalized Weight': normalized_weights\n    })\n    \n    return result_df\ndata = [\n    ('apple', 10, 5),\n    ('banana', 20, 3),\n    ('orange', 15, 4),\n    ('grape', 5, 2)\n]", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data):\n    # Extract items, counts, and weights from the input data\n    items = [item for item, count, weight in data]\n    counts = [count for item, count, weight in data]\n    weights = [weight for item, count, weight in data]\n    \n    # Normalize counts using z-score normalization\n    normalized_counts = zscore(counts)\n    \n    # Normalize weights using min-max scaling\n    scaler = MinMaxScaler()\n    normalized_weights = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n    \n    # Create a DataFrame with the results\n    result_df = pd.DataFrame({\n        'Item': items,\n        'Normalized Count': normalized_counts,\n        'Normalized Weight': normalized_weights\n    })\n    \n    return result_df\n\n# Example usage\ndata = [\n    ('apple', 10, 5),\n    ('banana', 20, 3),\n    ('orange', 15, 4),\n    ('grape', 5, 2)\n]\n\nresult = task_func(data)"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    if not data_list:\n        return pd.DataFrame(columns=['Mean Value'], index=[])\n\n    # Flatten the list of tuples to get a list of all elements\n    flattened = list(itertools.chain.from_iterable(data_list))\n\n    # Filter out non-numeric values\n    numeric_values = [x for x in flattened if isinstance(x, (int, float))]\n\n    # Calculate the mean of the numeric values\n    mean_values = [np.mean(numeric_values[i::len(data_list)]) for i in range(len(data_list[0]))]\n\n    # Create a DataFrame with the mean values\n    df = pd.DataFrame(mean_values, columns=['Mean Value'], index=[f'Position {i}' for i in range(len(data_list[0]))])\n\n    return df\ndata = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)]", "raw_solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    if not data_list:\n        return pd.DataFrame(columns=['Mean Value'], index=[])\n\n    # Flatten the list of tuples to get a list of all elements\n    flattened = list(itertools.chain.from_iterable(data_list))\n\n    # Filter out non-numeric values\n    numeric_values = [x for x in flattened if isinstance(x, (int, float))]\n\n    # Calculate the mean of the numeric values\n    mean_values = [np.mean(numeric_values[i::len(data_list)]) for i in range(len(data_list[0]))]\n\n    # Create a DataFrame with the mean values\n    df = pd.DataFrame(mean_values, columns=['Mean Value'], index=[f'Position {i}' for i in range(len(data_list[0]))])\n\n    return df\n\n# Test the function with the provided data\ndata = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)]\ndf = task_func(data)"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if the data is empty\n    if data.empty:\n        raise ValueError(\"The data is empty.\")\n    \n    # Check if the columns exist in the data\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both of the columns are not in the data.\")\n    \n    # Check if the columns contain non-categorical data\n    if not data[col1].dtype == 'object' or not data[col2].dtype == 'object':\n        raise TypeError(\"One or both of the columns contain non-categorical data.\")\n    \n    # Check if the columns have multiple categories\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    \n    # Check if some categories have less than 5 observations\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations.\")\n    \n    # Perform the chi-square test of independence\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p\ndata = pd.DataFrame({\n    'a': np.random.choice(['A', 'B'], size=100),\n    'b': np.random.choice(['X', 'Y'], size=100)\n})", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\ndef task_func(data, col1, col2):\n    # Check if the data is empty\n    if data.empty:\n        raise ValueError(\"The data is empty.\")\n    \n    # Check if the columns exist in the data\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both of the columns are not in the data.\")\n    \n    # Check if the columns contain non-categorical data\n    if not data[col1].dtype == 'object' or not data[col2].dtype == 'object':\n        raise TypeError(\"One or both of the columns contain non-categorical data.\")\n    \n    # Check if the columns have multiple categories\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    \n    # Check if some categories have less than 5 observations\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations.\")\n    \n    # Perform the chi-square test of independence\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p\n\n# Test the function with the provided data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'a': np.random.choice(['A', 'B'], size=100),\n    'b': np.random.choice(['X', 'Y'], size=100)\n})"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\nNUMBERS = list(range(1, 7))\ndef task_func(rolls, seed=None):\n    # Set the seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n    \n    # Initialize a list to store the frequency of each outcome\n    frequency = [0] * 6\n    \n    # Simulate the dice rolls\n    for _ in range(rolls):\n        roll = random.choice(NUMBERS)\n        frequency[roll - 1] += 1\n    \n    # Convert the frequency list to a numpy array\n    frequency_array = np.array(frequency)\n    \n    # Create a histogram of the results\n    fig, ax = plt.subplots()\n    ax.bar(NUMBERS, frequency_array, tick_label=NUMBERS)\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    # Return the frequency array and the histogram axes\n    return frequency_array, ax\nrolls = 1000", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    # Set the seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n    \n    # Initialize a list to store the frequency of each outcome\n    frequency = [0] * 6\n    \n    # Simulate the dice rolls\n    for _ in range(rolls):\n        roll = random.choice(NUMBERS)\n        frequency[roll - 1] += 1\n    \n    # Convert the frequency list to a numpy array\n    frequency_array = np.array(frequency)\n    \n    # Create a histogram of the results\n    fig, ax = plt.subplots()\n    ax.bar(NUMBERS, frequency_array, tick_label=NUMBERS)\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    # Return the frequency array and the histogram axes\n    return frequency_array, ax\n\n# Example usage\nrolls = 1000\nfrequency_array, ax = task_func(rolls, seed=42)"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Create a zip file in the target directory\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        # Walk through the source directory\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                # Check if the file has the '_processed' suffix\n                if file.endswith('_processed'):\n                    # Create the full file path\n                    file_path = os.path.join(root, file)\n                    # Add the file to the zip archive\n                    zipf.write(file_path, os.path.relpath(file_path, source_dir))\n\n    # Return the path to the created archive\n    return archive_path\nsource_directory = 'path/to/source'\ntarget_directory = 'path/to/target'\narchive_name = 'processed_files.zip'", "raw_solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Create a zip file in the target directory\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        # Walk through the source directory\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                # Check if the file has the '_processed' suffix\n                if file.endswith('_processed'):\n                    # Create the full file path\n                    file_path = os.path.join(root, file)\n                    # Add the file to the zip archive\n                    zipf.write(file_path, os.path.relpath(file_path, source_dir))\n\n    # Return the path to the created archive\n    return archive_path\n\n# Example usage\nsource_directory = 'path/to/source'\ntarget_directory = 'path/to/target'\narchive_name = 'processed_files.zip'\narchive_path = task_func(source_directory, target_directory, archive_name)"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Convert the 'timestamp' column to datetime\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    \n    # Create a new column 'time_in_seconds' from 'timestamp'\n    df['time_in_seconds'] = df['timestamp'].astype(np.int64) // 10**9\n    \n    # Prepare the data for the linear regression model\n    X = df[['time_in_seconds']]\n    y = df['close']\n    \n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict the next 7 days\n    last_timestamp = df['timestamp'].max()\n    future_timestamps = pd.date_range(start=last_timestamp, periods=8, closed='right')[1:]\n    future_time_in_seconds = future_timestamps.astype(np.int64) // 10**9\n    future_prices = model.predict(future_time_in_seconds.values.reshape(-1, 1))\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['timestamp'], df['close'], label='Historical Prices')\n    ax.plot(future_timestamps, future_prices, label='Predicted Prices', linestyle='--')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Close Price')\n    ax.set_title('Stock Price Prediction')\n    ax.legend()\n    \n    return future_prices.tolist(), ax\ndata = {\n    'timestamp': pd.date_range(start='2023-01-01', periods=100, freq='D'),\n    'close': np.random.randint(100, 200, 100)\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    # Convert the 'timestamp' column to datetime\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    \n    # Create a new column 'time_in_seconds' from 'timestamp'\n    df['time_in_seconds'] = df['timestamp'].astype(np.int64) // 10**9\n    \n    # Prepare the data for the linear regression model\n    X = df[['time_in_seconds']]\n    y = df['close']\n    \n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict the next 7 days\n    last_timestamp = df['timestamp'].max()\n    future_timestamps = pd.date_range(start=last_timestamp, periods=8, closed='right')[1:]\n    future_time_in_seconds = future_timestamps.astype(np.int64) // 10**9\n    future_prices = model.predict(future_time_in_seconds.values.reshape(-1, 1))\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['timestamp'], df['close'], label='Historical Prices')\n    ax.plot(future_timestamps, future_prices, label='Predicted Prices', linestyle='--')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Close Price')\n    ax.set_title('Stock Price Prediction')\n    ax.legend()\n    \n    return future_prices.tolist(), ax\n\n# Example usage\ndata = {\n    'timestamp': pd.date_range(start='2023-01-01', periods=100, freq='D'),\n    'close': np.random.randint(100, 200, 100)\n}\ndf = pd.DataFrame(data)\npredicted_prices, ax = task_func(df)\n\n# Print the predicted prices"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\nimport pandas as pd\ndef task_func(df, z_threshold=2):\n    # Calculate the Z-Score for the 'closing_price' column\n    z_scores = zscore(df['closing_price'])\n    \n    # Identify outliers based on the Z-Score threshold\n    outliers = df[z_scores.abs() > z_threshold]\n    \n    # Plot the outliers\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='All Prices')\n    ax.plot(outliers.index, outliers['closing_price'], 'ro', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    \n    return outliers, ax", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    # Calculate the Z-Score for the 'closing_price' column\n    z_scores = zscore(df['closing_price'])\n    \n    # Identify outliers based on the Z-Score threshold\n    outliers = df[z_scores.abs() > z_threshold]\n    \n    # Plot the outliers\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='All Prices')\n    ax.plot(outliers.index, outliers['closing_price'], 'ro', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    \n    return outliers, ax\n\n# Example usage\ndf2 = pd.DataFrame({\n    'closing_price': [10, 20, 30, 40, 50, 100]\n})\nimport pandas as pd\noutliers2, plot2 = task_func(df2, z_threshold=1.5)\n\n# Display the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    This function takes a pandas DataFrame as input and returns a tuple of two matplotlib.axes._axes.Axes objects.\n    The first object is a box plot of the closing prices, and the second object is a histogram of the closing prices.\n    \"\"\"\n    # Create a figure and a set of subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Create a box plot of the closing prices\n    sns.boxplot(x=df['closing_price'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n\n    # Create a histogram of the closing prices\n    sns.histplot(df['closing_price'], ax=ax2, kde=True)\n    ax2.set_title('Histogram of Closing Prices')\n\n    # Return the two axes objects\n    return ax1, ax2\ndata = {\n    'closing_price': [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    This function takes a pandas DataFrame as input and returns a tuple of two matplotlib.axes._axes.Axes objects.\n    The first object is a box plot of the closing prices, and the second object is a histogram of the closing prices.\n    \"\"\"\n    # Create a figure and a set of subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Create a box plot of the closing prices\n    sns.boxplot(x=df['closing_price'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n\n    # Create a histogram of the closing prices\n    sns.histplot(df['closing_price'], ax=ax2, kde=True)\n    ax2.set_title('Histogram of Closing Prices')\n\n    # Return the two axes objects\n    return ax1, ax2\n\n# Example usage\ndata = {\n    'closing_price': [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]\n}\ndf = pd.DataFrame(data)\nax1, ax2 = task_func(df)\n\n# Show the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Convert the 'Date' column to datetime format\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Set the 'Date' column as the index\n    df.set_index('Date', inplace=True)\n    \n    # Fit the ARIMA model\n    model = ARIMA(df['Close'], order=(5,1,0))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the forecast\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['Close'], label='Historical Prices')\n    ax.plot(pd.date_range(start=df.index[-1], periods=8, closed='right'), forecast, label='Forecasted Prices', color='red')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.set_title('ARIMA Forecast of Share Closing Prices')\n    ax.legend()\n    \n    return list(forecast), ax\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08', '2021-01-09', '2021-01-10'],\n    'Close': [100, 102, 101, 103, 104, 105, 106, 107, 108, 109]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Convert the 'Date' column to datetime format\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Set the 'Date' column as the index\n    df.set_index('Date', inplace=True)\n    \n    # Fit the ARIMA model\n    model = ARIMA(df['Close'], order=(5,1,0))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the forecast\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['Close'], label='Historical Prices')\n    ax.plot(pd.date_range(start=df.index[-1], periods=8, closed='right'), forecast, label='Forecasted Prices', color='red')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.set_title('ARIMA Forecast of Share Closing Prices')\n    ax.legend()\n    \n    return list(forecast), ax\n\n# Example usage\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08', '2021-01-09', '2021-01-10'],\n    'Close': [100, 102, 101, 103, 104, 105, 106, 107, 108, 109]\n}\ndf = pd.DataFrame(data)\nforecasted_prices, ax = task_func(df)\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations of the lowercase English alphabets\n    combinations = [''.join(p) for p in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize a dictionary to store the frequency of each combination\n    combination_freq = {combo: 0 for combo in combinations}\n    \n    # Count the frequency of each combination in the given word\n    for i in range(len(word) - 1):\n        combo = word[i:i+2]\n        if combo in combination_freq:\n            combination_freq[combo] += 1\n    \n    return combination_freq\nword = \"hello\"", "raw_solution": "from collections import Counter\nimport itertools\nimport string\n\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations of the lowercase English alphabets\n    combinations = [''.join(p) for p in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize a dictionary to store the frequency of each combination\n    combination_freq = {combo: 0 for combo in combinations}\n    \n    # Count the frequency of each combination in the given word\n    for i in range(len(word) - 1):\n        combo = word[i:i+2]\n        if combo in combination_freq:\n            combination_freq[combo] += 1\n    \n    return combination_freq\n\n# Example usage\nword = \"hello\""}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Create a date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create a DataFrame with random sales data\n    sales_data = pd.DataFrame({\n        'Date': date_range,\n        'Category': np.random.choice(categories, periods),\n        'Sales': np.random.randint(100, 1000, periods)\n    })\n    \n    # Plot the sales data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for category in categories:\n        category_data = sales_data[sales_data['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], label=category)\n    \n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report by Category')\n    ax.legend()\n    \n    return sales_data, ax", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Create a date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create a DataFrame with random sales data\n    sales_data = pd.DataFrame({\n        'Date': date_range,\n        'Category': np.random.choice(categories, periods),\n        'Sales': np.random.randint(100, 1000, periods)\n    })\n    \n    # Plot the sales data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for category in categories:\n        category_data = sales_data[sales_data['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], label=category)\n    \n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report by Category')\n    ax.legend()\n    \n    return sales_data, ax\n\n# Example usage\nsales_df, ax = task_func()"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    if sales_data is None:\n        # Generate a time series of sales data\n        date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n        sales_data = np.random.randint(100, 1000, size=periods)\n        sales_data = pd.Series(sales_data, index=date_range)\n    else:\n        sales_data = pd.Series(sales_data, index=pd.date_range(start=start_date, periods=len(sales_data), freq=freq))\n\n    # Prepare the data for linear regression\n    X = np.arange(len(sales_data)).reshape(-1, 1)\n    y = sales_data.values\n\n    # Fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Forecast future sales\n    future_periods = periods\n    future_X = np.arange(len(sales_data), len(sales_data) + future_periods).reshape(-1, 1)\n    future_sales = model.predict(future_X)\n\n    return future_sales", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    if sales_data is None:\n        # Generate a time series of sales data\n        date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n        sales_data = np.random.randint(100, 1000, size=periods)\n        sales_data = pd.Series(sales_data, index=date_range)\n    else:\n        sales_data = pd.Series(sales_data, index=pd.date_range(start=start_date, periods=len(sales_data), freq=freq))\n\n    # Prepare the data for linear regression\n    X = np.arange(len(sales_data)).reshape(-1, 1)\n    y = sales_data.values\n\n    # Fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Forecast future sales\n    future_periods = periods\n    future_X = np.arange(len(sales_data), len(sales_data) + future_periods).reshape(-1, 1)\n    future_sales = model.predict(future_X)\n\n    return future_sales\n\n# Example usage\nfuture_sales = task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI')"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    assigned_tasks = []\n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        assigned_tasks.append({\n            'Task Name': task.replace(' ', '_'),\n            'Assigned To': employee,\n            'Due Date': datetime.now().strftime('%Y-%m-%d')\n        })\n    \n    return pd.DataFrame(assigned_tasks)\ntask_list = [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\"]\nn_tasks = 3", "raw_solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    assigned_tasks = []\n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        assigned_tasks.append({\n            'Task Name': task.replace(' ', '_'),\n            'Assigned To': employee,\n            'Due Date': datetime.now().strftime('%Y-%m-%d')\n        })\n    \n    return pd.DataFrame(assigned_tasks)\n\n# Example usage:\ntask_list = [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\"]\nn_tasks = 3\nassigned_df = task_func(task_list, n_tasks)"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n    if not text:\n        raise ValueError(\"Input text is empty\")\n    \n    # Convert text to lowercase and replace spaces with underscores\n    modified_text = re.sub(r'\\s+', '_', text.lower())\n    \n    # Split the modified text into words\n    words = modified_text.split('_')\n    \n    # Count the frequency of each unique word\n    word_counts = Counter(words)\n    \n    # Create a list of unique words and their corresponding frequencies\n    unique_words = list(word_counts.keys())\n    frequencies = [word_counts[word] for word in unique_words]\n    \n    # Create a bar plot of the word frequencies\n    fig, ax = plt.subplots()\n    ax.bar(unique_words, frequencies)\n    \n    # Set the title and labels of the plot\n    ax.set_title('Word Frequency')\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Frequency')\n    \n    return ax\nmystrings = ['example', 'text', 'for', 'testing']\ntext = 'This is a sample text for testing the function.'", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\ndef task_func(mystrings, text):\n    if not text:\n        raise ValueError(\"Input text is empty\")\n    \n    # Convert text to lowercase and replace spaces with underscores\n    modified_text = re.sub(r'\\s+', '_', text.lower())\n    \n    # Split the modified text into words\n    words = modified_text.split('_')\n    \n    # Count the frequency of each unique word\n    word_counts = Counter(words)\n    \n    # Create a list of unique words and their corresponding frequencies\n    unique_words = list(word_counts.keys())\n    frequencies = [word_counts[word] for word in unique_words]\n    \n    # Create a bar plot of the word frequencies\n    fig, ax = plt.subplots()\n    ax.bar(unique_words, frequencies)\n    \n    # Set the title and labels of the plot\n    ax.set_title('Word Frequency')\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Frequency')\n    \n    return ax\n\n# Example usage\nmystrings = ['example', 'text', 'for', 'testing']\ntext = 'This is a sample text for testing the function.'\nax = task_func(mystrings, text)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Create a list to hold the paths of files to be zipped\n    files_to_zip = []\n    \n    # Walk through the source directory\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            # Check if the file has a valid extension\n            if file.endswith(tuple(valid_extensions)):\n                # Append the file path to the list\n                files_to_zip.append(os.path.join(root, file))\n    \n    # Create the target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    # Create the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            # Add each file to the zip file\n            zipf.write(file, os.path.relpath(file, source_directory))\n    \n    # Return the full path to the created zip file\n    return zip_path\nsource_directory = '/path/to/source_directory'\ntarget_directory = '/path/to/target_directory'\nzip_name = 'my_zip'", "raw_solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Create a list to hold the paths of files to be zipped\n    files_to_zip = []\n    \n    # Walk through the source directory\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            # Check if the file has a valid extension\n            if file.endswith(tuple(valid_extensions)):\n                # Append the file path to the list\n                files_to_zip.append(os.path.join(root, file))\n    \n    # Create the target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    # Create the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            # Add each file to the zip file\n            zipf.write(file, os.path.relpath(file, source_directory))\n    \n    # Return the full path to the created zip file\n    return zip_path\n\n# Example usage\nsource_directory = '/path/to/source_directory'\ntarget_directory = '/path/to/target_directory'\nzip_name = 'my_zip'"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\nfrom openpyxl import load_workbook\ndef task_func(source_directory: str, target_directory: str) -> int:\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    \n    # Create the target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    # Initialize a counter for the number of successfully converted files\n    converted_count = 0\n    \n    # Iterate over all files in the source directory\n    for filename in os.listdir(source_directory):\n        # Check if the file has one of the specified extensions\n        if filename.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n            # Construct the full path to the file\n            file_path = os.path.join(source_directory, filename)\n            \n            # Determine the target file path\n            target_file_path = os.path.join(target_directory, filename.replace(filename.split('.')[-1], 'csv'))\n            \n            # Convert the file to CSV based on its extension\n            if filename.endswith('.txt'):\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    text = file.read()\n                    df = pd.DataFrame({'Text': [text]})\n                    df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.docx'):\n                doc = docx.Document(file_path)\n                text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                df = pd.DataFrame({'Text': [text]})\n                df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.xlsx'):\n                workbook = load_workbook(file_path)\n                sheet = workbook.active\n                text = '\\n'.join([cell.value for row in sheet.iter_rows(values_only=True) for cell in row])\n                df = pd.DataFrame({'Text': [text]})\n                df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.csv'):\n                # If the file is already a CSV, just copy it\n                os.rename(file_path, target_file_path)\n            \n            # Increment the counter\n            converted_count += 1\n    \n    # Return the number of successfully converted files\n    return converted_count\nsource_directory = 'path/to/source/directory'\ntarget_directory = 'path/to/target/directory'", "raw_solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\nfrom openpyxl import load_workbook\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    \n    # Create the target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    # Initialize a counter for the number of successfully converted files\n    converted_count = 0\n    \n    # Iterate over all files in the source directory\n    for filename in os.listdir(source_directory):\n        # Check if the file has one of the specified extensions\n        if filename.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n            # Construct the full path to the file\n            file_path = os.path.join(source_directory, filename)\n            \n            # Determine the target file path\n            target_file_path = os.path.join(target_directory, filename.replace(filename.split('.')[-1], 'csv'))\n            \n            # Convert the file to CSV based on its extension\n            if filename.endswith('.txt'):\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    text = file.read()\n                    df = pd.DataFrame({'Text': [text]})\n                    df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.docx'):\n                doc = docx.Document(file_path)\n                text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                df = pd.DataFrame({'Text': [text]})\n                df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.xlsx'):\n                workbook = load_workbook(file_path)\n                sheet = workbook.active\n                text = '\\n'.join([cell.value for row in sheet.iter_rows(values_only=True) for cell in row])\n                df = pd.DataFrame({'Text': [text]})\n                df.to_csv(target_file_path, index=False)\n            elif filename.endswith('.csv'):\n                # If the file is already a CSV, just copy it\n                os.rename(file_path, target_file_path)\n            \n            # Increment the counter\n            converted_count += 1\n    \n    # Return the number of successfully converted files\n    return converted_count\n\n# Example usage\nsource_directory = 'path/to/source/directory'\ntarget_directory = 'path/to/target/directory'"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Check if the DataFrame contains NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n    \n    # Initialize a MinMaxScaler\n    scaler = MinMaxScaler()\n    \n    # Create a copy of the DataFrame to store the results\n    result_df = df.copy()\n    \n    # Iterate over each column in the DataFrame\n    for column in df.columns:\n        # Check if the column is numeric\n        if not np.issubdtype(df[column].dtype, np.number):\n            raise TypeError(\"The DataFrame contains non-numeric data types.\")\n        \n        # Calculate the cumulative sum of the column\n        cumulative_sum = df[column].cumsum()\n        \n        # Normalize the cumulative sum using MinMaxScaler\n        normalized_cumulative_sum = scaler.fit_transform(cumulative_sum.values.reshape(-1, 1))\n        \n        # Assign the normalized cumulative sum back to the result DataFrame\n        result_df[column] = normalized_cumulative_sum.flatten()\n    \n    return result_df\ndata = {\n    'A': [1, 2, 3, 4, 5],\n    'B': [5, 4, 3, 2, 1],\n    'C': [1, 1, 1, 1, 1]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Check if the DataFrame contains NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n    \n    # Initialize a MinMaxScaler\n    scaler = MinMaxScaler()\n    \n    # Create a copy of the DataFrame to store the results\n    result_df = df.copy()\n    \n    # Iterate over each column in the DataFrame\n    for column in df.columns:\n        # Check if the column is numeric\n        if not np.issubdtype(df[column].dtype, np.number):\n            raise TypeError(\"The DataFrame contains non-numeric data types.\")\n        \n        # Calculate the cumulative sum of the column\n        cumulative_sum = df[column].cumsum()\n        \n        # Normalize the cumulative sum using MinMaxScaler\n        normalized_cumulative_sum = scaler.fit_transform(cumulative_sum.values.reshape(-1, 1))\n        \n        # Assign the normalized cumulative sum back to the result DataFrame\n        result_df[column] = normalized_cumulative_sum.flatten()\n    \n    return result_df\n\n# Example usage\ndata = {\n    'A': [1, 2, 3, 4, 5],\n    'B': [5, 4, 3, 2, 1],\n    'C': [1, 1, 1, 1, 1]\n}\ndf = pd.DataFrame(data)\nresult = task_func(df)"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    if not os.path.exists(directory_path):\n        raise ValueError(\"The provided directory does not exist.\")\n    \n    result = []\n    for file_path in Path(directory_path).iterdir():\n        if file_path.is_file():\n            file_size = file_path.stat().st_size\n            creation_time = datetime.fromtimestamp(file_path.stat().st_ctime, timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(file_path.stat().st_mtime, timezone.utc).isoformat()\n            result.append((file_path.name, file_size, creation_time, modification_time))\n    \n    return result", "raw_solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\ndef task_func(directory_path: str):\n    if not os.path.exists(directory_path):\n        raise ValueError(\"The provided directory does not exist.\")\n    \n    result = []\n    for file_path in Path(directory_path).iterdir():\n        if file_path.is_file():\n            file_size = file_path.stat().st_size\n            creation_time = datetime.fromtimestamp(file_path.stat().st_ctime, timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(file_path.stat().st_mtime, timezone.utc).isoformat()\n            result.append((file_path.name, file_size, creation_time, modification_time))\n    \n    return result\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Check if the JSON data is malformed or empty\n    if not json_data or not isinstance(json_data, dict):\n        raise ValueError(\"Invalid JSON data\")\n\n    # Create a list to store the country and population data\n    data = []\n\n    # Iterate through the JSON data to extract country names and populations\n    for country, population in json_data.items():\n        if not isinstance(country, str):\n            raise ValueError(\"Invalid country name\")\n        if not isinstance(population, (int, float)) or population < 0:\n            raise ValueError(\"Invalid population value\")\n        data.append({\"Country\": country, \"Population\": math.floor(population)})\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame(data)\n\n    # Check if the output directory exists, if not, create it\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Construct the file path for the CSV report\n    file_path = os.path.join(output_dir, file_name)\n\n    # Write the DataFrame to a CSV file\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Failed to write to file: {e}\")\n\n    # Return the file path of the generated CSV report\n    return file_path\njson_data = {\n    \"United States\": 331002651,\n    \"China\": 1412000000,\n    \"India\": 1366417754,\n    \"Indonesia\": 273523615,\n    \"Pakistan\": 225199937\n}\noutput_dir = \"output\"\nfile_name = \"country_population_report.csv\"", "raw_solution": "import pandas as pd\nimport json\nimport os\nimport math\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Check if the JSON data is malformed or empty\n    if not json_data or not isinstance(json_data, dict):\n        raise ValueError(\"Invalid JSON data\")\n\n    # Create a list to store the country and population data\n    data = []\n\n    # Iterate through the JSON data to extract country names and populations\n    for country, population in json_data.items():\n        if not isinstance(country, str):\n            raise ValueError(\"Invalid country name\")\n        if not isinstance(population, (int, float)) or population < 0:\n            raise ValueError(\"Invalid population value\")\n        data.append({\"Country\": country, \"Population\": math.floor(population)})\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame(data)\n\n    # Check if the output directory exists, if not, create it\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Construct the file path for the CSV report\n    file_path = os.path.join(output_dir, file_name)\n\n    # Write the DataFrame to a CSV file\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Failed to write to file: {e}\")\n\n    # Return the file path of the generated CSV report\n    return file_path\n\n# Example usage:\njson_data = {\n    \"United States\": 331002651,\n    \"China\": 1412000000,\n    \"India\": 1366417754,\n    \"Indonesia\": 273523615,\n    \"Pakistan\": 225199937\n}\n\noutput_dir = \"output\"\nfile_name = \"country_population_report.csv\"\n\nfile_path = task_func(json_data, output_dir, file_name)"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    if not predicates:\n        raise ValueError(\"No valid predicates provided\")\n    \n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(\"The specified directory does not exist or is not a directory\")\n    \n    results = {}\n    for item in os.listdir(dir_path):\n        for predicate in predicates:\n            if re.match(predicate, item):\n                results[item] = True\n                break\n        else:\n            results[item] = False\n    \n    return results", "raw_solution": "import os\nimport re\nfrom pathlib import Path\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    if not predicates:\n        raise ValueError(\"No valid predicates provided\")\n    \n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(\"The specified directory does not exist or is not a directory\")\n    \n    results = {}\n    for item in os.listdir(dir_path):\n        for predicate in predicates:\n            if re.match(predicate, item):\n                results[item] = True\n                break\n        else:\n            results[item] = False\n    \n    return results\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    # Convert hexadecimal string to bytes\n    bytes_data = binascii.unhexlify(hex_string)\n    \n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_data.decode('utf-8')\n    \n    # Encode UTF-8 string into various formats", "raw_solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\ndef task_func(hex_string):\n    # Convert hexadecimal string to bytes\n    bytes_data = binascii.unhexlify(hex_string)\n    \n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_data.decode('utf-8')\n    \n    # Encode UTF-8 string into various formats\n    encoded_data = {\n        'hex': hex_string,\n        'base64': base64.b64encode(bytes_data).decode('utf-8'),\n        'utf-8': utf8_string,\n        'utf-16': utf8_string.encode('utf-16').decode('utf-16'),\n        'utf-32': utf8_string.encode('utf-32').decode('utf-32'),\n        'ASCII': utf8_string if utf8_string.isascii() else 'Not representable in ASCII',\n        'URL': urllib.parse.quote(utf8_string),\n        'ROT13': ''.join([chr(((ord(c) - 65 + 13) % 26) + 65) if c.isupper() else\n                          chr(((ord(c) - 97 + 13) % 26) + 97) if c.islower() else c)\n                          for c in utf8_string])\n    }\n    \n    return encoded_data\n\n# Test the function with the provided example\n\n```"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n        \n        # Calculate the MD5 checksum of the downloaded file\n        md5_checksum = hashlib.md5(open(TARGET_TAR_FILE, 'rb').read()).hexdigest()\n        \n        # Check if the MD5 checksum matches the expected value\n        if md5_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract the contents of the tar.gz file\n            with tarfile.open(TARGET_TAR_FILE, 'r:gz') as tar:\n                tar.extractall()\n            return True\n        else:\n            # Delete the downloaded file if the checksum does not match\n            os.remove(TARGET_TAR_FILE)\n            return False\n    except Exception as e:\n        # Handle any exceptions that may occur during the process\n        print(f\"An error occurred: {e}\")\n        return False\nurl = \"http://example.com/path/to/downloaded_files.tar.gz\"", "raw_solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\ndef task_func(url):\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n        \n        # Calculate the MD5 checksum of the downloaded file\n        md5_checksum = hashlib.md5(open(TARGET_TAR_FILE, 'rb').read()).hexdigest()\n        \n        # Check if the MD5 checksum matches the expected value\n        if md5_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract the contents of the tar.gz file\n            with tarfile.open(TARGET_TAR_FILE, 'r:gz') as tar:\n                tar.extractall()\n            return True\n        else:\n            # Delete the downloaded file if the checksum does not match\n            os.remove(TARGET_TAR_FILE)\n            return False\n    except Exception as e:\n        # Handle any exceptions that may occur during the process\n        print(f\"An error occurred: {e}\")\n        return False\n\n# Example usage\nurl = \"http://example.com/path/to/downloaded_files.tar.gz\"\nresult = task_func(url)"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a dictionary to store the count of each value in the specified column\n        value_counts = collections.defaultdict(int)\n        \n        # Open the CSV file and read its contents\n        with open(csv_file_path, mode='r', newline='') as file:\n            reader = csv.DictReader(file)\n            \n            # Check if the specified column exists in the CSV file\n            if column_name not in reader.fieldnames:\n                # Delete the downloaded file and raise a ValueError\n                os.remove(csv_file_path)\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count the occurrences of each value in the specified column\n            for row in reader:\n                value_counts[row[column_name]] += 1\n        \n        # Delete the downloaded file after processing\n        os.remove(csv_file_path)\n        \n        # Return the dictionary of value counts\n        return dict(value_counts)\n    \n    except Exception as e:\n        # Handle any exceptions that may occur during the process\n        print(f\"An error occurred: {e}\")\n        return None\nurl = \"https://example.com/data.csv\"\ncolumn_name = \"column1\"\ncsv_file_path = \"data.csv\"", "raw_solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a dictionary to store the count of each value in the specified column\n        value_counts = collections.defaultdict(int)\n        \n        # Open the CSV file and read its contents\n        with open(csv_file_path, mode='r', newline='') as file:\n            reader = csv.DictReader(file)\n            \n            # Check if the specified column exists in the CSV file\n            if column_name not in reader.fieldnames:\n                # Delete the downloaded file and raise a ValueError\n                os.remove(csv_file_path)\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count the occurrences of each value in the specified column\n            for row in reader:\n                value_counts[row[column_name]] += 1\n        \n        # Delete the downloaded file after processing\n        os.remove(csv_file_path)\n        \n        # Return the dictionary of value counts\n        return dict(value_counts)\n    \n    except Exception as e:\n        # Handle any exceptions that may occur during the process\n        print(f\"An error occurred: {e}\")\n        return None\n\n# Example usage\nurl = \"https://example.com/data.csv\"\ncolumn_name = \"column1\"\ncsv_file_path = \"data.csv\"\nresult = task_func(url, column_name, csv_file_path)"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n        root = etree.fromstring(xml_data)\n    except (urllib.error.URLError, ValueError) as e:\n        raise ValueError(\"Failed to fetch or parse XML from URL: {}\".format(e))\n\n    items = root.findall('.//item')\n    if not items:\n        raise ValueError(\"No 'item' elements found in the XML file\")\n\n    data = []\n    for item in items:\n        item_data = {}\n        for child in item:\n            item_data[child.tag] = child.text\n        data.append(item_data)\n\n    return pd.DataFrame(data)", "raw_solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\ndef task_func(url):\n    try:\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n        root = etree.fromstring(xml_data)\n    except (urllib.error.URLError, ValueError) as e:\n        raise ValueError(\"Failed to fetch or parse XML from URL: {}\".format(e))\n\n    items = root.findall('.//item')\n    if not items:\n        raise ValueError(\"No 'item' elements found in the XML file\")\n\n    data = []\n    for item in items:\n        item_data = {}\n        for child in item:\n            item_data[child.tag] = child.text\n        data.append(item_data)\n\n    return pd.DataFrame(data)\n\n# Example usage\n# df = task_func('http://example.com/valid_structure.xml')\n# print(df)\n\n```"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    # Download the text file from the specified URL\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Use regular expression to find words and count their frequency\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    # Get the ten most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Create a bar chart of the ten most common words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, _ in most_common_words], [count for _, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    # Return the word counts and the Axes object\n    return word_counts, ax\nurl = 'https://raw.githubusercontent.com/alibabacloud/alibabacloud-python-sdk-core/master/README.md'", "raw_solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(url):\n    # Download the text file from the specified URL\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Use regular expression to find words and count their frequency\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    # Get the ten most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Create a bar chart of the ten most common words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, _ in most_common_words], [count for _, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    # Return the word counts and the Axes object\n    return word_counts, ax\n\n# Example usage\nurl = 'https://raw.githubusercontent.com/alibabacloud/alibabacloud-python-sdk-core/master/README.md'\nword_counts, ax = task_func(url)\n\n# Print the word counts"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        # Check if the URL is valid\n        response = requests.head(url)\n        if response.status_code != 200:\n            return \"Error: Unable to download the file from the provided URL.\"\n\n        # Check if the URL points to a ZIP file\n        if 'application/zip' not in response.headers['Content-Type']:\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        # Download the ZIP file\n        response = requests.get(url)\n        if response.status_code != 200:\n            return \"Error: Unable to download the file from the provided URL.\"\n\n        # Save the ZIP file to the specified directory\n        zip_path = os.path.join(download_path, url.split('/')[-1])\n        with open(zip_path, 'wb') as f:\n            f.write(response.content)\n\n        # Extract the ZIP file\n        try:\n            with ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n\n        # Return the path to the directory containing the extracted contents\n        return download_path\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"", "raw_solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        # Check if the URL is valid\n        response = requests.head(url)\n        if response.status_code != 200:\n            return \"Error: Unable to download the file from the provided URL.\"\n\n        # Check if the URL points to a ZIP file\n        if 'application/zip' not in response.headers['Content-Type']:\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        # Download the ZIP file\n        response = requests.get(url)\n        if response.status_code != 200:\n            return \"Error: Unable to download the file from the provided URL.\"\n\n        # Save the ZIP file to the specified directory\n        zip_path = os.path.join(download_path, url.split('/')[-1])\n        with open(zip_path, 'wb') as f:\n            f.write(response.content)\n\n        # Extract the ZIP file\n        try:\n            with ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n\n        # Return the path to the directory containing the extracted contents\n        return download_path\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Example usage"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for unsuccessful requests\n    except requests.exceptions.HTTPError as e:\n        raise e\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if not table:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    rows = table.find_all('tr')\n    if not rows:\n        return pd.DataFrame()\n\n    headers = [header.text.strip() for header in rows[0].find_all('th')]\n    data = []\n    for row in rows[1:]:\n        cells = row.find_all(['td', 'th'])\n        data.append([cell.text.strip() for cell in cells])\n\n    return pd.DataFrame(data, columns=headers)", "raw_solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for unsuccessful requests\n    except requests.exceptions.HTTPError as e:\n        raise e\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if not table:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    rows = table.find_all('tr')\n    if not rows:\n        return pd.DataFrame()\n\n    headers = [header.text.strip() for header in rows[0].find_all('th')]\n    data = []\n    for row in rows[1:]:\n        cells = row.find_all(['td', 'th'])\n        data.append([cell.text.strip() for cell in cells])\n\n    return pd.DataFrame(data, columns=headers)\n\n# Example usage:\n# df = task_func('https://example.com/data.html', 'table_id')\n# print(df)\n\n```"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    # Create download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Create zip directory if it doesn't exist\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for non-2xx status codes\n    except requests.RequestException as e:\n        return \"Error: Network-related exception occurred\", []\n    \n    # Save the zip file to the download directory\n    zip_path = DOWNLOAD_DIR / filename\n    with open(zip_path, 'wb') as f:\n        f.write(response.content)\n    \n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except zipfile.BadZipFile as e:\n        return \"Error: File-related exception occurred\", []\n    \n    # List the files in the unzipped directory\n    try:\n        unzipped_files = [f.name for f in ZIP_DIR.iterdir() if f.is_file()]\n    except Exception as e:\n        return \"Error: File-related exception occurred\", []\n    \n    return \"Success\", unzipped_files\nurl = \"https://example.com/sample.zip\"\nfilename = \"sample.zip\"", "raw_solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\ndef task_func(url, filename):\n    # Create download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Create zip directory if it doesn't exist\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for non-2xx status codes\n    except requests.RequestException as e:\n        return \"Error: Network-related exception occurred\", []\n    \n    # Save the zip file to the download directory\n    zip_path = DOWNLOAD_DIR / filename\n    with open(zip_path, 'wb') as f:\n        f.write(response.content)\n    \n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except zipfile.BadZipFile as e:\n        return \"Error: File-related exception occurred\", []\n    \n    # List the files in the unzipped directory\n    try:\n        unzipped_files = [f.name for f in ZIP_DIR.iterdir() if f.is_file()]\n    except Exception as e:\n        return \"Error: File-related exception occurred\", []\n    \n    return \"Success\", unzipped_files\n\n# Example usage\nurl = \"https://example.com/sample.zip\"\nfilename = \"sample.zip\"\nstatus, files = task_func(url, filename)"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    # Send a GET request to the specified URL\n    response = requests.get(url)\n    # Parse the HTML content of the page using BeautifulSoup\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Find all 'a' tags in the parsed HTML\n    links = soup.find_all('a')\n    # Initialize a set to store unique absolute URLs\n    unique_links = set()\n    \n    # Iterate over each link found\n    for link in links:\n        # Extract the 'href' attribute from the link\n        href = link.get('href')\n        # Join the base URL with the href to get the absolute URL\n        absolute_url = urljoin(base_url, href)\n        # Add the absolute URL to the set of unique links\n        unique_links.add(absolute_url)\n    \n    # Write the unique absolute links to a CSV file\n    with open(csv_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        for link in unique_links:\n            writer.writerow([link])\n    \n    # Return the number of unique absolute links\n    return len(unique_links)\nurl = \"https://www.example.com\"", "raw_solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    # Send a GET request to the specified URL\n    response = requests.get(url)\n    # Parse the HTML content of the page using BeautifulSoup\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Find all 'a' tags in the parsed HTML\n    links = soup.find_all('a')\n    # Initialize a set to store unique absolute URLs\n    unique_links = set()\n    \n    # Iterate over each link found\n    for link in links:\n        # Extract the 'href' attribute from the link\n        href = link.get('href')\n        # Join the base URL with the href to get the absolute URL\n        absolute_url = urljoin(base_url, href)\n        # Add the absolute URL to the set of unique links\n        unique_links.add(absolute_url)\n    \n    # Write the unique absolute links to a CSV file\n    with open(csv_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        for link in unique_links:\n            writer.writerow([link])\n    \n    # Return the number of unique absolute links\n    return len(unique_links)\n\n# Example usage\nurl = \"https://www.example.com\"\nunique_links_count = task_func(url)"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        # Fetch the HTML content from the specified URL\n        response = requests.get(webpage_url)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        # Parse the HTML content using lxml\n        tree = html.fromstring(response.text)\n\n        # Extract the table data\n        table = tree.xpath('//table')\n        if not table:\n            return 0  # No table found\n\n        # Convert the table to a pandas DataFrame\n        df = pd.read_html(response.text)[0]\n\n        # Connect to the SQLite database\n        conn = sqlite3.connect(database_name)\n\n        # Replace the table in the database with the new data\n        df.to_sql('my_table', conn, if_exists='replace', index=False)\n\n        # Close the database connection\n        conn.close()\n\n        # Return the number of rows in the parsed HTML table\n        return len(df)\n\n    except requests.RequestException as e:\n        raise e  # Raise the exception for network issues\n    except sqlite3.DatabaseError as e:\n        raise e  # Raise the exception for database issues\nwebpage_url = \"https://example.com\"\ndatabase_name = \"my_database.db\"", "raw_solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        # Fetch the HTML content from the specified URL\n        response = requests.get(webpage_url)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        # Parse the HTML content using lxml\n        tree = html.fromstring(response.text)\n\n        # Extract the table data\n        table = tree.xpath('//table')\n        if not table:\n            return 0  # No table found\n\n        # Convert the table to a pandas DataFrame\n        df = pd.read_html(response.text)[0]\n\n        # Connect to the SQLite database\n        conn = sqlite3.connect(database_name)\n\n        # Replace the table in the database with the new data\n        df.to_sql('my_table', conn, if_exists='replace', index=False)\n\n        # Close the database connection\n        conn.close()\n\n        # Return the number of rows in the parsed HTML table\n        return len(df)\n\n    except requests.RequestException as e:\n        raise e  # Raise the exception for network issues\n    except sqlite3.DatabaseError as e:\n        raise e  # Raise the exception for database issues\n\n# Example usage\nwebpage_url = \"https://example.com\"\ndatabase_name = \"my_database.db\""}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Attempt to extract text using OCR\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image)\n        if text:\n            # Convert the extracted text to the target encoding\n            try:\n                comment = text.encode(from_encoding).decode(to_encoding)\n                return comment\n            except (UnicodeDecodeError, LookupError):\n                raise ValueError(\"Error during text encoding conversion\")\n    except Exception as e:\n        # If OCR extraction fails, try to process the image comment\n        try:\n            with open(filename, 'rb') as f:\n                image_data = f.read()\n                comment = image_data.decode(from_encoding)\n                if comment:\n                    # Convert the image comment to the target encoding\n                    try:\n                        comment = comment.encode(from_encoding).decode(to_encoding)\n                        return comment\n                    except (UnicodeDecodeError, LookupError):\n                        raise ValueError(\"Error during comment encoding conversion\")\n        except Exception as e:\n            # If both OCR extraction and comment processing fail, return an empty string\n            return \"\"", "raw_solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\nIMAGE_PATH = \"image.png\"\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Attempt to extract text using OCR\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image)\n        if text:\n            # Convert the extracted text to the target encoding\n            try:\n                comment = text.encode(from_encoding).decode(to_encoding)\n                return comment\n            except (UnicodeDecodeError, LookupError):\n                raise ValueError(\"Error during text encoding conversion\")\n    except Exception as e:\n        # If OCR extraction fails, try to process the image comment\n        try:\n            with open(filename, 'rb') as f:\n                image_data = f.read()\n                comment = image_data.decode(from_encoding)\n                if comment:\n                    # Convert the image comment to the target encoding\n                    try:\n                        comment = comment.encode(from_encoding).decode(to_encoding)\n                        return comment\n                    except (UnicodeDecodeError, LookupError):\n                        raise ValueError(\"Error during comment encoding conversion\")\n        except Exception as e:\n            # If both OCR extraction and comment processing fail, return an empty string\n            return \"\"\n\n# Example usage"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        # Send HTTP GET request with a timeout of 5 seconds\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an HTTPError for non-2xx status codes\n\n        # Get the content of the response in raw bytes\n        content = response.content\n\n        # Check if the content is empty\n        if not content:\n            return {}\n\n        # Detect the encoding of the content\n        if from_encoding is None:\n            encoding_info = chardet.detect(content)\n            from_encoding = encoding_info['encoding']\n\n        # Decode the content using the detected encoding\n        decoded_content = content.decode(from_encoding)\n\n        # Re-encode the content using the specified encoding\n        encoded_content = decoded_content.encode(to_encoding)\n\n        # Parse the re-encoded content as JSON\n        json_data = json.loads(encoded_content.decode(to_encoding))\n\n        return json_data\n\n    except requests.exceptions.RequestException as e:\n        # Handle exceptions related to the HTTP request\n        print(f\"HTTP request error: {e}\")\n        return {}\n    except ValueError as e:\n        # Handle exceptions related to JSON parsing\n        print(f\"JSON parsing error: {e}\")\n        return {}\n    except Exception as e:\n        # Handle other exceptions\n        print(f\"An error occurred: {e}\")\n        return {}", "raw_solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        # Send HTTP GET request with a timeout of 5 seconds\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an HTTPError for non-2xx status codes\n\n        # Get the content of the response in raw bytes\n        content = response.content\n\n        # Check if the content is empty\n        if not content:\n            return {}\n\n        # Detect the encoding of the content\n        if from_encoding is None:\n            encoding_info = chardet.detect(content)\n            from_encoding = encoding_info['encoding']\n\n        # Decode the content using the detected encoding\n        decoded_content = content.decode(from_encoding)\n\n        # Re-encode the content using the specified encoding\n        encoded_content = decoded_content.encode(to_encoding)\n\n        # Parse the re-encoded content as JSON\n        json_data = json.loads(encoded_content.decode(to_encoding))\n\n        return json_data\n\n    except requests.exceptions.RequestException as e:\n        # Handle exceptions related to the HTTP request\n        print(f\"HTTP request error: {e}\")\n        return {}\n    except ValueError as e:\n        # Handle exceptions related to JSON parsing\n        print(f\"JSON parsing error: {e}\")\n        return {}\n    except Exception as e:\n        # Handle other exceptions\n        print(f\"An error occurred: {e}\")\n        return {}\n\n# Example usage\nresult = task_func()"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(\"The specified CSV file is not found at the given path.\")\n    \n    # Read the CSV file\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n    \n    # Check if the specified column is present\n    if column_name not in df.columns:\n        raise ValueError(\"The specified column is not present in the CSV file.\")\n    \n    # Convert date values to datetime objects\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    \n    # Filter rows based on the current date\n    current_date = datetime.now().date()\n    df = df[df[column_name].dt.date == current_date]\n    \n    # Sort the resulting data\n    df = df.sort_values(by=column_name)\n    \n    return df\ncsv_file_path = \"path_to_your_csv_file.csv\"\ncolumn_name = \"date_column\"", "raw_solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(\"The specified CSV file is not found at the given path.\")\n    \n    # Read the CSV file\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n    \n    # Check if the specified column is present\n    if column_name not in df.columns:\n        raise ValueError(\"The specified column is not present in the CSV file.\")\n    \n    # Convert date values to datetime objects\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    \n    # Filter rows based on the current date\n    current_date = datetime.now().date()\n    df = df[df[column_name].dt.date == current_date]\n    \n    # Sort the resulting data\n    df = df.sort_values(by=column_name)\n    \n    return df\n\n# Example usage\ncsv_file_path = \"path_to_your_csv_file.csv\"\ncolumn_name = \"date_column\"\ntry:\n    result = task_func(csv_file_path, column_name)\n    print(result)\nexcept FileNotFoundError as e:\n    print(e)\nexcept ValueError as e:\n    print(e)\n\n```"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        # Wrap the client socket with SSL/TLS\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # Receive the file path from the client\n        file_path = secure_socket.recv(buffer_size).decode('utf-8')\n\n        # Check if the file exists\n        if not os.path.exists(file_path):\n            return 'File not found'\n\n        # Calculate the SHA256 hash of the file\n        with open(file_path, 'rb') as file:\n            file_hash = hashlib.sha256()\n            while chunk := file.read(buffer_size):\n                file_hash.update(chunk)\n\n        # Return the SHA256 hash\n        return file_hash.hexdigest()\n\n    except Exception as e:\n        # Return an error message in case of an exception\n        return str(e)", "raw_solution": "import ssl\nimport os\nimport hashlib\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        # Wrap the client socket with SSL/TLS\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # Receive the file path from the client\n        file_path = secure_socket.recv(buffer_size).decode('utf-8')\n\n        # Check if the file exists\n        if not os.path.exists(file_path):\n            return 'File not found'\n\n        # Calculate the SHA256 hash of the file\n        with open(file_path, 'rb') as file:\n            file_hash = hashlib.sha256()\n            while chunk := file.read(buffer_size):\n                file_hash.update(chunk)\n\n        # Return the SHA256 hash\n        return file_hash.hexdigest()\n\n    except Exception as e:\n        # Return an error message in case of an exception\n        return str(e)\n\n# Example usage:\n# Assuming client_socket is already established and connected\n# task_func(client_socket, 'path/to/cert.pem', 'path/to/key.pem')\n\n```"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(False)\n\n    # Bind the socket to the server address and port\n    server_socket.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Create a list to keep track of client sockets\n    client_sockets = []\n\n    # Create a queue to store data received from clients\n    data_queue = queue.Queue()\n\n    # Start the server\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    while datetime.now() < end_time:\n        # Check for incoming connections\n        readable, writable, exceptional = select.select(\n            [server_socket] + client_sockets, client_sockets, client_sockets\n        )\n\n        # Handle incoming connections\n        for sock in readable:\n            if sock is server_socket:\n                client_socket, client_address = sock.accept()\n                client_socket.setblocking(False)\n                client_sockets.append(client_socket)\n            else:\n                data = sock.recv(buffer_size)\n                if data:\n                    data_queue.put((sock, data))\n                else:\n                    client_sockets.remove(sock)\n                    sock.close()\n\n        # Handle data from clients\n        while not data_queue.empty():\n            sock, data = data_queue.get()\n            current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            response = data.decode() + \" \" + current_time\n            sock.sendall(response.encode())\n\n        # Handle exceptional conditions\n        for sock in exceptional:\n            client_sockets.remove(sock)\n            sock.close()\n\n    # Close the server socket\n    server_socket.close()\n\n    # Return a status message indicating the server's operation and run duration\n    return f\"Server ran for {run_duration} seconds.\"", "raw_solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(False)\n\n    # Bind the socket to the server address and port\n    server_socket.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Create a list to keep track of client sockets\n    client_sockets = []\n\n    # Create a queue to store data received from clients\n    data_queue = queue.Queue()\n\n    # Start the server\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    while datetime.now() < end_time:\n        # Check for incoming connections\n        readable, writable, exceptional = select.select(\n            [server_socket] + client_sockets, client_sockets, client_sockets\n        )\n\n        # Handle incoming connections\n        for sock in readable:\n            if sock is server_socket:\n                client_socket, client_address = sock.accept()\n                client_socket.setblocking(False)\n                client_sockets.append(client_socket)\n            else:\n                data = sock.recv(buffer_size)\n                if data:\n                    data_queue.put((sock, data))\n                else:\n                    client_sockets.remove(sock)\n                    sock.close()\n\n        # Handle data from clients\n        while not data_queue.empty():\n            sock, data = data_queue.get()\n            current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            response = data.decode() + \" \" + current_time\n            sock.sendall(response.encode())\n\n        # Handle exceptional conditions\n        for sock in exceptional:\n            client_sockets.remove(sock)\n            sock.close()\n\n    # Close the server socket\n    server_socket.close()\n\n    # Return a status message indicating the server's operation and run duration\n    return f\"Server ran for {run_duration} seconds.\"\n\n# Example usage"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    # Receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    \n    # Ask for sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n    \n    # Create an email message\n    email = EmailMessage()\n    email.set_content(message)\n    email['From'] = sender_email\n    email['To'] = recipient_email\n    email['Subject'] = 'Message from client'\n    \n    # Connect to the SMTP server and send the email\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, sender_password)\n        server.send_message(email)\n    \n    # Close the client socket\n    client_socket.close()", "raw_solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\ndef task_func(client_socket):\n    # Receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    \n    # Ask for sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n    \n    # Create an email message\n    email = EmailMessage()\n    email.set_content(message)\n    email['From'] = sender_email\n    email['To'] = recipient_email\n    email['Subject'] = 'Message from client'\n    \n    # Connect to the SMTP server and send the email\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, sender_password)\n        server.send_message(email)\n    \n    # Close the client socket\n    client_socket.close()\n\n# Example usage\n# Assuming client_socket is already connected and ready to receive data\n# task_func(client_socket)\n\n```"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the file has a header\n        if 'Text' not in df.columns:\n            df.columns = ['Text']\n        \n        # Concatenate all text data into a single string\n        text_data = ' '.join(df['Text'].dropna())\n        \n        # Create a CountVectorizer object with the predefined stopwords\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        \n        # Fit and transform the text data\n        word_counts = vectorizer.fit_transform([text_data])\n        \n        # Get the feature names (words)\n        feature_names = vectorizer.get_feature_names_out()\n        \n        # Get the counts of each word\n        counts = word_counts.toarray()[0]\n        \n        # Create a dictionary of word counts\n        word_count_dict = dict(zip(feature_names, counts))\n        \n        # Sort the dictionary by word count in descending order\n        sorted_word_count_dict = dict(sorted(word_count_dict.items(), key=lambda item: item[1], reverse=True))\n        \n        # Get the top ten most common words\n        top_ten_words = list(sorted_word_count_dict.keys())[:10]\n        top_ten_counts = [sorted_word_count_dict[word] for word in top_ten_words]\n        \n        # Create a bar chart of the top ten words\n        fig, ax = plt.subplots()\n        ax.bar(top_ten_words, top_ten_counts)\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Top Ten Most Common Words')\n        \n        # If save_path is provided, save the plot to the specified path\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return ax\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None", "raw_solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the file has a header\n        if 'Text' not in df.columns:\n            df.columns = ['Text']\n        \n        # Concatenate all text data into a single string\n        text_data = ' '.join(df['Text'].dropna())\n        \n        # Create a CountVectorizer object with the predefined stopwords\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        \n        # Fit and transform the text data\n        word_counts = vectorizer.fit_transform([text_data])\n        \n        # Get the feature names (words)\n        feature_names = vectorizer.get_feature_names_out()\n        \n        # Get the counts of each word\n        counts = word_counts.toarray()[0]\n        \n        # Create a dictionary of word counts\n        word_count_dict = dict(zip(feature_names, counts))\n        \n        # Sort the dictionary by word count in descending order\n        sorted_word_count_dict = dict(sorted(word_count_dict.items(), key=lambda item: item[1], reverse=True))\n        \n        # Get the top ten most common words\n        top_ten_words = list(sorted_word_count_dict.keys())[:10]\n        top_ten_counts = [sorted_word_count_dict[word] for word in top_ten_words]\n        \n        # Create a bar chart of the top ten words\n        fig, ax = plt.subplots()\n        ax.bar(top_ten_words, top_ten_counts)\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Top Ten Most Common Words')\n        \n        # If save_path is provided, save the plot to the specified path\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return ax\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n# Example usage\n# task_func('path_to_your_file.csv', 'path_to_save_plot.png')\n\n```"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n    # Define default lists if not provided\n    default_animals = ['cat', 'dog', 'bird']\n    default_foods = ['fish', 'meat', 'grain']\n    \n    # Use default lists if provided lists are empty or None\n    if animals is None or not animals:\n        animals = default_animals\n    if foods is None or not foods:\n        foods = default_foods\n    \n    # Generate all combinations of animals and foods\n    combinations = list(itertools.product(animals, foods))\n    \n    # Shuffle the combinations to randomize the DataFrame layout\n    np.random.shuffle(combinations)\n    \n    # Create a DataFrame from the shuffled combinations\n    df = pd.DataFrame(combinations, columns=['animal:food'])\n    \n    return df", "raw_solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\ndef task_func(animals=None, foods=None):\n    # Define default lists if not provided\n    default_animals = ['cat', 'dog', 'bird']\n    default_foods = ['fish', 'meat', 'grain']\n    \n    # Use default lists if provided lists are empty or None\n    if animals is None or not animals:\n        animals = default_animals\n    if foods is None or not foods:\n        foods = default_foods\n    \n    # Generate all combinations of animals and foods\n    combinations = list(itertools.product(animals, foods))\n    \n    # Shuffle the combinations to randomize the DataFrame layout\n    np.random.shuffle(combinations)\n    \n    # Create a DataFrame from the shuffled combinations\n    df = pd.DataFrame(combinations, columns=['animal:food'])\n    \n    return df\n\n# Example usage:\n# df = task_func(animals=['cat', 'dog'], foods=['fish', 'meat'])\n# print(df)\n\n```"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n\n    timezone = pytz.timezone(timezone)\n    timestamps = [datetime.strptime(ts, '%Y-%m-%d %H:%M:%S') for ts in time_strings]\n    timestamps = [ts.astimezone(timezone) for ts in timestamps]\n\n    time_diffs = [abs((timestamps[i] - timestamps[i-1]).total_seconds()) for i in range(1, len(timestamps))]\n\n    if not time_diffs:\n        return 0.0\n\n    return np.mean(time_diffs)", "raw_solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n\n    timezone = pytz.timezone(timezone)\n    timestamps = [datetime.strptime(ts, '%Y-%m-%d %H:%M:%S') for ts in time_strings]\n    timestamps = [ts.astimezone(timezone) for ts in timestamps]\n\n    time_diffs = [abs((timestamps[i] - timestamps[i-1]).total_seconds()) for i in range(1, len(timestamps))]\n\n    if not time_diffs:\n        return 0.0\n\n    return np.mean(time_diffs)\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation using regular expression\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split text into words\n    words = text.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10_words = word_counts.most_common(10)\n    \n    # Create a bar chart of the top 10 words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in top_10_words], [count for word, count in top_10_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n    ax.set_title('Top 10 Most Common Words')\n    \n    return top_10_words, ax\ntext = \"Hello, world! This is a test. This is only a test.\"", "raw_solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation using regular expression\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split text into words\n    words = text.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10_words = word_counts.most_common(10)\n    \n    # Create a bar chart of the top 10 words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in top_10_words], [count for word, count in top_10_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n    ax.set_title('Top 10 Most Common Words')\n    \n    return top_10_words, ax\n\n# Example usage\ntext = \"Hello, world! This is a test. This is only a test.\"\ntop_10_words, ax = task_func(text)"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Regular expression to find URLs in the string\n    url_pattern = re.compile(r'https?://\\S+')\n    urls = url_pattern.findall(myString)\n    \n    if not urls:\n        return \"No valid URL found in the provided string.\"\n    \n    for url in urls:\n        try:\n            # Fetch the content of the URL\n            response = requests.get(url)\n            response.raise_for_status()  # Raise an exception for HTTP errors\n            \n            # Parse the HTML content\n            soup = BeautifulSoup(response.text, 'html.parser')\n            \n            # Find the title tag\n            title_tag = soup.find('title')\n            if title_tag:\n                return title_tag.text.strip()\n            else:\n                return \"No title tag found in the webpage.\"\n        except requests.RequestException as e:\n            return f\"Unable to fetch the content of the URL: {url}\"\n        except Exception as e:\n            return f\"An error occurred: {e}\"", "raw_solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef task_func(myString):\n    # Regular expression to find URLs in the string\n    url_pattern = re.compile(r'https?://\\S+')\n    urls = url_pattern.findall(myString)\n    \n    if not urls:\n        return \"No valid URL found in the provided string.\"\n    \n    for url in urls:\n        try:\n            # Fetch the content of the URL\n            response = requests.get(url)\n            response.raise_for_status()  # Raise an exception for HTTP errors\n            \n            # Parse the HTML content\n            soup = BeautifulSoup(response.text, 'html.parser')\n            \n            # Find the title tag\n            title_tag = soup.find('title')\n            if title_tag:\n                return title_tag.text.strip()\n            else:\n                return \"No title tag found in the webpage.\"\n        except requests.RequestException as e:\n            return f\"Unable to fetch the content of the URL: {url}\"\n        except Exception as e:\n            return f\"An error occurred: {e}\"\n\n# Example usage"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON data\n    data = json.loads(json_data)\n    \n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    \n    if not url:\n        raise ValueError(f\"Key '{unknown_key}' not found in JSON data\")\n    \n    # Download the file from the URL\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to download file from {url}\")\n    \n    # Create a timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # Save the file in the specified directory or in the current working directory by default\n    if save_dir:\n        if not os.path.exists(save_dir):\n            os.makedirs(save_dir)\n        file_path = os.path.join(save_dir, filename)\n    else:\n        file_path = filename\n    \n    # Write the content to the file\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\n    \n    # Return the absolute path of the downloaded file\n    return os.path.abspath(file_path)\njson_data = '{\"url\": \"https://example.com/file.txt\", \"unknown_key\": \"example\"}'\nunknown_key = \"example\"\nsave_dir = \"downloads\"", "raw_solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON data\n    data = json.loads(json_data)\n    \n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    \n    if not url:\n        raise ValueError(f\"Key '{unknown_key}' not found in JSON data\")\n    \n    # Download the file from the URL\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to download file from {url}\")\n    \n    # Create a timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # Save the file in the specified directory or in the current working directory by default\n    if save_dir:\n        if not os.path.exists(save_dir):\n            os.makedirs(save_dir)\n        file_path = os.path.join(save_dir, filename)\n    else:\n        file_path = filename\n    \n    # Write the content to the file\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\n    \n    # Return the absolute path of the downloaded file\n    return os.path.abspath(file_path)\n\n# Example usage\njson_data = '{\"url\": \"https://example.com/file.txt\", \"unknown_key\": \"example\"}'\nunknown_key = \"example\"\nsave_dir = \"downloads\""}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    # Check if the URL is local or remote\n    if url.startswith('http'):\n        # Fetch the content from the URL\n        response = requests.get(url)\n        content = response.text\n    else:\n        # Read the content from the local file\n        with open(url, 'r') as file:\n            content = file.read()\n\n    # Use regular expression to find phone numbers\n    phone_numbers = re.findall(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', content)\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as json_file:\n        json.dump(phone_numbers, json_file)\n\n    # Return the list of phone numbers\n    return phone_numbers\nurl = 'https://example.com'\noutput_path = 'phone_numbers.json'", "raw_solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    # Check if the URL is local or remote\n    if url.startswith('http'):\n        # Fetch the content from the URL\n        response = requests.get(url)\n        content = response.text\n    else:\n        # Read the content from the local file\n        with open(url, 'r') as file:\n            content = file.read()\n\n    # Use regular expression to find phone numbers\n    phone_numbers = re.findall(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', content)\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as json_file:\n        json.dump(phone_numbers, json_file)\n\n    # Return the list of phone numbers\n    return phone_numbers\n\n# Example usage\nurl = 'https://example.com'  # Replace with the actual URL or local file path\noutput_path = 'phone_numbers.json'  # Replace with the desired output file path\nphone_numbers = task_func(url, output_path)"}
