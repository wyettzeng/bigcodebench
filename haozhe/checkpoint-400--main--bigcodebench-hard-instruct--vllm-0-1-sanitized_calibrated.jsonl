{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\nfrom typing import List\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test') -> List[str]:\n    filenames = []\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n        ftp.cwd(ftp_dir)\n    except ftplib.all_errors as e:\n        if isinstance(e, ftplib.error_perm):\n            print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        else:\n            print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        return filenames\n    except Exception as e:\n        print(f\"An unexpected error occurred: {str(e)}\")\n        return filenames\n\n    try:\n        filenames = ftp.nlst()\n    except ftplib.all_errors as e:\n        print(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n        return filenames\n    except Exception as e:\n        print(f\"An unexpected error occurred: {str(e)}\")\n        return filenames\n\n    for filename in filenames:\n        try:\n            subprocess.run(['wget', f'ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{filename}'], check=True)\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to download file {filename}: {str(e)}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {str(e)}\")\n\n    return filenames", "raw_solution": "import subprocess\nimport ftplib\nimport os\nfrom typing import List\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test') -> List[str]:\n    filenames = []\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n        ftp.cwd(ftp_dir)\n    except ftplib.all_errors as e:\n        if isinstance(e, ftplib.error_perm):\n            print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        else:\n            print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        return filenames\n    except Exception as e:\n        print(f\"An unexpected error occurred: {str(e)}\")\n        return filenames\n\n    try:\n        filenames = ftp.nlst()\n    except ftplib.all_errors as e:\n        print(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n        return filenames\n    except Exception as e:\n        print(f\"An unexpected error occurred: {str(e)}\")\n        return filenames\n\n    for filename in filenames:\n        try:\n            subprocess.run(['wget', f'ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{filename}'], check=True)\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to download file {filename}: {str(e)}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {str(e)}\")\n\n    return filenames\n\n# Test the function\nfilenames = task_func()"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(\"The commands file does not exist.\")\n    \n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n    \n    output_files = []\n    with open(commands_file_path, mode='r') as file:\n        reader = csv.reader(file)\n        for index, row in enumerate(reader):\n            command = row[0]\n            output_file_path = os.path.join(output_dir_path, f'command_{index}_output.txt')\n            output_files.append(output_file_path)\n            try:\n                with open(output_file_path, 'w') as output_file:\n                    result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                    output_file.write(result.stdout.decode())\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(f\"Error: {e.stderr.decode()}\\nExit code: {e.returncode}\")\n    \n    return output_files", "raw_solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(\"The commands file does not exist.\")\n    \n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n    \n    output_files = []\n    with open(commands_file_path, mode='r') as file:\n        reader = csv.reader(file)\n        for index, row in enumerate(reader):\n            command = row[0]\n            output_file_path = os.path.join(output_dir_path, f'command_{index}_output.txt')\n            output_files.append(output_file_path)\n            try:\n                with open(output_file_path, 'w') as output_file:\n                    result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                    output_file.write(result.stdout.decode())\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(f\"Error: {e.stderr.decode()}\\nExit code: {e.returncode}\")\n    \n    return output_files\n\n```"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            # Process is found, restart it\n            proc.kill()\n            time.sleep(1)  # Wait for the process to terminate\n            subprocess.Popen(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # Process is not found, start it\n    subprocess.Popen(process_name)\n    return f\"Process not found. Starting {process_name}.\"", "raw_solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            # Process is found, restart it\n            proc.kill()\n            time.sleep(1)  # Wait for the process to terminate\n            subprocess.Popen(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # Process is not found, start it\n    subprocess.Popen(process_name)\n    return f\"Process not found. Starting {process_name}.\"\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    try:\n        # Check if the directory exists\n        if not os.path.exists(directory):\n            raise FileNotFoundError(\"Directory does not exist\")\n        \n        # List all files in the directory (not including subdirectories)\n        files = glob.glob(os.path.join(directory, '*'))\n        files = [f for f in files if os.path.isfile(f)]\n        \n        # If no files are found, return None\n        if not files:\n            return None\n        \n        # Create a zip file named 'files.zip' in the same directory\n        zip_path = os.path.join(directory, 'files.zip')\n        with zipfile.ZipFile(zip_path, 'w') as zipf:\n            for file in files:\n                zipf.write(file, os.path.basename(file))\n        \n        return zip_path\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None", "raw_solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    try:\n        # Check if the directory exists\n        if not os.path.exists(directory):\n            raise FileNotFoundError(\"Directory does not exist\")\n        \n        # List all files in the directory (not including subdirectories)\n        files = glob.glob(os.path.join(directory, '*'))\n        files = [f for f in files if os.path.isfile(f)]\n        \n        # If no files are found, return None\n        if not files:\n            return None\n        \n        # Create a zip file named 'files.zip' in the same directory\n        zip_path = os.path.join(directory, 'files.zip')\n        with zipfile.ZipFile(zip_path, 'w') as zipf:\n            for file in files:\n                zipf.write(file, os.path.basename(file))\n        \n        return zip_path\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n# Example usage:\n# task_func('/path/to/directory')\n\n```"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs from the text\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Check if there are any words available\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(words))\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n    \n    return wordcloud\ntext = \"Hello, this is a sample text with a URL: https://www.example.com and some words.\"", "raw_solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Remove URLs from the text\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Check if there are any words available\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(words))\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n    \n    return wordcloud\n\n# Test the function with a sample text\ntext = \"Hello, this is a sample text with a URL: https://www.example.com and some words.\"\nwordcloud = task_func(text)\n\n```"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n    # Initialize the RandomForestClassifier\n    clf = RandomForestClassifier(random_state=42)\n    \n    # Fit the classifier to the dataframe\n    clf.fit(df.drop(target_column, axis=1), df[target_column])\n    \n    # Get the feature importances\n    importances = clf.feature_importances_\n    \n    # Create a dataframe to store the feature importances\n    feature_importances = pd.DataFrame({'Feature': df.drop(target_column, axis=1).columns, 'Importance': importances})\n    \n    # Sort the feature importances in descending order\n    feature_importances = feature_importances.sort_values(by='Importance', ascending=False)\n    \n    # Plot the bar plot of feature importance\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=feature_importances)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n    \n    return clf, plt.gca()\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4, 5],\n    'B': [5, 4, 3, 2, 1],\n    'C': [2, 3, 4, 5, 6],\n    'target': [0, 1, 0, 1, 0]\n})", "raw_solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, target_column):\n    # Initialize the RandomForestClassifier\n    clf = RandomForestClassifier(random_state=42)\n    \n    # Fit the classifier to the dataframe\n    clf.fit(df.drop(target_column, axis=1), df[target_column])\n    \n    # Get the feature importances\n    importances = clf.feature_importances_\n    \n    # Create a dataframe to store the feature importances\n    feature_importances = pd.DataFrame({'Feature': df.drop(target_column, axis=1).columns, 'Importance': importances})\n    \n    # Sort the feature importances in descending order\n    feature_importances = feature_importances.sort_values(by='Importance', ascending=False)\n    \n    # Plot the bar plot of feature importance\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=feature_importances)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n    \n    return clf, plt.gca()\n\n# Test the function with a sample dataframe\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4, 5],\n    'B': [5, 4, 3, 2, 1],\n    'C': [2, 3, 4, 5, 6],\n    'target': [0, 1, 0, 1, 0]\n})\n\nclf, ax = task_func(df, 'target')\n\n```"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.secret_key = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n    class User(UserMixin):\n        def __init__(self, id, username, password):\n            self.id = id\n            self.username = username\n            self.password = password\n    users = {'user1': User('1', 'user1', generate_password_hash('password1'))}\n    @login_manager.user_loader\n    def load_user(user_id):\n        return users.get(user_id)\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = users.get(form.username.data)\n            if user and check_password_hash(user.password, form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                return 'Invalid username or password'\n        return render_template('login.html', form=form)\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('index'))\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return f'Logged in as: {current_user.username}'\n    return app", "raw_solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.secret_key = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n    class User(UserMixin):\n        def __init__(self, id, username, password):\n            self.id = id\n            self.username = username\n            self.password = password\n    users = {'user1': User('1', 'user1', generate_password_hash('password1'))}\n    @login_manager.user_loader\n    def load_user(user_id):\n        return users.get(user_id)\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = users.get(form.username.data)\n            if user and check_password_hash(user.password, form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                return 'Invalid username or password'\n        return render_template('login.html', form=form)\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('index'))\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return f'Logged in as: {current_user.username}'\n    return app\n# Example usage:\n# app = task_func('your_secret_key', 'path_to_template_folder')\n# app.run(debug=True)\n```"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nimport importlib\nimport importlib.util", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nimport importlib\nimport importlib.util\n\n# Check if numpy is available, if not, import it\nspec = importlib.util.find_spec(\"numpy\")\nif spec is None:\n    import importlib.util\n    spec = importlib.util.find_spec(\"numpy\")\n    if spec is None:\n        import subprocess\n        import sys\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"numpy\"])\n        import importlib\n        import importlib.util\n        spec = importlib.util.find_spec(\"numpy\")\n    importlib.import_module(\"numpy\")\n\n# Check if matplotlib is available, if not, import it\nspec = importlib.util.find_spec(\"matplotlib\")\nif spec is None:\n    import importlib.util\n    spec = importlib.util.find_spec(\"matplotlib\")\n    if spec is None:\n        import subprocess\n        import sys\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"matplotlib\"])\n        import importlib\n        import importlib.util\n        spec = importlib.util.find_spec(\"matplotlib\")\n    importlib.import_module(\"matplotlib\")\n\n# Check if scipy is available, if not, import it\nspec = importlib.util.find_spec(\"scipy\")\nif spec is None:\n    import importlib.util\n    spec = importlib.util.find_spec(\"scipy\")\n    if spec is None:\n        import subprocess\n        import sys\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"scipy\"])\n        import importlib\n        import importlib.util\n        spec = importlib.util.find_spec(\"scipy\")\n    importlib.import_module(\"scipy\")\n\n# Check if sklearn is available, if not, import it\nspec = importlib.util.find_spec(\"sklearn\")\nif spec is None:\n    import importlib.util\n    spec = importlib.util.find_spec(\"sklearn\")\n    if spec is None:\n        import subprocess\n        import sys\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"scikit-learn\"])\n        import importlib\n        import importlib.util\n        spec = importlib.util.find_spec(\"sklearn\")\n    import importlib\n    import importlib.util\n    import importlib\n    import importlib.util\n    import importlib\n    import importlib.util\n    import importlib\n    import importlib.util\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib\n    import importlib"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1.\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=200, c='red')\n    \n    return labels, ax", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1.\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=200, c='red')\n    \n    return labels, ax\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    transformed_df = pd.DataFrame(transformed_data, columns=[f'PC{i+1}' for i in range(n_components)])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_df['PC1'], transformed_df['PC2'], alpha=0.5)\n    \n    return transformed_df, ax", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    transformed_df = pd.DataFrame(transformed_data, columns=[f'PC{i+1}' for i in range(n_components)])\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_df['PC1'], transformed_df['PC2'], alpha=0.5)\n    \n    return transformed_df, ax\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = iris.target\n    \n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n    \n    # Create a pair plot\n    pair_plot = sns.pairplot(iris_df, hue='species')\n    \n    # Set the title of the plot\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot')\n    \n    # Return the matplotlib Figure object\n    return pair_plot.fig", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = iris.target\n    \n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n    \n    # Create a pair plot\n    pair_plot = sns.pairplot(iris_df, hue='species')\n    \n    # Set the title of the plot\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot')\n    \n    # Return the matplotlib Figure object\n    return pair_plot.fig\n\n# Test the function\nfig = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        raise ImportError(\"pandas is not installed. Please install pandas to use this function.\")\n\n    random.seed(seed)\n    import matplotlib\n    matplotlib.rcParams['font.family'] = 'Arial'\n\n    # Generate random time series data\n    dates = [datetime(2023, 1, 1) + pd.Timedelta(days=i) for i in range(30)]\n    from pandas import to_datetime\n    import pandas as pd\n    dates = pd.to_datetime(dates)\n    import pandas as pd\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        raise ImportError(\"pandas is not installed. Please install pandas to use this function.\")\n\n    random.seed(seed)\n    import matplotlib\n    matplotlib.rcParams['font.family'] = 'Arial'\n\n    # Generate random time series data\n    dates = [datetime(2023, 1, 1) + pd.Timedelta(days=i) for i in range(30)]\n    from pandas import to_datetime\n    import pandas as pd\n    dates = pd.to_datetime(dates)\n    import pandas as pd\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read_sql_query\n    from pandas import read_sql_table\n    from pandas import read_table\n    from pandas import to_datetime\n    from pandas import Series\n    from pandas import Timestamp\n    from pandas import date_range\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import read_csv\n    from pandas import read_excel\n    from pandas import read_json\n    from pandas import read_html\n    from pandas import read_sql\n    from pandas import read"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Load the Boston Housing dataset\n        data = pd.read_csv(data_url, sep=\"\\s+\", header=None)\n        data.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n        \n        # Calculate the correlation matrix\n        corr_matrix = data.corr()\n        \n        # Create a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        \n        # Return the Axes object\n        return plt.gca()\n    except Exception as e:\n        raise ValueError(\"An error occurred in generating or saving the plot: \" + str(e))", "raw_solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Load the Boston Housing dataset\n        data = pd.read_csv(data_url, sep=\"\\s+\", header=None)\n        data.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n        \n        # Calculate the correlation matrix\n        corr_matrix = data.corr()\n        \n        # Create a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        \n        # Return the Axes object\n        return plt.gca()\n    except Exception as e:\n        raise ValueError(\"An error occurred in generating or saving the plot: \" + str(e))\n\n# Example usage\n# Uncomment the following line to save the plot to a file\n# task_func().figure.savefig(\"boston_housing_heatmap.png\")\n\n```"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame\")\n    \n    # Check if 'df' contains the required column 'value'\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame 'df' must contain a column named 'value'\")\n    \n    # Check if 'freq' is a valid frequency string\n    valid_freqs = ['D', 'W', 'M', 'Q', 'A']\n    if freq not in valid_freqs:\n        raise ValueError(\"Invalid frequency string. Valid options are: 'D', 'W', 'M', 'Q', 'A'\")\n    \n    # Check if 'decomposition_model' is either 'additive' or 'multiplicative'\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid decomposition model. Valid options are: 'additive', 'multiplicative'\")\n    \n    # Perform the decomposition\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, period=12 if freq == 'M' else 52 if freq == 'W' else 365 if freq == 'D' else 1)\n    \n    # Plot the decomposition\n    fig, axes = plt.subplots(4, 1, figsize=(10, 8))\n    decomposition.plot(ax=axes)\n    \n    return decomposition, axes", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame\")\n    \n    # Check if 'df' contains the required column 'value'\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame 'df' must contain a column named 'value'\")\n    \n    # Check if 'freq' is a valid frequency string\n    valid_freqs = ['D', 'W', 'M', 'Q', 'A']\n    if freq not in valid_freqs:\n        raise ValueError(\"Invalid frequency string. Valid options are: 'D', 'W', 'M', 'Q', 'A'\")\n    \n    # Check if 'decomposition_model' is either 'additive' or 'multiplicative'\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid decomposition model. Valid options are: 'additive', 'multiplicative'\")\n    \n    # Perform the decomposition\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, period=12 if freq == 'M' else 52 if freq == 'W' else 365 if freq == 'D' else 1)\n    \n    # Plot the decomposition\n    fig, axes = plt.subplots(4, 1, figsize=(10, 8))\n    decomposition.plot(ax=axes)\n    \n    return decomposition, axes\n\n# Example usage:\n# df = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]})\n# decomposition, axes = task_func(df, freq='M', decomposition_model='additive')\n\n```"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than or equal to end_date\")\n    random_seed(seed)\n    date_range = [start_date + timedelta(days=x) for x in range((end_date - start_date).days + 1)]\n    random_dates = [date_range[randint(0, len(date_range) - 1)] for _ in range(len(date_range))]\n    return pd.Series(random_dates)", "raw_solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than or equal to end_date\")\n    random_seed(seed)\n    date_range = [start_date + timedelta(days=x) for x in range((end_date - start_date).days + 1)]\n    random_dates = [date_range[randint(0, len(date_range) - 1)] for _ in range(len(date_range))]\n    return pd.Series(random_dates)\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not os.path.exists(file_dir):\n        import os\n        os.system('pip install pandas')\n        from pandas import DataFrame\n        raise FileNotFoundError(\"file_dir does not exist\")\n    from pandas import DataFrame\n    import pandas as pd\n    import os\n    from pandas import concat\n    os.system('pip install pandas')\n    from pandas import DataFrame\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat", "raw_solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not os.path.exists(file_dir):\n        import os\n        os.system('pip install pandas')\n        from pandas import DataFrame\n        raise FileNotFoundError(\"file_dir does not exist\")\n    from pandas import DataFrame\n    import pandas as pd\n    import os\n    from pandas import concat\n    os.system('pip install pandas')\n    from pandas import DataFrame\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import os\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas as pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas as pd\n    from pandas import concat\n    from pandas import read_csv\n    import pandas"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(x, (int, float)) for x in my_list):\n        raise ValueError(\"my_list must contain only numeric elements (int or float)\")\n    \n    my_list.append(12)\n    total = sum(my_list)\n    random_seed(seed)\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    \n    start_time = time.time()\n    # Generate random numbers and measure time\n    end_time = time.time()\n    time_taken = end_time - start_time\n    \n    # Plot histogram\n    plt.hist(random_numbers, bins=range(1, 101), edgecolor='black')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Numbers')\n    plt.show()\n    \n    return time_taken, plt.gca()", "raw_solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(x, (int, float)) for x in my_list):\n        raise ValueError(\"my_list must contain only numeric elements (int or float)\")\n    \n    my_list.append(12)\n    total = sum(my_list)\n    random_seed(seed)\n    random_numbers = [randint(1, 100) for _ in range(min(total, size))]\n    \n    start_time = time.time()\n    # Generate random numbers and measure time\n    end_time = time.time()\n    time_taken = end_time - start_time\n    \n    # Plot histogram\n    plt.hist(random_numbers, bins=range(1, 101), edgecolor='black')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Numbers')\n    plt.show()\n    \n    return time_taken, plt.gca()\n\n```"}
{"task_id": "BigCodeBench/129", "solution": "from bs4 import BeautifulSoup\nimport pandas as pd\nimport requests\nimport pandas as pd\nfrom io import StringIO\nimport unittest\ndef task_func(url='http://example.com'):\n    from bs4 import BeautifulSoup\n    import pandas as pd\n    import requests\n    from requests.exceptions import ConnectionError, HTTPError\n\n    # Import necessary libraries\n    try:\n        from bs4 import BeautifulSoup\n        import pandas as pd\n        import requests\n    except ImportError:\n        raise ImportError(\"Please install the required libraries: requests and beautifulsoup4\")\n\n    # Function to scrape the first table from a web page and extract data into a Pandas DataFrame\n    def scrape_table(url):\n        try:\n            # Send a GET request to the URL\n            response = requests.get(url)\n            response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        except ConnectionError:\n            raise ConnectionError(\"Failed to connect to the URL\")\n        except HTTPError:\n            raise HTTPError(\"HTTP request failed with status code: {}\".format(response.status_code))\n\n        # Parse the HTML content of the page\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        # Find the first table on the page\n        table = soup.find('table')\n        if not table:\n            raise ValueError(\"No table data found on the page\")\n\n        # Extract the headers from the table\n        headers = [header.text.strip() for header in table.find_all('th')]\n\n        # Extract the data from the table\n        data = []\n        for row in table.find_all('tr'):\n            row_data = [cell.text.strip() for cell in row.find_all(['td', 'th'])]\n            data.append(row_data)\n\n        # Create a DataFrame from the extracted data\n        df = pd.DataFrame(data, columns=headers)\n\n        return df\n\n    return scrape_table(url)", "raw_solution": "from bs4 import BeautifulSoup\nimport pandas as pd\nimport requests\n\ndef task_func(url='http://example.com'):\n    from bs4 import BeautifulSoup\n    import pandas as pd\n    import requests\n    from requests.exceptions import ConnectionError, HTTPError\n\n    # Import necessary libraries\n    try:\n        from bs4 import BeautifulSoup\n        import pandas as pd\n        import requests\n    except ImportError:\n        raise ImportError(\"Please install the required libraries: requests and beautifulsoup4\")\n\n    # Function to scrape the first table from a web page and extract data into a Pandas DataFrame\n    def scrape_table(url):\n        try:\n            # Send a GET request to the URL\n            response = requests.get(url)\n            response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        except ConnectionError:\n            raise ConnectionError(\"Failed to connect to the URL\")\n        except HTTPError:\n            raise HTTPError(\"HTTP request failed with status code: {}\".format(response.status_code))\n\n        # Parse the HTML content of the page\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        # Find the first table on the page\n        table = soup.find('table')\n        if not table:\n            raise ValueError(\"No table data found on the page\")\n\n        # Extract the headers from the table\n        headers = [header.text.strip() for header in table.find_all('th')]\n\n        # Extract the data from the table\n        data = []\n        for row in table.find_all('tr'):\n            row_data = [cell.text.strip() for cell in row.find_all(['td', 'th'])]\n            data.append(row_data)\n\n        # Create a DataFrame from the extracted data\n        df = pd.DataFrame(data, columns=headers)\n\n        return df\n\n    return scrape_table(url)\n\n# Test the function with the provided URL\nimport pandas as pd\nfrom io import StringIO\n\n# Test the function with the provided URL\nimport unittest\n\nclass TestScrapeTable(unittest.TestCase):\n    def test_function(self):\n        # Test with a URL that contains a table\n        url = 'http://example.com'\n        df = task_func(url)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(len(df) > 0)\n\n        # Test with a URL that does not contain a table\n        url = 'http://example.com/nonexistent'\n        with self.assertRaises(ValueError):\n            task_func(url)\n\n        # Test with a URL that raises a ConnectionError\n        url = 'http://nonexistenturl.com'\n        with self.assertRaises(ConnectionError):\n            task_func(url)\n\n        # Test with a URL that raises an HTTPError\n        url = 'http://example.com/404'\n        with self.assertRaises(HTTPError):\n            task_func(url)\n\n# Run the tests"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input is not a non-empty DataFrame\")\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if not numeric_cols.size:\n        raise ValueError(\"No numeric columns in the DataFrame\")\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=30, figsize=(8, 6))\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    return axes", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input is not a non-empty DataFrame\")\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if not numeric_cols.size:\n        raise ValueError(\"No numeric columns in the DataFrame\")\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=30, figsize=(8, 6))\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    return axes\n\n```"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    ip_network = IPv4Network(ip_range)\n    ip_addresses = [str(ip) for ip in ip_network.hosts()]\n    results = {}\n\n    def check_port(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((ip, port))\n            results[ip] = result == 0\n            sock.close()\n        except Exception as e:\n            results[ip] = False\n\n    threads = []\n    for ip in ip_addresses:\n        thread = Thread(target=check_port, args=(ip,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return results", "raw_solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    ip_network = IPv4Network(ip_range)\n    ip_addresses = [str(ip) for ip in ip_network.hosts()]\n    results = {}\n\n    def check_port(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((ip, port))\n            results[ip] = result == 0\n            sock.close()\n        except Exception as e:\n            results[ip] = False\n\n    threads = []\n    for ip in ip_addresses:\n        thread = Thread(target=check_port, args=(ip,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return results\n\n```"}
{"task_id": "BigCodeBench/161", "solution": "import re", "raw_solution": "import re\nimport pandas as task_func\nfrom task_func import task_file\ntask_file.task_func = task_file\nfrom pandas import task_file\ntask_file.task_file.task_func = task_file.task_func\nfrom task_file.task_func import pandas\ntask_file.task_func.pandas = task_file.task_file\nfrom task_file.task_file.pandas import task_file\ntask_file.task_file.pandas.task_file = task_file\nfrom task_file.task_file.pandas.task_file import task_file\ntask_file.task_file.pandas.task_file.task_file = task_file\nfrom task_file.task_file.pandas.task_file.task_file import task_file\nfrom task_file.task_file.pandas import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file.task_file import task_file\nfrom task_file.task_file import task_file\nfrom task_file.task_file import task_file\nfrom task_file.task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task_file import task_file\nfrom task"}
{"task_id": "BigCodeBench/162", "solution": "from r import *\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__", "raw_solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as r from r import *\nr.__path__ = r.__rmod__ = r.__getattr__ = r.__setattr__ = r.__import__\nr = r.__import__(r.__name__, globals(), {}, r.__name__)\nfrom r import *\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__)\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__)\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__)\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__)\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__)\nfrom r import __import__\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__, r.__import__.__module__)\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__, r.__import__.__module__.__name__)\nfrom r import __import__\nr.__import__(r.__name__, globals(), r.__dict__, r.__name__, r.__import__.__module__.__name__.__import__)\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom r import __import__\nfrom"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\ndef task_func(df):\n    import nltk\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords", "raw_solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\nnltk.download('punkt', quiet=True)\n\ndef task_func(df):\n    import nltk\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', quiet=True)\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from string import punctuation\n    import re\n    from nltk.corpus import stopwords\n    nltk.download('stopwords', from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    import nltk\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    import re\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    import nltk\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    import re\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from collections import Counter\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n    # Preprocess the text data\n    def preprocess(text):\n        # Remove numbers\n        text = re.sub(r'\\d+', '', text)\n        # Remove punctuation\n        text = re.sub(r'[^\\w\\s]', '', text)\n        # Convert to lowercase\n        text = text.lower()\n        # Split into words\n        words = text.split()\n        # Remove stopwords\n        words = [word for word in words if word not in STOPWORDS]\n        return words\n\n    # Apply preprocessing to the specified column\n    dataframe[text_column] = dataframe[text_column].apply(preprocess)\n\n    # Convert the preprocessed text data into a DataFrame\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe[text_column].apply(lambda x: ' '.join(x)))\n    result_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return result_df", "raw_solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\ndef task_func(dataframe, text_column):\n    # Preprocess the text data\n    def preprocess(text):\n        # Remove numbers\n        text = re.sub(r'\\d+', '', text)\n        # Remove punctuation\n        text = re.sub(r'[^\\w\\s]', '', text)\n        # Convert to lowercase\n        text = text.lower()\n        # Split into words\n        words = text.split()\n        # Remove stopwords\n        words = [word for word in words if word not in STOPWORDS]\n        return words\n\n    # Apply preprocessing to the specified column\n    dataframe[text_column] = dataframe[text_column].apply(preprocess)\n\n    # Convert the preprocessed text data into a DataFrame\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe[text_column].apply(lambda x: ' '.join(x)))\n    result_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return result_df\n\n# Example usage\ndata = {'text': ['Hello world', 'Hello Python', 'Python is great']}\ndf = pd.DataFrame(data)\nresult = task_func(df, 'text')"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nfrom numpy import random\nfrom importlib import import_module\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport geopandas as gpd\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Check if 'Lon' and 'Lat' keys are present and their values are tuples\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Missing 'Lon' or 'Lat' keys or their values are not tuples\")\n    \n    # Generate random coordinates within the specified ranges\n    lon_range = dic['Lon']\n    lat_range = dic['Lat']\n    random.seed(42)  # For reproducibility\n    coordinates = [(random.uniform(lon_range[0], lon_range[1]), random.uniform(lat_range[0], lat_range[1])) for _ in cities]\n    \n    # Create a GeoDataFrame\n    from shapely.geometry import Point\n    from geopandas import GeoDataFrame\n    gdf = GeoDataFrame({'City': cities, 'Coordinates': [Point(xy) for xy in coordinates]})\n    \n    return gdf", "raw_solution": "import numpy as np\nfrom numpy import random\nfrom importlib import import_module\nimport_module('numpy', globals(), locals())\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# Test if numpy is imported correctly\nif 'numpy' not in globals():\n    raise ImportError(\"Numpy is not imported correctly\")\n\n# Re-importing geopandas to ensure it's available\nimport geopandas as gpd\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Check if 'Lon' and 'Lat' keys are present and their values are tuples\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Missing 'Lon' or 'Lat' keys or their values are not tuples\")\n    \n    # Generate random coordinates within the specified ranges\n    lon_range = dic['Lon']\n    lat_range = dic['Lat']\n    random.seed(42)  # For reproducibility\n    coordinates = [(random.uniform(lon_range[0], lon_range[1]), random.uniform(lat_range[0], lat_range[1])) for _ in cities]\n    \n    # Create a GeoDataFrame\n    from shapely.geometry import Point\n    from geopandas import GeoDataFrame\n    gdf = GeoDataFrame({'City': cities, 'Coordinates': [Point(xy) for xy in coordinates]})\n    \n    return gdf\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings\")\n    if not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list of strings\")\n    if not all(isinstance(timezone, str) for timezone in timezones.values()):\n        raise ValueError(\"timezones must be a dictionary with string values\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer\")\n    \n    set_seed(seed)\n    weather_report = []\n    for city in cities:\n        local_time = utc_datetime.astimezone(pytz.timezone(timezones[city]))\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        weather_report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    return pd.DataFrame(weather_report)", "raw_solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings\")\n    if not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list of strings\")\n    if not all(isinstance(timezone, str) for timezone in timezones.values()):\n        raise ValueError(\"timezones must be a dictionary with string values\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer\")\n    \n    set_seed(seed)\n    weather_report = []\n    for city in cities:\n        local_time = utc_datetime.astimezone(pytz.timezone(timezones[city]))\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        weather_report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    return pd.DataFrame(weather_report)\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom numpy import random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom task_func import task_func\ndef task_func(elements, seed=0):\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from numpy import random\n    \n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n    \n    random.seed(seed)\n    steps = random.choice([-1, 1], elements)\n    walk = np.cumsum(steps)\n    import numpy as np\n    from numpy import random\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    \n    stats = {\n        'count': len(walk),\n        'mean': walk.mean(),\n        'std': walk.std(),\n        'min': walk.min(),\n        '5th_percentile': np.percentile(walk, 5),\n        '25th_percentile': np.percentile(walk, 25),\n        'median': np.median(walk),\n        '75th_percentile': np.percentile(walk, 75),\n        '95th_percentile': np.percentile(walk, 95),\n        'max': walk.max()\n    }\n    \n    fig, ax = plt.subplots()\n    ax.plot(walk)\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Position')\n    ax.set_title('Random Walk')\n    \n    return stats, ax", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom numpy import random\n\ndef task_func(elements, seed=0):\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from numpy import random\n    \n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n    \n    random.seed(seed)\n    steps = random.choice([-1, 1], elements)\n    walk = np.cumsum(steps)\n    import numpy as np\n    from numpy import random\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    \n    stats = {\n        'count': len(walk),\n        'mean': walk.mean(),\n        'std': walk.std(),\n        'min': walk.min(),\n        '5th_percentile': np.percentile(walk, 5),\n        '25th_percentile': np.percentile(walk, 25),\n        'median': np.median(walk),\n        '75th_percentile': np.percentile(walk, 75),\n        '95th_percentile': np.percentile(walk, 95),\n        'max': walk.max()\n    }\n    \n    fig, ax = plt.subplots()\n    ax.plot(walk)\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Position')\n    ax.set_title('Random Walk')\n    \n    return stats, ax\n\n# Test the function\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom task_func import task_func\n\n# task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from task_func import task_func from"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\nimport importlib.util\nimport sys\nimport importlib\nfrom unittest.mock import patch\nimport tempfile\ndef task_func(url, destination_directory, headers=None):\n    # Ensure the destination directory exists\n    if not os.path.exists(destination_directory):\n        from importlib import import_module\n        import_module('os').system(f'mkdir -p {destination_directory}')\n\n    # Import os module after ensuring it's available\n    import os\n\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()  # Raise an error for 4xx or 5xx status codes\n\n    # Create a temporary zip file path\n    zip_file_path = os.path.join(destination_directory, 'temp.zip')\n\n    # Save the zip file to the temporary path\n    with open(zip_file_path, 'wb') as file:\n        file.write(response.content)\n\n    # Extract the contents of the zip file\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Remove the temporary zip file\n    os.remove(zip_file_path)\n\n    # Return the list of extracted files\n    return [file for file in os.listdir(destination_directory) if file != 'temp.zip']", "raw_solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    # Ensure the destination directory exists\n    if not os.path.exists(destination_directory):\n        from importlib import import_module\n        import_module('os').system(f'mkdir -p {destination_directory}')\n\n    # Import os module after ensuring it's available\n    import os\n\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()  # Raise an error for 4xx or 5xx status codes\n\n    # Create a temporary zip file path\n    zip_file_path = os.path.join(destination_directory, 'temp.zip')\n\n    # Save the zip file to the temporary path\n    with open(zip_file_path, 'wb') as file:\n        file.write(response.content)\n\n    # Extract the contents of the zip file\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Remove the temporary zip file\n    os.remove(zip_file_path)\n\n    # Return the list of extracted files\n    return [file for file in os.listdir(destination_directory) if file != 'temp.zip']\n\n# Test the function with the provided test cases from the importlib module\nimport importlib.util\nimport sys\n\n# Create a temporary module to handle the import\nspec = importlib.util.spec_from_loader('temp', loader=None)\ntemp = importlib.util.module_from_spec(spec)\nsys.modules['temp'] = temp\n\n# Test cases from the importlib module\nimport importlib\nimportlib.import_module('os')\n\n# Test the function with the provided test cases\nfrom unittest.mock import patch\nimport tempfile\n\n# Create a temporary directory for testing\nwith tempfile.TemporaryDirectory() as temp_dir:\n    # Mock the os module to avoid file system operations\n    with patch('os', spec=True) as mock_os:\n        # Test the function\n        task_func.__globals__['os'] = mock_os\n        result = task_func('http://example.com', temp_dir)\n\n        # Check if the function is called with the correct arguments\n        mock_os.system.assert_called_once_with(f'mkdir -p {temp_dir}')\n\n        # Check if the function returns the correct result\n        mock_os.listdir.assert_called_once_with(temp_dir)\n        assert result == ['temp.zip']\n\n        # Clean up the mock\n        del task_func.__globals__['os']\n\n```"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport sys\nimport numpy as np\nfrom importlib import import_module\nfrom matplotlib import pyplot as plt\nfrom importlib import import_module\nfrom importlib import import_module\nfrom importlib import import_module\nimport sys\nfrom importlib import import_module\nfrom importlib import import_module\nimport sys\nfrom importlib import import_module\nfrom import_module import import_module\nimport sys\nfrom import_module import import_module\nimport sys\nfrom sys import modules\nimport sys\nfrom sys import modules\nimport sys\nfrom sys import modules\nimport sys\nfrom sys import modules\nimport sys\nfrom importlib import import_module\nimport sys\nfrom sys import modules\nimport sys\nfrom sys import modules\nimport sys\nfrom importlib import import_module\nimport sys\nfrom import_module import import_module\nimport sys\nfrom import_module import import_module\nfrom sys import modules\nimport sys\nfrom import_module import import_module", "raw_solution": "import random\nimport sys\nimport numpy as np\nfrom importlib import import_module\nnp = import_module('numpy')\n\n# Test if the cv2 module is available, if not, import it from the sys.modules\nif 'cv2' not in sys.modules:\n    from importlib import import_module\n    cv2 = import_module('cv2')\n\n# Test if the matplotlib module is available, if not, import it from the sys.modules\nif 'matplotlib' not in sys.modules:\n    from importlib import import_module\n    import matplotlib\n    sys.modules['matplotlib'] = import_module('matplotlib')\nfrom matplotlib import pyplot as plt\n\n# Test if the cv2 module is available, if not, raise an ImportError\ntry:\n    import cv2\nexcept ImportError:\n    raise ImportError(\"The cv2 module is not available. Please install it using pip install opencv-python.\")\n\n# Test if the matplotlib module is available, if not, raise an ImportError\ntry:\n    from matplotlib import pyplot as plt\nexcept ImportError:\n    raise ImportError(\"The matplotlib module is not available. Please install it using pip install matplotlib.\")\n\n# Test if the numpy module is available, if not, raise an ImportError\ntry:\n    import numpy as np\nexcept ImportError:\n    raise ImportError(\"The numpy module is not available. Please install it using pip install numpy.\")\n\n# Test if the sys module is available, if not, raise an ImportError\ntry:\n    import sys\nexcept ImportError:\n    raise ImportError(\"The sys module is not available. Please install it using pip install sys.\")\n\n# Test if the import_module function is available from the importlib module, if not, raise an ImportError\ntry:\n    from importlib import import_module\nexcept ImportError:\n    raise ImportError(\"The import_module function is not available from the importlib module. Please install it using pip install importlib.\")\n\n# Test if the random module is available, if not, raise an ImportError\ntry:\n    import random\nexcept ImportError:\n    raise ImportError(\"The random module is not available. Please install it using pip install random.\")\n\n# Test if the sys module is available, if not, raise an ImportError\ntry:\n    import sys\n    sys.path.append('numpy')\nexcept ImportError:\n    raise ImportError(\"The sys module is not available. Please install it using pip install sys.\")\n\n# Test if the sys module is available, if not, raise an ImportError\ntry:\n    import sys\n    sys.path.append('matplotlib')\nexcept ImportError:\n    raise ImportError(\"The sys module is not available. Please install it using pip install sys.\")\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom importlib import import_module\ntry:\n    sys.path.append('numpy')\n    import numpy as np\nexcept ImportError:\n    raise ImportError(\"The sys module is not available. Please install it using pip install sys.\")\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom importlib import import_module\ntry:\n    sys.path.append('matplotlib')\n    from matplotlib import pyplot as plt\nexcept ImportError:\n    raise ImportError(\"The sys module is not available. Please install it using pip install sys.\")\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom importlib import import_module\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom importlib import import_module\nsys.path.append('matplotlib')\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom importlib import import_module\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom importlib import import_module\nsys.path.append('matplotlib')\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom import_module import import_module\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom import_module import import_module\nimport_module('matplotlib')\nimport sys\nsys.path.append('matplotlib')\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom sys import modules\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom sys import modules\nimport_module('matplotlib')\nimport sys\nsys.path.append('matplotlib')\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom sys import modules\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom sys import modules\nimport_module('matplotlib')\nimport sys\nfrom importlib import import_module\nimport_module('matplotlib')\nimport sys\nsys.path.append('matplotlib')\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom sys import modules\nimport sys\nsys.path.append('numpy')\nimport_module('numpy')\nfrom sys import modules\nimport_module('matplotlib')\nimport sys\nfrom importlib import import_module\nimport_module('matplotlib')\nimport sys\nfrom import_module import import_module\nimport_module('matplotlib')\nimport sys\nfrom import_module import import_module\nimport_module('matplotlib')\n\n# Test if the sys module is available, if not, raise an ImportError\nfrom sys import modules\nimport sys\nfrom import_module import import_module\nimport_module('import_module')\nimport_module"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    from scipy import signal\n    import numpy as np\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt", "raw_solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    from scipy import signal\n    import numpy as np\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy import signal\n    import soundfile as sf\n    import librosa\n    import matplotlib.pyplot as plt\n    from scipy"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = [item for sublist in original for item in sublist if isinstance(item, (int, float))]\n    \n    # Convert the list of numeric values to a numpy array\n    numeric_array = np.array(numeric_values)\n    \n    # Compute basic statistics for the array\n    mean = stats.describe(numeric_array).mean\n    from scipy.stats import import_module\n    import_module = __import__('scipy.stats', globals(), locals(), ['import_module'], 0)\n    from scipy.stats import import_module", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = [item for sublist in original for item in sublist if isinstance(item, (int, float))]\n    \n    # Convert the list of numeric values to a numpy array\n    numeric_array = np.array(numeric_values)\n    \n    # Compute basic statistics for the array\n    mean = stats.describe(numeric_array).mean\n    from scipy.stats import import_module\n    import_module = __import__('scipy.stats', globals(), locals(), ['import_module'], 0)\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', globals(), locals(), ['import_module'], 0) from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', globals(), locals(), ['import_module'], 0) from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', globals(), locals(), ['import_module'], 0) from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', globals(), locals(), ['import_module'], from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scats from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scipy.stats', from scipy.stats import import_module\n    from scipy.stats import import_module\n    import_module = __import('scats from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats import import_module\n    from scipy.stats"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array using MinMaxScaler from sklearn\n    normalized_array = preprocessing.MinMaxScaler().fit_transform(original_array.reshape(-1, 1)).reshape(-1)\n    \n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original Data')\n    ax.plot(normalized_array, label='Normalized Data')\n    ax.set_title('Original vs. Normalized Data')\n    ax.legend()\n    \n    return original_array, normalized_array, ax", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array using MinMaxScaler from sklearn\n    normalized_array = preprocessing.MinMaxScaler().fit_transform(original_array.reshape(-1, 1)).reshape(-1)\n    \n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original Data')\n    ax.plot(normalized_array, label='Normalized Data')\n    ax.set_title('Original vs. Normalized Data')\n    ax.legend()\n    \n    return original_array, normalized_array, ax\n\n# Test the function with a sample list\noriginal_list = [1, 2, 3, 4, 5]\noriginal_array, normalized_array, ax = task_func(original_list)\n\n```"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\nfrom importlib import import_module\ndef task_func(data, sample_rate=8000):\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data[\"a\"] = 1\n    \n    # Generate a signal based on the values in \"data\"\n    signal = [value for value in data.values()]\n    \n    # Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n    \n    # Generate the frequency axis\n    freq_axis = np.linspace(0, sample_rate, len(signal))\n    \n    # Plot and return the FFT of the signal with a title of 'FFT of the signal'\n    plt.figure()\n    plt.plot(freq_axis[:len(signal)//2], np.abs(fft_result[:len(signal)//2]))\n    plt.title('FFT of the signal')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Amplitude')\n    plt.show()\n    \n    return fft_result, plt.gca()\ndata = {'b': 2, 'c': 3, 'd': 4}", "raw_solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\nfrom importlib import import_module\n\n# Test if numpy is available, if not, import it from scipy\ntry:\n    import numpy as np\nexcept ImportError:\n    from scipy import import_module\n    np = import_module('numpy')\n\ndef task_func(data, sample_rate=8000):\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data[\"a\"] = 1\n    \n    # Generate a signal based on the values in \"data\"\n    signal = [value for value in data.values()]\n    \n    # Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n    \n    # Generate the frequency axis\n    freq_axis = np.linspace(0, sample_rate, len(signal))\n    \n    # Plot and return the FFT of the signal with a title of 'FFT of the signal'\n    plt.figure()\n    plt.plot(freq_axis[:len(signal)//2], np.abs(fft_result[:len(signal)//2]))\n    plt.title('FFT of the signal')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Amplitude')\n    plt.show()\n    \n    return fft_result, plt.gca()\n\n# Test the function with a sample dictionary\ndata = {'b': 2, 'c': 3, 'd': 4}\nfft_result, plot = task_func(data)\n\n```"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_type = self.headers.get('content-type')\n        if content_type != 'application/json':\n            self.send_error(400, 'Content-Type header is not application/json')\n            return\n\n        content_length = int(self.headers.get('content-length'))\n        post_data = self.rfile.read(content_length)\n        try:\n            data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_error(400, 'Invalid JSON')\n            return\n\n        if 'data' not in data:\n            self.send_error(400, 'No data key in request')\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\ndef task_func():\n    return RequestHandler", "raw_solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_type = self.headers.get('content-type')\n        if content_type != 'application/json':\n            self.send_error(400, 'Content-Type header is not application/json')\n            return\n\n        content_length = int(self.headers.get('content-length'))\n        post_data = self.rfile.read(content_length)\n        try:\n            data = json.loads(post_data.decode('utf-8'))\n        except json.JSONDecodeError:\n            self.send_error(400, 'Invalid JSON')\n            return\n\n        if 'data' not in data:\n            self.send_error(400, 'No data key in request')\n            return\n\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\n\ndef task_func():\n    return RequestHandler\n\n```"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            try:\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                email_data = json.loads(post_data.decode('utf-8'))\n            except (json.JSONDecodeError, ValueError):\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Invalid JSON data'}).encode('utf-8'))\n                return\n\n            try:\n                subject = email_data['subject']\n                message = email_data['message']\n                to = email_data['to']\n            except KeyError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Missing required fields'}).encode('utf-8'))\n                return\n\n            try:\n                msg = MIMEText(message)\n                msg['Subject'] = subject\n                msg['From'] = smtp_username\n                msg['To'] = to\n\n                with smtplib.SMTP(smtp_server, smtp_port) as server:\n                    server.starttls()\n                    server.login(smtp_username, smtp_password)\n                    server.sendmail(smtp_username, to, msg.as_string())\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Authentication failed'}).encode('utf-8'))\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'message': 'Email sent successfully'}).encode('utf-8'))\n\n    return EmailHandler", "raw_solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            try:\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                email_data = json.loads(post_data.decode('utf-8'))\n            except (json.JSONDecodeError, ValueError):\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Invalid JSON data'}).encode('utf-8'))\n                return\n\n            try:\n                subject = email_data['subject']\n                message = email_data['message']\n                to = email_data['to']\n            except KeyError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Missing required fields'}).encode('utf-8'))\n                return\n\n            try:\n                msg = MIMEText(message)\n                msg['Subject'] = subject\n                msg['From'] = smtp_username\n                msg['To'] = to\n\n                with smtplib.SMTP(smtp_server, smtp_port) as server:\n                    server.starttls()\n                    server.login(smtp_username, smtp_password)\n                    server.sendmail(smtp_username, to, msg.as_string())\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({'error': 'Authentication failed'}).encode('utf-8'))\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({'message': 'Email sent successfully'}).encode('utf-8'))\n\n    return EmailHandler\n\n# Example usage:\n# handler = task_func('smtp.example.com', 587, 'username', 'password')\n# httpd = http.server.HTTPServer(('localhost', 8000), handler)\n# httpd.serve_forever()\n\n```"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    total_words = 0\n    word_counts = Counter()\n    for root, dirs, files in os.walk(directory):\n        import os\n        os._name = 'posix'  # This line is to avoid an error in the os module\n        from collections import __builtins__\n        __builtins__.os = __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')", "raw_solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    total_words = 0\n    word_counts = Counter()\n    for root, dirs, files in os.walk(directory):\n        import os\n        os._name = 'posix'  # This line is to avoid an error in the os module\n        from collections import __builtins__\n        __builtins__.os = __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__\n        __builtins__.__dict__.pop('os')\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __future__ import __builtins__.__dict__\n        from __"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df, plot=False):\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    \n    if 'Value' not in df.columns:\n        raise ValueError(\"Input DataFrame does not contain 'Value' column\")\n    \n    if not all(isinstance(value, list) for value in df['Value']):\n        raise ValueError(\"All elements in 'Value' column must be lists\")\n    \n    # Split lists in the 'Value' column into separate columns\n    df_expanded = pd.DataFrame(df['Value'].tolist(), index=df.index)\n    \n    # Calculate the Pearson correlation coefficient between these columns\n    correlation_matrix = df_expanded.corr(method='pearson')\n    \n    if plot:\n        # Create a heatmap plot\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        plt.title('Correlation Heatmap')\n        plt.show()\n    \n    return correlation_matrix\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03'],\n    'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    \n    if 'Value' not in df.columns:\n        raise ValueError(\"Input DataFrame does not contain 'Value' column\")\n    \n    if not all(isinstance(value, list) for value in df['Value']):\n        raise ValueError(\"All elements in 'Value' column must be lists\")\n    \n    # Split lists in the 'Value' column into separate columns\n    df_expanded = pd.DataFrame(df['Value'].tolist(), index=df.index)\n    \n    # Calculate the Pearson correlation coefficient between these columns\n    correlation_matrix = df_expanded.corr(method='pearson')\n    \n    if plot:\n        # Create a heatmap plot\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n        plt.title('Correlation Heatmap')\n        plt.show()\n    \n    return correlation_matrix\n\n# Example usage\ndata = {\n    'Date': ['2021-01-01', '2021-01-02', '2021-01-03'],\n    'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n}\ndf = pd.DataFrame(data)\ncorrelation_matrix, axes = task_func(df, plot=True)"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    # Create a dictionary to store the grades for each student and subject\n    grades = {}\n    for student in STUDENTS:\n        grades[student] = {}\n        for field in FIELDS:\n            grades[student][field] = random.randint(0, 100)\n    \n    # Create a DataFrame to store the grades\n    df = pd.DataFrame(grades).T\n    \n    # Calculate the average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n    \n    # Calculate the average grade for each subject\n    avg_grades = df.mean()\n    avg_grades.name = 'Average'\n    df = df.append(avg_grades, ignore_index=True)\n    \n    return df", "raw_solution": "import pandas as pd\nfrom statistics import mean\nimport random\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    # Create a dictionary to store the grades for each student and subject\n    grades = {}\n    for student in STUDENTS:\n        grades[student] = {}\n        for field in FIELDS:\n            grades[student][field] = random.randint(0, 100)\n    \n    # Create a DataFrame to store the grades\n    df = pd.DataFrame(grades).T\n    \n    # Calculate the average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n    \n    # Calculate the average grade for each subject\n    avg_grades = df.mean()\n    avg_grades.name = 'Average'\n    df = df.append(avg_grades, ignore_index=True)\n    \n    return df\n\n# Test the function\ndf = task_func()"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\nimport os\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    # Create a temporary file path\n    temp_filename = filename + '.tmp'\n    \n    # Generate and write data to the temporary file\n    with open(temp_filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        \n        for _ in range(PEOPLE_COUNT):\n            name = f'Person{_ + 1}'\n            age = random.randint(18, 65)\n            height = random.randint(150, 200)\n            weight = random.randint(50, 100)\n            writer.writerow([name, age, height, weight])\n    \n    # Calculate averages\n    with open(temp_filename, mode='r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n        ages = [int(row[1]) for row in reader]\n        heights = [int(row[2]) for row in reader]\n        weights = [int(row[3]) for row in reader]\n    \n    average_age = mean(ages)\n    average_height = mean(heights)\n    average_weight = mean(weights)\n    \n    # Append averages to the temporary file\n    with open(temp_filename, mode='a', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Average', average_age, average_height, average_weight])\n    \n    # Rename the temporary file to the final filename\n    os.rename(temp_filename, filename)\n    \n    return filename\nfilename = 'output.csv'", "raw_solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    # Create a temporary file path\n    temp_filename = filename + '.tmp'\n    \n    # Generate and write data to the temporary file\n    with open(temp_filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        \n        for _ in range(PEOPLE_COUNT):\n            name = f'Person{_ + 1}'\n            age = random.randint(18, 65)\n            height = random.randint(150, 200)\n            weight = random.randint(50, 100)\n            writer.writerow([name, age, height, weight])\n    \n    # Calculate averages\n    with open(temp_filename, mode='r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n        ages = [int(row[1]) for row in reader]\n        heights = [int(row[2]) for row in reader]\n        weights = [int(row[3]) for row in reader]\n    \n    average_age = mean(ages)\n    average_height = mean(heights)\n    average_weight = mean(weights)\n    \n    # Append averages to the temporary file\n    with open(temp_filename, mode='a', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Average', average_age, average_height, average_weight])\n    \n    # Rename the temporary file to the final filename\n    os.rename(temp_filename, filename)\n    \n    return filename\n\n# Test the function from the 'os' module\nimport os\n\n# Example usage\nfilename = 'output.csv'\nresult = task_func(filename)"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    import os\n    from datetime import datetime\n    from collections import defaultdict\n    import re\n\n    # Create a dictionary to store the results\n    result = defaultdict(list)\n\n    # Iterate over the files in the directory\n    for filename in os.listdir(directory):\n        import os\n        os.path\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re", "raw_solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\ndef task_func(directory):\n    import os\n    from datetime import datetime\n    from collections import defaultdict\n    import re\n\n    # Create a dictionary to store the results\n    result = defaultdict(list)\n\n    # Iterate over the files in the directory\n    for filename in os.listdir(directory):\n        import os\n        os.path\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re\n        import os\n        from datetime import datetime\n        from collections import defaultdict\n        import re"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    exit_codes = []\n    threads = []\n\n    def run_file(file):\n        process = subprocess.Popen(file, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        exit_code = process.wait()\n        exit_codes.append(exit_code)\n\n    for file in file_list:\n        thread = threading.Thread(target=run_file, args=(file,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return exit_codes", "raw_solution": "import subprocess\nimport time\nimport threading\n\ndef task_func(file_list):\n    exit_codes = []\n    threads = []\n\n    def run_file(file):\n        process = subprocess.Popen(file, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        exit_code = process.wait()\n        exit_codes.append(exit_code)\n\n    for file in file_list:\n        thread = threading.Thread(target=run_file, args=(file,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return exit_codes\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    result = []\n    for file_path in glob.glob(os.path.join(directory_path, '*.bat')):\n        try:\n            import tempfile\n            from contextlib import redirect_stdout\n            import io\n            # Redirect stdout to a temporary file\n            with tempfile.TemporaryFile() as temp_stdout:\n                with redirect_stdout(temp_stdout):\n                    # Run the batch file\n                    exit_code = subprocess.call(file_path, shell=True)\n                    # Read the output from the temporary file\n                    temp_stdout.seek(0)\n                    output = temp_stdout.read().decode()\n                    # Append the output to the result\n                    result.append((os.path.basename(file_path), exit_code))\n        except ImportError:\n            import os\n            from contextlib import redirect_stdout\n            import io\n            # Import os module again to avoid ImportError\n            # Redirect stdout to a temporary file", "raw_solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    result = []\n    for file_path in glob.glob(os.path.join(directory_path, '*.bat')):\n        try:\n            import tempfile\n            from contextlib import redirect_stdout\n            import io\n            # Redirect stdout to a temporary file\n            with tempfile.TemporaryFile() as temp_stdout:\n                with redirect_stdout(temp_stdout):\n                    # Run the batch file\n                    exit_code = subprocess.call(file_path, shell=True)\n                    # Read the output from the temporary file\n                    temp_stdout.seek(0)\n                    output = temp_stdout.read().decode()\n                    # Append the output to the result\n                    result.append((os.path.basename(file_path), exit_code))\n        except ImportError:\n            import os\n            from contextlib import redirect_stdout\n            import io\n            # Import os module again to avoid ImportError\n            # Redirect stdout to a temporary file\n            with tempfile.TemporaryRedirect from os import redirect_stdout as TemporaryRedirect\n            from contextlib import redirect_stdout as TemporaryRedirect from os import TemporaryRedirect\n            from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from context from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import TemporaryRedirect from contextlib import"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty\")\n    if col not in df.columns:\n        raise ValueError(\"The input df must contain the specified column\")\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n    if df[col].dtype in ['int64', 'float64']:\n        sns.histplot(df[col], kde=True, ax=axes[0])\n    else:\n        sns.countplot(df[col], ax=axes[0])\n\n    sns.boxplot(df[col], ax=axes[1])\n\n    return fig", "raw_solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty\")\n    if col not in df.columns:\n        raise ValueError(\"The input df must contain the specified column\")\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n    if df[col].dtype in ['int64', 'float64']:\n        sns.histplot(df[col], kde=True, ax=axes[0])\n    else:\n        sns.countplot(df[col], ax=axes[0])\n\n    sns.boxplot(df[col], ax=axes[1])\n\n    return fig\n\n```"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    if not os.path.exists(script_path):\n        import os\n        os.system('from __future__ import absolute_import')\n        from importlib import reload\n        reload(sys)\n        sys.path.insert(0, '')\n        from subprocess import CalledProcessError\n        from subprocess import Popen\n        from subprocess import PIPE\n        from subprocess import STDOUT\n        from subprocess import check_call\n        from subprocess import check_output\n        from subprocess import run\n        from subprocess import TimeoutExpired\n        from subprocess import DEVNULL\n        from subprocess import getoutput\n        from subprocess import getstatusoutput\n        from subprocess import list2cmdline\n        from subprocess import Popen\n        from subprocess import PIPE\n        from subprocess import STDOUT\n        from subprocess import CalledProcessError\n        from subprocess import TimeoutExpired\n        from subprocess import DEVNULL\n        from subprocess import getoutput\n        from subprocess import getstatusoutput\n        from subprocess import list2cmdline\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module", "raw_solution": "import subprocess\nimport os\nimport sys\nimport time\n\ndef task_func(script_path, wait=True, *args):\n    if not os.path.exists(script_path):\n        import os\n        os.system('from __future__ import absolute_import')\n        from importlib import reload\n        reload(sys)\n        sys.path.insert(0, '')\n        from subprocess import CalledProcessError\n        from subprocess import Popen\n        from subprocess import PIPE\n        from subprocess import STDOUT\n        from subprocess import check_call\n        from subprocess import check_output\n        from subprocess import run\n        from subprocess import TimeoutExpired\n        from subprocess import DEVNULL\n        from subprocess import getoutput\n        from subprocess import getstatusoutput\n        from subprocess import list2cmdline\n        from subprocess import Popen\n        from subprocess import PIPE\n        from subprocess import STDOUT\n        from subprocess import CalledProcessError\n        from subprocess import TimeoutExpired\n        from subprocess import DEVNULL\n        from subprocess import getoutput\n        from subprocess import getstatusoutput\n        from subprocess import list2cmdline\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module\n        from subprocess import import_module"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    # Check if the file exists\n    if not os.path.exists(file_location):\n        import pandas.testing as pd.testing\n        pd.testing.assert_raises(FileNotFoundError, __import__('os').path.exists, file_location)\n        from pandas.compat.mock import MagicMock\n        os.path.exists = MagicMock(return_value=False)\n        from importlib import reload\n        import pandas as pd\n        from pandas.compat.mock import patch\n        import sys\n        from io import StringIO\n        import pandas.testing as pd.testing\n        from unittest.mock import patch\n        from pandas.compat.mock import MagicMock\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock import patch\n        from pandas.compat.mock"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n    \n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.strftime('%A')] += 1\n    \n    days = list(day_counts.keys())\n    counts = list(day_counts.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax", "raw_solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n    \n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.strftime('%A')] += 1\n    \n    days = list(day_counts.keys())\n    counts = list(day_counts.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    random.seed(seed)\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    if not files:\n        return None\n    import os\n    os.sys.modules[__name__].__builtins__.os = __import__('os', fromlist=['os'])\n    import __builtins__\n    __builtins__.os = __import__('os')\n    from __future__ import __builtins__\n    __builtins__.__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __builtins__.__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__builtins__.__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.import_module('os')\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)", "raw_solution": "import os\nimport shutil\nimport random\n\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    random.seed(seed)\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    if not files:\n        return None\n    import os\n    os.sys.modules[__name__].__builtins__.os = __import__('os', fromlist=['os'])\n    import __builtins__\n    __builtins__.os = __import__('os')\n    from __future__ import __builtins__\n    __builtins__.__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __builtins__.__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__builtins__.__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.import_module('os')\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import__('os').__dict__)\n    from __future__ import __builtins__\n    __import__('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future__ import __builtins__\n    __import('os').__dict__.update(__import('os').__dict__)\n    from __future"}
{"task_id": "BigCodeBench/374", "solution": "import re\nimport glob\nimport os", "raw_solution": "import re\nimport glob\nimport os\nimport regex as regex from regex import regex\nfrom regex import regex from regex import regex\nfrom regex import regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex from regex import regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex import regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex from regex import regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex from regex import regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex import regex from regex import regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import regex\nfrom regex import regex from regex import regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex from regex import"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n    \n    t = np.linspace(0, 1, sample_size)\n    sine_wave = np.sin(2 * math.pi * frequency * t)\n    cosine_wave = np.cos(2 * math.pi * frequency * t)\n    \n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine Wave')\n    ax.plot(t, cosine_wave, label='Cosine Wave')\n    ax.legend()\n    \n    return fig, ax", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n    \n    t = np.linspace(0, 1, sample_size)\n    sine_wave = np.sin(2 * math.pi * frequency * t)\n    cosine_wave = np.cos(2 * math.pi * frequency * t)\n    \n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine Wave')\n    ax.plot(t, cosine_wave, label='Cosine Wave')\n    ax.legend()\n    \n    return fig, ax\n\n```"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': bool(os.getenv('MAIL_USE_TLS', False)),\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', None),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', None)\n    }\n    mail = Mail(app)\n    return mail, mail_config", "raw_solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': bool(os.getenv('MAIL_USE_TLS', False)),\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', None),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', None)\n    }\n    mail = Mail(app)\n    return mail, mail_config\n\n```"}
{"task_id": "BigCodeBench/409", "solution": "from pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd", "raw_solution": "import os\nimport pandas as pd\nfrom pandas import DataFrame\nfrom pandas.core import common\nfrom pandas.core.api import *\nfrom pandas.core.common import *\nfrom pandas.core.indexes.api import *\nfrom pandas.core.series.api import *\nfrom pandas.core.frame.api import *\nfrom pandas.core.config.api import *\nfrom pandas.core.config import *\nfrom pandas.core.config.config import *\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as from pandas import *\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd\nfrom pandas.core.config.config import pandas as pd"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    \n    # Construct a Sequential model with one dense hidden layer and a sigmoid activation function\n    model = Sequential()\n    model.add(Dense(10, input_dim=2, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile the model using binary cross-entropy loss and SGD optimizer with a specified learning rate\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n    \n    # Fit the model to the training data (without verbose output), also evaluating it on the test set as validation data\n    history = model.fit(X_train, Y_train, epochs=50, batch_size=10, verbose=0, validation_data=(X_test, Y_test))\n    \n    # Plot the model's training and validation loss over epochs\n    plt.figure()\n    plt.plot(history.history['loss'], label='Train')\n    plt.plot(history.history['val_loss'], label='Test')\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Return the trained model and the Axes object of the plot\n    return model, plt.gca()", "raw_solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    \n    # Construct a Sequential model with one dense hidden layer and a sigmoid activation function\n    model = Sequential()\n    model.add(Dense(10, input_dim=2, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile the model using binary cross-entropy loss and SGD optimizer with a specified learning rate\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n    \n    # Fit the model to the training data (without verbose output), also evaluating it on the test set as validation data\n    history = model.fit(X_train, Y_train, epochs=50, batch_size=10, verbose=0, validation_data=(X_test, Y_test))\n    \n    # Plot the model's training and validation loss over epochs\n    plt.figure()\n    plt.plot(history.history['loss'], label='Train')\n    plt.plot(history.history['val_loss'], label='Test')\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Return the trained model and the Axes object of the plot\n    return model, plt.gca()\n\n```"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer using a sigmoid activation function\n    model = keras.Sequential([\n        keras.layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model with binary cross-entropy loss and an SGD optimizer specifying a learning rate\n    model.compile(optimizer=keras.optimizers.SGD(learning_rate=0.01), loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data in a non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Plot the ROC curve for the model on the test set, including the AUC score in the plot legend\n    Y_pred = model.predict(X_test)\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False positive rate')\n    plt.ylabel('True positive rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()", "raw_solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer using a sigmoid activation function\n    model = keras.Sequential([\n        keras.layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model with binary cross-entropy loss and an SGD optimizer specifying a learning rate\n    model.compile(optimizer=keras.optimizers.SGD(learning_rate=0.01), loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data in a non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Plot the ROC curve for the model on the test set, including the AUC score in the plot legend\n    Y_pred = model.predict(X_test)\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False positive rate')\n    plt.ylabel('True positive rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()\n\n```"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\nfrom PIL import Image\nimport io\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    from sklearn.cluster import KMeans\n    import numpy as np\n    import cv2\n    import os\n    from PIL import Image\n    import io\n    import sys\n    sys.path.append('.')\n\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        from importlib import reload\n        import sys\n        from pathlib import Path\n        sys.path.append(str(Path(__file__).resolve().parent.parent))\n        from utils import import_module\n        reload(sys.modules['import_module'])\n        from import_module import import_module\n        import_module('import_module')\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module", "raw_solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\nfrom PIL import Image\nimport io\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    from sklearn.cluster import KMeans\n    import numpy as np\n    import cv2\n    import os\n    from PIL import Image\n    import io\n    import sys\n    sys.path.append('.')\n\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        from importlib import reload\n        import sys\n        from pathlib import Path\n        sys.path.append(str(Path(__file__).resolve().parent.parent))\n        from utils import import_module\n        reload(sys.modules['import_module'])\n        from import_module import import_module\n        import_module('import_module')\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\nimport numpy as np\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    # Calculate the product of matrix 'P' and 3D tensor 'T'\n    result = np.dot(P, T)\n    \n    # Flatten the result\n    flattened_result = result.flatten()\n    \n    # Apply KMeans clustering to the flattened data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result.reshape(-1, 1))\n    \n    # Visualize the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(flattened_result)), flattened_result, c=cluster_result, cmap='viridis')\n    ax.set_title('KMeans Clustering Visualization')\n    \n    return cluster_result, ax\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])", "raw_solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    # Calculate the product of matrix 'P' and 3D tensor 'T'\n    result = np.dot(P, T)\n    \n    # Flatten the result\n    flattened_result = result.flatten()\n    \n    # Apply KMeans clustering to the flattened data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result.reshape(-1, 1))\n    \n    # Visualize the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(flattened_result)), flattened_result, c=cluster_result, cmap='viridis')\n    ax.set_title('KMeans Clustering Visualization')\n    \n    return cluster_result, ax\n\n# Test the function with provided data points\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nfrom sklearn import datasets\nP = datasets.load_iris().data\nT = datasets.load_iris().data\n\n# Convert to numpy array if not already\nimport numpy as np\nP = np.array(P)\nT = np.array(T)\n\ncluster_result, ax = task_func(P, T)\n\n```"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    import random\n    from numpy.random import default_rng\n    rng = default_rng(seed)\n    from numpy import random as npr\n    npr.seed(seed)\n    import random\n    random.seed(seed)\n    from random import seed\n    seed(seed)\n    from numpy.random import seed as nps\n    nps(seed)\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand", "raw_solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\ndef task_func(points, seed=0):\n    import random\n    from numpy.random import default_rng\n    rng = default_rng(seed)\n    from numpy import random as npr\n    npr.seed(seed)\n    import random\n    random.seed(seed)\n    from random import seed\n    seed(seed)\n    from numpy.random import seed as nps\n    nps(seed)\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n    import random\n    from random import random as rand\n   "}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(\"Destination directory does not exist\")\n    \n    moved_files = []\n    import os\n    if 'os' not in globals():\n        import os\n    for file in glob.glob(os.path.join(src_dir, f\"*.{ext}\")):\n        file_name = os.path.basename(file)\n        dest_file = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file):\n            shutil.move(file, dest_file)\n            moved_files.append(file)\n    return moved_files", "raw_solution": "import os\nimport shutil\nimport glob\n\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(\"Destination directory does not exist\")\n    \n    moved_files = []\n    import os\n    if 'os' not in globals():\n        import os\n    for file in glob.glob(os.path.join(src_dir, f\"*.{ext}\")):\n        file_name = os.path.basename(file)\n        dest_file = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file):\n            shutil.move(file, dest_file)\n            moved_files.append(file)\n    return moved_files\n\n```"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    import pandas as pd\n    import json\n    import re\n    \n    # Check if pandas is available\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"Pandas library is required but not installed. Please install it using pip install pandas.\")\n    \n    # Convert JSON string to dictionary\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()  # Return empty DataFrame if JSON is invalid\n    \n    # Normalize the dictionary by doubling numerical values\n    def normalize_dict(d):\n        for key, value in d.items():\n            if isinstance(value, dict):\n                normalize_dict(value)\n            elif isinstance(value, list):\n                for i in range(len(value)):\n                    if isinstance(value[i], (int, float)):\n                        value[i] *= 2\n            elif isinstance(value, str):\n                try:\n                    d[key] = float(re.sub(r'[^\\d.]', '', value)) * 2\n                except ValueError:\n                    pass\n            elif isinstance(value, (int, float)):\n                d[key] *= 2\n    \n    normalize_dict(data)\n    \n    # Create a Pandas DataFrame from the dictionary\n    df = pd.DataFrame(data)\n    \n    return df", "raw_solution": "import json\nimport re\nimport pandas as pd\n\ndef task_func(json_str):\n    import pandas as pd\n    import json\n    import re\n    \n    # Check if pandas is available\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"Pandas library is required but not installed. Please install it using pip install pandas.\")\n    \n    # Convert JSON string to dictionary\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()  # Return empty DataFrame if JSON is invalid\n    \n    # Normalize the dictionary by doubling numerical values\n    def normalize_dict(d):\n        for key, value in d.items():\n            if isinstance(value, dict):\n                normalize_dict(value)\n            elif isinstance(value, list):\n                for i in range(len(value)):\n                    if isinstance(value[i], (int, float)):\n                        value[i] *= 2\n            elif isinstance(value, str):\n                try:\n                    d[key] = float(re.sub(r'[^\\d.]', '', value)) * 2\n                except ValueError:\n                    pass\n            elif isinstance(value, (int, float)):\n                d[key] *= 2\n    \n    normalize_dict(data)\n    \n    # Create a Pandas DataFrame from the dictionary\n    df = pd.DataFrame(data)\n    \n    return df\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        import os\n        os.system('from __future__ import absolute_import')\n        return task_func.__globals__.update(os=os); return task_func(script_path, timeout)\n    task_func.__globals__.update(os=os)\n    from __future__ import absolute_import\n    import os\n\n    cpu_usage = 0\n    memory_usage = 0\n    process = None", "raw_solution": "import subprocess\nimport psutil\nimport time\nimport os\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        import os\n        os.system('from __future__ import absolute_import')\n        return task_func.__globals__.update(os=os); return task_func(script_path, timeout)\n    task_func.__globals__.update(os=os)\n    from __future__ import absolute_import\n    import os\n\n    cpu_usage = 0\n    memory_usage = 0\n    process = None\n\n    try:\n        import __main__\n        __main__.os = os\n        from __main__ import os\n        import __main__\n        __main__.os.system('from __future__ import absolute_import')\n        from __main__ import os\n        os.system('import os')\n        from __main__ import os\n        os.system('os.system(\"from __future__ import absolute_import\")')\n        from __main__ import os\n        os.system('os.system(\"import os\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'from __future__ import absolute_import\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'import os\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'import os\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'import os\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'import os\\')\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'import os\\')\\')\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')\\')\\')\\')\")')\n        from __main__ import os\n        os.system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'import os\\')\\')\\')\\')\\')\\')\")')\n        from __main__.os import system\n        system('from __future__ import absolute_import')\n        from __main__.os import system\n        system('import os')\n        from __main__.os import system\n        system('os.system(\"from __future__ import absolute_import\")')\n        from __main__.os import system\n        system('os.system(\"import os\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'from __future__ import absolute_import\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'import os\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'os.system(\\'import os\\')\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'import os\\')\\')\\')\\')\")')\n        from __main__.os import system\n        system('os.system(\"os.system(\\'os.system(\\'os.system(\\'os.system(\\'os.system(\\'from __future__ import absolute_import\\')\\')\\')"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.utils import resample\n    \n    from sklearn import datasets\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import resample\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.utils import resample\n    \n    from sklearn import datasets\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import resample\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn.utils import Bunch\n    from sklearn.utils.deprecation import deprecated\n    from sklearn.utils import check_random_state\n    from sklearn"}
{"task_id": "BigCodeBench/486", "solution": "import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, trend, seed=42):\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime\n    import matplotlib.pyplot as plt\n    \n    # Importing required libraries\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime\n    import matplotlib.pyplot as plt\n    \n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a time series with the specified start time, end time, and step\n    time_series = pd.date_range(start=start_time, end=end_time, freq=f'{step}S')\n    \n    # Generate random values from a normal distribution\n    values = np.random.randn(len(time_series))\n    \n    # Add a linear trend to the values\n    values += trend * np.arange(len(time_series))\n    \n    # Create a DataFrame to hold the time series data\n    df = pd.DataFrame({'Time': time_series, 'Value': values})\n    \n    # Plot the time series\n    fig, ax = plt.subplots()\n    ax.plot(df['Time'], df['Value'], label='Time Series')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    return ax", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime\n    import matplotlib.pyplot as plt\n    \n    # Importing required libraries\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime\n    import matplotlib.pyplot as plt\n    \n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a time series with the specified start time, end time, and step\n    time_series = pd.date_range(start=start_time, end=end_time, freq=f'{step}S')\n    \n    # Generate random values from a normal distribution\n    values = np.random.randn(len(time_series))\n    \n    # Add a linear trend to the values\n    values += trend * np.arange(len(time_series))\n    \n    # Create a DataFrame to hold the time series data\n    df = pd.DataFrame({'Time': time_series, 'Value': values})\n    \n    # Plot the time series\n    fig, ax = plt.subplots()\n    ax.plot(df['Time'], df['Value'], label='Time Series')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    return ax\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"epoch_milliseconds must be a non-negative integer\")\n    if not isinstance(random_seed, int) or random_seed < 0:\n        raise ValueError(\"random_seed must be a non-negative integer\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"products must be a list of 5 strings\")\n    for product in products:\n        if not isinstance(product, str):\n            raise ValueError(\"products must be a list of 5 strings\")\n\n    # Set random seed\n    random.seed(random_seed)\n\n    # Convert epoch time to datetime\n    epoch_datetime = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Generate sales data\n    sales_data = []\n    current_datetime = epoch_datetime\n    while current_datetime <= datetime.now():\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append([product, current_datetime, sales])\n        current_datetime += timedelta_from_import()\n\n    from datetime import timedelta\n\n    # Return sales data as DataFrame", "raw_solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"epoch_milliseconds must be a non-negative integer\")\n    if not isinstance(random_seed, int) or random_seed < 0:\n        raise ValueError(\"random_seed must be a non-negative integer\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"products must be a list of 5 strings\")\n    for product in products:\n        if not isinstance(product, str):\n            raise ValueError(\"products must be a list of 5 strings\")\n\n    # Set random seed\n    random.seed(random_seed)\n\n    # Convert epoch time to datetime\n    epoch_datetime = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Generate sales data\n    sales_data = []\n    current_datetime = epoch_datetime\n    while current_datetime <= datetime.now():\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append([product, current_datetime, sales])\n        current_datetime += timedelta_from_import()\n\n    from datetime import timedelta\n\n    # Return sales data as DataFrame\n    return pd.DataFrame(sales_data, columns=[\"from datetime import timedelta\", \"import datetime\", \"Product from from\", \"datetime\", \"import\", \"from datetime import timedelta as timedelta_from_import\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import\", \"from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta\", \"import from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime import timedelta as timedelta_from_import from datetime import timedelta from datetime"}
{"task_id": "BigCodeBench/501", "solution": "import json", "raw_solution": "import json\nimport pandas as task_func.__import__('pandas')\nfrom task_func.__import__('pandas').pandas import task_func\ntask_func.__import__('sys').sys.modules.pop('pandas', None)\nimport task_func.__import__('pandas').pandas\ntask_func.__import__('sys').sys.modules.pop('pandas', None)\nimport pandas as task_func.__import__('pandas')\ntask_func.__import__('sys').sys.modules.pop('pandas', None)\nimport task_func.__import__(task_func.__import__('sys').sys.modules.pop('pandas', 'pandas'))\nfrom task_func.__import__(task_func.__import__('sys').sys.modules.pop('pandas', 'pandas')).pandas import task_func\ntask_func.__import__(task_func.__import__('sys').sys.modules.pop('pandas', 'pandas')).task_func.__import__('sys').sys.modules.pop('pandas', None)\nimport pandas as task_func.__import__(task_func.__import__(task_func.__import__('sys').sys.modules.pop('pandas', 'pandas')).task_func.__import__('pandas'))\ntask_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__('pandas').pandas).pandas).pandas.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__('pandas').pandas).pandas).pandas).pandas.__import__('pandas').pandas.__import__('pandas').pandas.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task_func.__import__(task"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Define the list of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Create an empty list to store the data\n    data = []\n    \n    # Loop over the number of days in the past\n    for i in range(days_in_past):\n        # Generate a random date\n        date = datetime.now() - timedelta(days=i)\n        \n        # Loop over the activities\n        for activity in activities:\n            # Generate a random duration\n            duration = random.randint(0, 120)\n            \n            # Append the data to the list\n            data.append([date.strftime(\"%Y-%m-%d\"), activity, duration])\n    \n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Date\", \"Activity\", \"Duration\"])\n    \n    # Create a lineplot using Seaborn\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n    \n    # Return the plot and the DataFrame\n    return ax, df", "raw_solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\ndef task_func(days_in_past=7, random_seed=0):\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Define the list of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Create an empty list to store the data\n    data = []\n    \n    # Loop over the number of days in the past\n    for i in range(days_in_past):\n        # Generate a random date\n        date = datetime.now() - timedelta(days=i)\n        \n        # Loop over the activities\n        for activity in activities:\n            # Generate a random duration\n            duration = random.randint(0, 120)\n            \n            # Append the data to the list\n            data.append([date.strftime(\"%Y-%m-%d\"), activity, duration])\n    \n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Date\", \"Activity\", \"Duration\"])\n    \n    # Create a lineplot using Seaborn\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n    \n    # Return the plot and the DataFrame\n    return ax, df\n\n# Test the function\nax, df = task_func()\n\n```"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Create a DataFrame to store the stock prices\n    stock_prices = pd.DataFrame(index=pd.date_range(datetime.now() - timedelta(days=days_in_past), periods=days_in_past))\n    \n    # Add columns for each stock with random prices\n    for stock in stock_names:\n        stock_prices[stock] = np.random.rand(days_in_past)\n    \n    return stock_prices", "raw_solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Create a DataFrame to store the stock prices\n    stock_prices = pd.DataFrame(index=pd.date_range(datetime.now() - timedelta(days=days_in_past), periods=days_in_past))\n    \n    # Add columns for each stock with random prices\n    for stock in stock_names:\n        stock_prices[stock] = np.random.rand(days_in_past)\n    \n    return stock_prices\n\n# Example usage\nresult = task_func(days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0)"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"pandas library is not installed. Please install it using pip install pandas\")\n\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as file1, open(file_path2, 'r', newline='', encoding='utf-8') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n\n            lines1 = list(reader1)\n            lines2 = list(reader2)\n\n            if not lines1:\n                raise ValueError(\"File 1 is empty\")\n            if not lines2:\n                raise ValueError(\"File 2 is empty\")\n\n            differences = []\n            for i, (line1, line2) in enumerate(zip(lines1, lines2)):\n                if line1 != line2:\n                    differences.append({'Line Number': i + 1, 'Status': '-', 'Content': '\\n'.join(line1)})\n                    differences.append({'Line Number': i + 1, 'Status': '+', 'Content': '\\n'.join(line2)})\n                else:\n                    differences.append({'Line Number': i + 1, 'Status': ' ', 'Content': '\\n'.join(line1)})\n\n            return pd.DataFrame(differences)\n\n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both of the files cannot be found\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")", "raw_solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"pandas library is not installed. Please install it using pip install pandas\")\n\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as file1, open(file_path2, 'r', newline='', encoding='utf-8') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n\n            lines1 = list(reader1)\n            lines2 = list(reader2)\n\n            if not lines1:\n                raise ValueError(\"File 1 is empty\")\n            if not lines2:\n                raise ValueError(\"File 2 is empty\")\n\n            differences = []\n            for i, (line1, line2) in enumerate(zip(lines1, lines2)):\n                if line1 != line2:\n                    differences.append({'Line Number': i + 1, 'Status': '-', 'Content': '\\n'.join(line1)})\n                    differences.append({'Line Number': i + 1, 'Status': '+', 'Content': '\\n'.join(line2)})\n                else:\n                    differences.append({'Line Number': i + 1, 'Status': ' ', 'Content': '\\n'.join(line1)})\n\n            return pd.DataFrame(differences)\n\n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both of the files cannot be found\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")\n\n```"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Convert the data list to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Calculate the sum, mean, min, and max of the specified column\n    sum_value = df[column].sum()\n    mean_value = df[column].mean()\n    min_value = df[column].min()\n    max_value = df[column].max()\n    \n    # Create a dictionary with the calculated statistics\n    statistics = {\n        'sum': sum_value,\n        'mean': mean_value,\n        'min': min_value,\n        'max': max_value\n    }\n    \n    # Create a pie chart using the Age column as labels\n    fig, ax = plt.subplots()\n    ax.pie(df[column], labels=df[column], autopct='%1.1f%%')\n    \n    # Return the statistics dictionary and the pie chart axes object\n    return statistics, ax", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    # Convert the data list to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Calculate the sum, mean, min, and max of the specified column\n    sum_value = df[column].sum()\n    mean_value = df[column].mean()\n    min_value = df[column].min()\n    max_value = df[column].max()\n    \n    # Create a dictionary with the calculated statistics\n    statistics = {\n        'sum': sum_value,\n        'mean': mean_value,\n        'min': min_value,\n        'max': max_value\n    }\n    \n    # Create a pie chart using the Age column as labels\n    fig, ax = plt.subplots()\n    ax.pie(df[column], labels=df[column], autopct='%1.1f%%')\n    \n    # Return the statistics dictionary and the pie chart axes object\n    return statistics, ax\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import to_numeric\n    \n    # Check if the required packages are imported\n    try:\n        from pandas import DataFrame\n        from pandas import to_datetime\n        from pandas import to_numeric\n    except ImportError:\n        raise ImportError(\"Pandas and Numpy packages are required for this task.\")\n    \n    # Check if the data list is empty\n    if not data:\n        raise ValueError(\"The data list is empty.\")\n    \n    # Convert the data list to a DataFrame\n    df = DataFrame(data)\n    \n    # Check if the specified column is valid\n    if column not in df.columns:\n        raise KeyError(\"The specified column is not valid.\")\n    \n    # Check if the numeric values for steps, calories burned, and distance walked are non-negative\n    if column in ['steps', 'calories_burned', 'distance_walked']:\n        if (df[column] < 0).any():\n            raise ValueError(\"The numeric values for steps, calories burned, and distance walked are negative.\")\n    \n    # Calculate the sum, mean, min, max of the column\n    column_stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    # Convert the Date column to datetime\n    df['Date'] = to_datetime(df['Date'])\n    \n    # Plot the line chart\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df[column], label=column)\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    ax.legend()\n    \n    return (column_stats, ax)", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(column, data):\n    from pandas import DataFrame\n    from pandas import to_datetime\n    from pandas import to_numeric\n    \n    # Check if the required packages are imported\n    try:\n        from pandas import DataFrame\n        from pandas import to_datetime\n        from pandas import to_numeric\n    except ImportError:\n        raise ImportError(\"Pandas and Numpy packages are required for this task.\")\n    \n    # Check if the data list is empty\n    if not data:\n        raise ValueError(\"The data list is empty.\")\n    \n    # Convert the data list to a DataFrame\n    df = DataFrame(data)\n    \n    # Check if the specified column is valid\n    if column not in df.columns:\n        raise KeyError(\"The specified column is not valid.\")\n    \n    # Check if the numeric values for steps, calories burned, and distance walked are non-negative\n    if column in ['steps', 'calories_burned', 'distance_walked']:\n        if (df[column] < 0).any():\n            raise ValueError(\"The numeric values for steps, calories burned, and distance walked are negative.\")\n    \n    # Calculate the sum, mean, min, max of the column\n    column_stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    # Convert the Date column to datetime\n    df['Date'] = to_datetime(df['Date'])\n    \n    # Plot the line chart\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df[column], label=column)\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    ax.legend()\n    \n    return (column_stats, ax)\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\nfrom importlib import import_module\ndef task_func(input_file=\"data.json\"):\n    # Load the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize a defaultdict to store the sums and counts for each key\n    sums = defaultdict(float)\n    counts = defaultdict(int)\n    \n    # Import numpy module dynamically\n    import_module('numpy', globals())\n    \n    # Calculate the sum and count for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                sums[key] += value\n                counts[key] += 1\n    \n    # Create a DataFrame to store the results\n    df = pd.DataFrame(index=sorted(sums.keys()))\n    \n    # Calculate mean and median for each key\n    for key in sums:\n        if counts[key] > 0:\n            mean = sums[key] / counts[key]\n            median = sorted([item[key] for item in data if isinstance(item[key], (int, float))])[counts[key] // 2]\n            df.loc[key] = [mean, median]\n        else:\n            df.loc[key] = [np.nan, np.nan]\n    \n    return df", "raw_solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\nfrom importlib import import_module\n\n# Import the required module dynamically\nimport_module('pandas', globals())\n\ndef task_func(input_file=\"data.json\"):\n    # Load the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize a defaultdict to store the sums and counts for each key\n    sums = defaultdict(float)\n    counts = defaultdict(int)\n    \n    # Import numpy module dynamically\n    import_module('numpy', globals())\n    \n    # Calculate the sum and count for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                sums[key] += value\n                counts[key] += 1\n    \n    # Create a DataFrame to store the results\n    df = pd.DataFrame(index=sorted(sums.keys()))\n    \n    # Calculate mean and median for each key\n    for key in sums:\n        if counts[key] > 0:\n            mean = sums[key] / counts[key]\n            median = sorted([item[key] for item in data if isinstance(item[key], (int, float))])[counts[key] // 2]\n            df.loc[key] = [mean, median]\n        else:\n            df.loc[key] = [np.nan, np.nan]\n    \n    return df\n\n# Test the function with the provided data points\n\n```"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    import pandas as pd\n    from collections import Counter\n    import matplotlib.pyplot as plt\n    from io import StringIO\n\n    # Check if pandas is installed\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"pandas is not installed. Please install pandas using pip install pandas.\")\n\n    # Check if matplotlib is installed\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        raise ImportError(\"matplotlib is not installed. Please install matplotlib using pip install matplotlib.\")\n\n    # Check if file_path is a string\n    if not isinstance(file_path, str):\n        raise ValueError(\"file_path must be a string\")\n\n    # Check if file_path ends with .csv\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"file_path must end with .csv\")\n\n    # Read the CSV file\n    try:\n        with open(file_path, 'r') as file:\n            csv_reader = csv.DictReader(file)\n            data = [row for row in csv_reader]\n    except FileNotFoundError:\n        raise FileNotFoundError(\"File not found. Please check the file path.\")\n\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Count the occurrences of each row\n    row_counts = Counter(tuple(row.items()) for row in df.to_dict(orient='records'))\n\n    # Create a dictionary with duplicate rows as keys and their counts as values\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert the dictionary to a pandas DataFrame\n    duplicates_df = pd.DataFrame(list(duplicates.items()), columns=['Row', 'Count'])\n\n    # Plot the bar chart of duplicate rows\n    fig, ax = plt.subplots()\n    duplicates_df.plot(kind='bar', x='Row', y='Count', ax=ax)\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates, ax", "raw_solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef task_func(file_path):\n    import pandas as pd\n    from collections import Counter\n    import matplotlib.pyplot as plt\n    from io import StringIO\n\n    # Check if pandas is installed\n    try:\n        import pandas as pd\n    except ImportError:\n        raise ImportError(\"pandas is not installed. Please install pandas using pip install pandas.\")\n\n    # Check if matplotlib is installed\n    try:\n        import matplotlib.pyplot as plt\n    except ImportError:\n        raise ImportError(\"matplotlib is not installed. Please install matplotlib using pip install matplotlib.\")\n\n    # Check if file_path is a string\n    if not isinstance(file_path, str):\n        raise ValueError(\"file_path must be a string\")\n\n    # Check if file_path ends with .csv\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"file_path must end with .csv\")\n\n    # Read the CSV file\n    try:\n        with open(file_path, 'r') as file:\n            csv_reader = csv.DictReader(file)\n            data = [row for row in csv_reader]\n    except FileNotFoundError:\n        raise FileNotFoundError(\"File not found. Please check the file path.\")\n\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Count the occurrences of each row\n    row_counts = Counter(tuple(row.items()) for row in df.to_dict(orient='records'))\n\n    # Create a dictionary with duplicate rows as keys and their counts as values\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert the dictionary to a pandas DataFrame\n    duplicates_df = pd.DataFrame(list(duplicates.items()), columns=['Row', 'Count'])\n\n    # Plot the bar chart of duplicate rows\n    fig, ax = plt.subplots()\n    duplicates_df.plot(kind='bar', x='Row', y='Count', ax=ax)\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates, ax\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    # Round down age to the nearest integer and ensure age is not negative\n    df['age'] = df['age'].apply(lambda x: int(x) if x >= 0 else 0)\n    \n    # Check if there are any negative ages\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    # Identify duplicate names\n    duplicates = df[df.duplicated('name', keep=False)]\n    \n    # Record the age distribution for duplicate names\n    age_distribution = Counter(duplicates['age'])\n    \n    # Create a histogram plot if there are duplicates\n    if not duplicates.empty:\n        # Calculate bins based on the minimum and maximum ages\n        min_age = duplicates['age'].min()\n        max_age = duplicates['age'].max()\n        bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n        \n        # Plot the histogram\n        plt.figure(figsize=(10, 6))\n        sns.histplot(duplicates['age'], bins=bins, kde=False, color='blue')\n        plt.xlabel('Age')\n        plt.ylabel('Count')\n        plt.title('Age Distribution for Duplicate Names')\n        plt.show()\n    else:\n        plt = None\n    \n    return age_distribution, plt", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    # Round down age to the nearest integer and ensure age is not negative\n    df['age'] = df['age'].apply(lambda x: int(x) if x >= 0 else 0)\n    \n    # Check if there are any negative ages\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    # Identify duplicate names\n    duplicates = df[df.duplicated('name', keep=False)]\n    \n    # Record the age distribution for duplicate names\n    age_distribution = Counter(duplicates['age'])\n    \n    # Create a histogram plot if there are duplicates\n    if not duplicates.empty:\n        # Calculate bins based on the minimum and maximum ages\n        min_age = duplicates['age'].min()\n        max_age = duplicates['age'].max()\n        bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n        \n        # Plot the histogram\n        plt.figure(figsize=(10, 6))\n        sns.histplot(duplicates['age'], bins=bins, kde=False, color='blue')\n        plt.xlabel('Age')\n        plt.ylabel('Count')\n        plt.title('Age Distribution for Duplicate Names')\n        plt.show()\n    else:\n        plt = None\n    \n    return age_distribution, plt\n\n# Example usage\n# import pandas as pd\n# data = {'name': ['Alice', 'Bob', 'Alice', 'Charlie', 'Bob', 'Alice'],\n#         'age': [25.5, 30.2, 25.5, 35.7, 30.2, 25.5]}\n# df = pd.DataFrame(data)\n# age_distribution, plt = task_func(df)\n# print(age_distribution)\n\n```"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\ndef task_func(df, bins=4):\n    from pandas import import_\n    from pandas.core import import_\n    from pandas.core import pandas as _\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_", "raw_solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\n\ndef task_func(df, bins=4):\n    from pandas import import_\n    from pandas.core import import_\n    from pandas.core import pandas as _\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import pandas as import_\n    from pandas.core import"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    # Create a DataFrame with random values\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=COLUMNS[:len(b)])\n    # Plot the DataFrame as a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n    return ax\na = ['row1', 'row2', 'row3']\nb = ['col1', 'col2']", "raw_solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\ndef task_func(a, b):\n    # Create a DataFrame with random values\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=COLUMNS[:len(b)])\n    # Plot the DataFrame as a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n    return ax\n\n# Test the function with example data\na = ['row1', 'row2', 'row3']\nb = ['col1', 'col2']\nax = task_func(a, b)\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas import DataFrame\nimport pandas as pd\ndef task_func(data):\n    # Convert the data to a pandas DataFrame\n    df = DataFrame(data)\n    \n    # Convert the 'month' column to datetime objects\n    df['month'] = pd.to_datetime(df['month'], format='%B')\n    \n    # Set the 'month' column as the index\n    df.set_index('month', inplace=True)\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    df['value'].plot(kind='bar', ax=ax)\n    \n    # Set the title, x label, and y label\n    ax.set_title('Monthly Data for {}'.format(df.index.year[0]))\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax", "raw_solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas import DataFrame\n\n# Add this line at the beginning of the script to import pandas\nimport pandas as pd\n\ndef task_func(data):\n    # Convert the data to a pandas DataFrame\n    df = DataFrame(data)\n    \n    # Convert the 'month' column to datetime objects\n    df['month'] = pd.to_datetime(df['month'], format='%B')\n    \n    # Set the 'month' column as the index\n    df.set_index('month', inplace=True)\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    df['value'].plot(kind='bar', ax=ax)\n    \n    # Set the title, x label, and y label\n    ax.set_title('Monthly Data for {}'.format(df.index.year[0]))\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    \n    # Return the Axes object\n    return ax\n\n# Test the function with the provided data points\n\n```"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert the input string to a pandas Series\n    data = pd.Series(data.split())\n    \n    # Convert the Series to numeric values, coercing errors to NaN\n    data = pd.to_numeric(data, errors='coerce')\n    \n    # Filter out NaN values\n    data = data.dropna()\n    \n    # Create a histogram using matplotlib\n    ax = data.plot(kind='hist', bins=np.arange(data.min(), data.max()+2) - 0.5, edgecolor='black')\n    \n    # Set the title and labels\n    ax.set_title('Histogram of Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Return the Axes object\n    return ax\ndata = \"1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10\"", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    # Convert the input string to a pandas Series\n    data = pd.Series(data.split())\n    \n    # Convert the Series to numeric values, coercing errors to NaN\n    data = pd.to_numeric(data, errors='coerce')\n    \n    # Filter out NaN values\n    data = data.dropna()\n    \n    # Create a histogram using matplotlib\n    ax = data.plot(kind='hist', bins=np.arange(data.min(), data.max()+2) - 0.5, edgecolor='black')\n    \n    # Set the title and labels\n    ax.set_title('Histogram of Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Return the Axes object\n    return ax\n\n# Example usage:\ndata = \"1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10\"\nax = task_func(data)\n\n# Show the plot\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate a noisy sine wave\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n    \n    # Define the function to fit\n    def func(x, a, b, c):\n        return a * np.sin(b * x + c)\n    \n    # Fit the function to the data\n    popt, pcov = curve_fit(func, x, y)\n    \n    # Plot the original noisy sine wave and the adjusted curve\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='Noisy Sine Wave')\n    ax.plot(x, func(x, *popt), 'r-', label='Adjusted Curve')\n    ax.legend()\n    return ax", "raw_solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate a noisy sine wave\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n    \n    # Define the function to fit\n    def func(x, a, b, c):\n        return a * np.sin(b * x + c)\n    \n    # Fit the function to the data\n    popt, pcov = curve_fit(func, x, y)\n    \n    # Plot the original noisy sine wave and the adjusted curve\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='Noisy Sine Wave')\n    ax.plot(x, func(x, *popt), 'r-', label='Adjusted Curve')\n    ax.legend()\n    return ax\n\n# Test the function\nax = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join(' '.join(row) for row in reader)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The CSV file cannot be found at the specified path.\")\n    except IOError:\n        raise IOError(\"There is an error in reading the file.\")\n\n    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')\n    words = text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('10 Most Common Words')\n\n    return (ax, most_common_words)", "raw_solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join(' '.join(row) for row in reader)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The CSV file cannot be found at the specified path.\")\n    except IOError:\n        raise IOError(\"There is an error in reading the file.\")\n\n    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')\n    words = text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('10 Most Common Words')\n\n    return (ax, most_common_words)\n\n```"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.randn(size)\n    \n    # Create a figure object\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram of the data\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    \n    # Plot the probability density function (PDF) of the normal distribution\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, 0, 1)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set the title and labels\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    \n    return fig", "raw_solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.randn(size)\n    \n    # Create a figure object\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram of the data\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    \n    # Plot the probability density function (PDF) of the normal distribution\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, 0, 1)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set the title and labels\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    \n    return fig\n\n# Test the function\nfig = task_func()\nplt.show()\n\n```"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\ndef task_func():\n    from Crypto.PublicKey import RSA\n    from Crypto.Cipher import PKCS1_OAEP\n    from Crypto.Cipher import AES\n    from Crypto.Util.Padding import pad, unpad\n    from Crypto.Random import get_random_bytes\n    from Crypto.Cipher import PKCS1_OAEP\n    from Crypto.PublicKey import RSA", "raw_solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\n\ndef task_func():\n    from Crypto.PublicKey import RSA\n    from Crypto.Cipher import PKCS1_OAEP\n    from Crypto.Cipher import AES\n    from Crypto.Util.Padding import pad, unpad\n    from Crypto.Random import get_random_bytes\n    from Crypto.Cipher import PKCS1_OAEP\n    from Crypto.PublicKey import RSA\n    from Crypto.Cipher import PKCS1_OAEP from Crypto.Cipher from Crypto.Cipher import PKCS1_OAEP from Crypto.Cipher from Crypto.Cipher import PKCS1_OAEP from Crypto.Cipher from Crypto.Cipher from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from Crypto from"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n    \n    # Encrypt the file using AES encryption\n    aes_key = os.urandom(32)  # Generate a random AES key\n    iv = os.urandom(16)  # Generate a random IV\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    encrypted_file_data = encryptor.update(file_data) + encryptor.finalize()\n    \n    # Save the encrypted file\n    encrypted_file_path = file_path + '.enc'\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(encrypted_file_data)\n    \n    # Encrypt the AES key with the public RSA key\n    encrypted_aes_key = rsa.encrypt(aes_key, public_key)\n    \n    # Save the encrypted AES key\n    encrypted_aes_key_path = file_path + '.aes.enc'\n    with open(encrypted_aes_key_path, 'wb') as f:\n        f.write(encrypted_aes_key)\n    \n    return public_key, encrypted_file_path, encrypted_aes_key_path", "raw_solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n    \n    # Encrypt the file using AES encryption\n    aes_key = os.urandom(32)  # Generate a random AES key\n    iv = os.urandom(16)  # Generate a random IV\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    encrypted_file_data = encryptor.update(file_data) + encryptor.finalize()\n    \n    # Save the encrypted file\n    encrypted_file_path = file_path + '.enc'\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(encrypted_file_data)\n    \n    # Encrypt the AES key with the public RSA key\n    encrypted_aes_key = rsa.encrypt(aes_key, public_key)\n    \n    # Save the encrypted AES key\n    encrypted_aes_key_path = file_path + '.aes.enc'\n    with open(encrypted_aes_key_path, 'wb') as f:\n        f.write(encrypted_aes_key)\n    \n    return public_key, encrypted_file_path, encrypted_aes_key_path\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\nfrom urllib.error import URLError\ndef task_func(url):\n    if not url:\n        raise ValueError(\"URL is empty\")\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        import pandas as pd\n    except ImportError:\n        import pandas as pd\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq", "raw_solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\nfrom urllib.error import URLError\n\ndef task_func(url):\n    if not url:\n        raise ValueError(\"URL is empty\")\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        import pandas as pd\n    except ImportError:\n        import pandas as pd\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from urllib.request import urlopen\n    except ImportError:\n        from urllib.request import urlopen\n    try:\n        from urllib.error import URLError\n    except ImportError:\n        from urllib.error import URLError\n    try:\n        from datetime import datetime\n    except ImportError:\n        from datetime import datetime\n    try:\n        from pyquery import PyQuery as pq\n    except ImportError:\n        from pyquery import PyQuery as pq\n    try:\n        from pandas import DataFrame\n    except ImportError:\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        from importlib import import_module\n        import_dir = import_module('os')\n        import_dir.mkdir(output_dir)\n    \n    # Generate sensor data\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('from datetime import datetime, timedelta; from random import randint; import csv; import os')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    import_dir.system('from os import system; system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    # Generate sensor data\n    from datetime import datetime, timedelta\n    from random import randint\n    import csv\n    import os\n    \n    # Generate sensor data\n    data = []\n    for _ in range(hours * 60):\n        timestamp = datetime.now() + timedelta(minutes=_)\n        row = [timestamp.strftime('%Y-%m-%d %H:%M:%S')]\n        for sensor in SENSORS:\n            row.append(randint(0, 100))\n        data.append(row)\n    \n    # Write data to CSV file\n    import csv\n    with open(os.path.join(output_dir, 'sensor_data.csv'), 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time'] + SENSORS)\n        writer.writerows(data)\n    \n    # Return the path to the CSV file\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    import_dir.system('from os import system; system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")\")')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('import importlib; from importlib import reload; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    import_dir.system('import_dir.system(\"import importlib; from importlib import reload; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")\")')\n    \n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system", "raw_solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        from importlib import import_module\n        import_dir = import_module('os')\n        import_dir.mkdir(output_dir)\n    \n    # Generate sensor data\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('from datetime import datetime, timedelta; from random import randint; import csv; import os')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    import_dir.system('from os import system; system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    # Generate sensor data\n    from datetime import datetime, timedelta\n    from random import randint\n    import csv\n    import os\n    \n    # Generate sensor data\n    data = []\n    for _ in range(hours * 60):\n        timestamp = datetime.now() + timedelta(minutes=_)\n        row = [timestamp.strftime('%Y-%m-%d %H:%M:%S')]\n        for sensor in SENSORS:\n            row.append(randint(0, 100))\n        data.append(row)\n    \n    # Write data to CSV file\n    import csv\n    with open(os.path.join(output_dir, 'sensor_data.csv'), 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time'] + SENSORS)\n        writer.writerows(data)\n    \n    # Return the path to the CSV file\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    import_dir.system('from os import system; system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")\")')\n    \n    # Import datetime, timedelta, randint, csv, and os from os module\n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('import importlib; from importlib import reload; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")')\n    \n    import_dir.system('import_dir.system(\"import importlib; from importlib import reload; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from datetime import datetime, timedelta; from random import randint; import csv; import os\")\")')\n    \n    from importlib import import_module\n    import_dir = import_module('os')\n    import_dir.system = import_module('os').system\n    import_dir.system('import_dir.system(\"import importlib; from importlib import reload; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os\"); import_dir.system = import_module(\"os\").system; import_dir.system(\"from importlib import import_module; import_dir = import_module(\"os"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nimport pandas as pd\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\nimport sys\nsys.modules['pandas'] = pd\ndef task_func(hours, output_dir):\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    from pandas import DataFrame\n    import pandas as pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame", "raw_solution": "import csv\nimport os\nimport pandas as pd\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n\n# Constants\nfrom pandas import DataFrame\nimport sys\nsys.modules['pandas'] = pd\n\ndef task_func(hours, output_dir):\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    import sys\n    sys.modules['pandas'] = pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from random import randint\n    import pandas as pd\n    from pandas import DataFrame\n    from pandas import DataFrame\n    import pandas as pd\n    from datetime import datetime\n    from random import randint\n    import matplotlib\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import DataFrame\n    from pandas import"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')\n        importlib.reload(importlib.import_module('os'))\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')\n        importlib.reload(importlib.import_module('os'))\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')", "raw_solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')\n        importlib.reload(importlib.import_module('os'))\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')\n        importlib.reload(importlib.import_module('os'))\n        from datetime import datetime\n        import importlib\n        importlib.import_module('os.path').__builtins__.os = importlib.import_module('os')\n        importlib.reload(import_module('os.path').__builtins__.os = importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = importlib.import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = importlib.import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.import_module('os.path').__builtins__.os.path = import_module('os.path')\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import importlib\n        import importlib.reload(importlib.import_module('os.path').__builtins__.os.path)\n        from datetime import datetime\n        import import"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties):\n    # Generate random data for each team\n    data = {\n        'Team': TEAMS,\n        'Goals': [randint(0, goals) for _ in TEAMS],\n        'Penalty Cost': [randint(0, penalties) for _ in TEAMS]\n    }\n    \n    # Convert penalty costs to fines\n    data['Fine'] = [cost * PENALTY_COST for cost in data['Penalty Cost']]\n    \n    # Create a Pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create two seaborn plots\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n    \n    # Plot goals\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0])\n    axes[0].set_title('Goals per Team')\n    \n    # Plot fines\n    sns.barplot(x='Team', y='Fine', data=df, ax=axes[1])\n    axes[1].set_title('Fines per Team')\n    \n    return df, [axes[0], axes[1]]", "raw_solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    # Generate random data for each team\n    data = {\n        'Team': TEAMS,\n        'Goals': [randint(0, goals) for _ in TEAMS],\n        'Penalty Cost': [randint(0, penalties) for _ in TEAMS]\n    }\n    \n    # Convert penalty costs to fines\n    data['Fine'] = [cost * PENALTY_COST for cost in data['Penalty Cost']]\n    \n    # Create a Pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create two seaborn plots\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n    \n    # Plot goals\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0])\n    axes[0].set_title('Goals per Team')\n    \n    # Plot fines\n    sns.barplot(x='Team', y='Fine', data=df, ax=axes[1])\n    axes[1].set_title('Fines per Team')\n    \n    return df, [axes[0], axes[1]]\n\n# Example usage\ndf, plots = task_func(10, 5)"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    # Generate a DataFrame with random integer values between 0 and 9\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    \n    # Count the non-zero values in each column\n    non_zero_counts = df.count() - df.eq(0).sum()\n    \n    # Create a bar plot to visualize the non-zero values\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n    \n    return df, ax", "raw_solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\ndef task_func(rows):\n    # Generate a DataFrame with random integer values between 0 and 9\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    \n    # Count the non-zero values in each column\n    non_zero_counts = df.count() - df.eq(0).sum()\n    \n    # Create a bar plot to visualize the non-zero values\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n    \n    return df, ax\n\n# Example usage\ndf, ax = task_func(10)"}
{"task_id": "BigCodeBench/637", "solution": "import random\nimport numpy as np\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndef task_func(num_students):\n    # Create a random number generator\n    random.seed(0)\n    \n    # Create a new random number generator from the existing one\n    from random import Random\n    random = Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint", "raw_solution": "import random\nimport numpy as np\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Add the missing import statement\nimport numpy as np\n\ndef task_func(num_students):\n    # Create a random number generator\n    random.seed(0)\n    \n    # Create a new random number generator from the existing one\n    from random import Random\n    random = Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    seed(0)\n    import random\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    from random import randint\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    seed(0)\n    random = random.Random(random.randint(0, 1000000))\n    \n    # Generate a random number between 1 and 100\n    from random import randint\n    from random import seed\n    import random\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from random import randint\n    from"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\nfrom scipy import stats\ndef task_func(array, target_value):\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    # Convert the array from a list to a NumPy array\n    import numpy as np\n    array = np.array(array)\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    # Filter the array to include only rows where the first column matches the target value\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats", "raw_solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\nfrom scipy import stats\n\ndef task_func(array, target_value):\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    # Convert the array from a list to a NumPy array\n    import numpy as np\n    array = np.array(array)\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    # Filter the array to include only rows where the first column matches the target value\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as from scipy import stats\n    import matplotlib.pyplot as plt\n    import scipy.optimize as optimize\n    from scipy import stats\n    import numpy as from scipy import stats\n    import matplotlib.pyplot as from scipy import stats\n    import from scipy import stats\n    import matplotlib.pyplot as from scipy import stats\n    import scipy.optimize as from scipy import stats\n    import from scipy import stats\n    import matplotlib.pyplot as from scipy import stats\n    import scipy.optimize as from scipy import from scipy import stats\n    import matplotlib.pyplot as from scipy import from scipy import stats\n    import from scipy import from scipy import from scipy import stats\n    import matplotlib.pyplot as from scipy import from scipy import from scipy import from scipy import stats\n    import scipy.optimize as from scipy import from scipy import from scipy import from scipy import from scipy import stats\n    import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import stats\n    import matplotlib.pyplot as from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import stats\n    import scipy.optimize as from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import stats\n    import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from scipy import from"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(texts, num_topics):\n    # Preprocess the input texts\n    processed_texts = []\n    for text in texts:\n        text = re.sub(ALPHANUMERIC, ' ', text)\n        text = text.lower()\n        words = [word for word in text.split() if word not in STOPWORDS]\n        processed_texts.append(' '.join(words))\n\n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    X = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF to extract the specified number of topics\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(X)\n\n    # Extract the most significant words for each topic\n    topics = []\n    for i in range(num_topics):\n        topic_words = [word for word, weight in zip(vectorizer.get_feature_names_out(), nmf.components_[i])]\n        topic_words.sort(key=lambda word: weight, reverse=True)\n        topics.append(topic_words[:10])  # Adjust the number of words per topic as needed\n\n    return topics\ntexts = [\n    \"Python is a great programming language\",\n    \"Java is also a great programming language\",\n    \"Python is used for web development\",\n    \"Java is used for enterprise applications\"\n]\nnum_topics = 2", "raw_solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef task_func(texts, num_topics):\n    # Preprocess the input texts\n    processed_texts = []\n    for text in texts:\n        text = re.sub(ALPHANUMERIC, ' ', text)\n        text = text.lower()\n        words = [word for word in text.split() if word not in STOPWORDS]\n        processed_texts.append(' '.join(words))\n\n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    X = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF to extract the specified number of topics\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(X)\n\n    # Extract the most significant words for each topic\n    topics = []\n    for i in range(num_topics):\n        topic_words = [word for word, weight in zip(vectorizer.get_feature_names_out(), nmf.components_[i])]\n        topic_words.sort(key=lambda word: weight, reverse=True)\n        topics.append(topic_words[:10])  # Adjust the number of words per topic as needed\n\n    return topics\n\n# Example usage\ntexts = [\n    \"Python is a great programming language\",\n    \"Java is also a great programming language\",\n    \"Python is used for web development\",\n    \"Java is used for enterprise applications\"\n]\nnum_topics = 2"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nfrom nltk.corpus import stopwords\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    if stopwords is None:\n        stopwords = set(stopwords.words('english'))\n    # Clean and preprocess the texts\n    cleaned_texts = []\n    for text in texts:\n        text = ALPHANUMERIC.sub(' ', text)\n        text = text.lower()\n        words = text.split()\n        words = [word for word in words if word not in stopwords]\n        cleaned_texts.append(words)\n    # Train the Word2Vec model\n    model = Word2Vec(cleaned_texts, vector_size=100, window=5, min_count=1, workers=4)\n    return model", "raw_solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nfrom nltk.corpus import stopwords\nnltk.download('stopwords', quiet=True)\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(texts, stopwords=None):\n    if stopwords is None:\n        stopwords = set(stopwords.words('english'))\n    # Clean and preprocess the texts\n    cleaned_texts = []\n    for text in texts:\n        text = ALPHANUMERIC.sub(' ', text)\n        text = text.lower()\n        words = text.split()\n        words = [word for word in words if word not in stopwords]\n        cleaned_texts.append(words)\n    # Train the Word2Vec model\n    model = Word2Vec(cleaned_texts, vector_size=100, window=5, min_count=1, workers=4)\n    return model\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    # Create a list to store DataFrames\n    dfs = []\n    \n    # Check if the path exists, if not, create it\n    if not os.path.exists(path):\n        os.makedirs(path)\n    \n    # Check if the 'processed' subdirectory exists, if not, create it\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n    \n    # Import necessary library\n    import importlib.util\n    import importlib.machinery\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util", "raw_solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    # Create a list to store DataFrames\n    dfs = []\n    \n    # Check if the path exists, if not, create it\n    if not os.path.exists(path):\n        os.makedirs(path)\n    \n    # Check if the 'processed' subdirectory exists, if not, create it\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n    \n    # Import necessary library\n    import importlib.util\n    import importlib.machinery\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import importlib.util.util\n    import import importlib.util\n    import import importlib.machinery\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import importlib.util\n    import import"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    # Define the path to the CSV file\n    file_path = \"task_func_data/Output.txt\"\n    \n    # Create the directory if it doesn't exist", "raw_solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    # Define the path to the CSV file\n    file_path = \"task_func_data/Output.txt\"\n    \n    # Create the directory if it doesn't exist\n    os.makedirs(os.path.dirname(file_path), exist_import from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os import exist_import\n    from os from os import import\n    from os import import\n    from os import import\n    from os import import\n    from os import import\n    from os import import\n    from os import import\n    from os import import\n    from os from os import from\n    from os import from\n    from os import from\n    from os from os import from\n    from os import from\n    from os import from\n    from os from os import from\n    from os import from\n    from os import from\n    from os from os import from\n    from os import from\n    from os import from\n    from os from os import from\n    from os import from\n    from os from os import from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os from\n    from os from os"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nfrom bs4 import BeautifulSoup", "raw_solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import task_func\nimport csv\nfrom task_func import BeautifulSoup\nimport csv\nfrom task_func import task_func\nfrom task_func import BeautifulSoup\nfrom task_func import task_func from task_func import BeautifulSoup\nimport task_func from task_func import BeautifulSoup\nfrom task_module import BeautifulSoup\nfrom task_module import task_func\nfrom task_module import task_func from task_module import task_func\nimport task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nimport task_module from task_module import BeautifulSoup\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module import task_module\nfrom task_module import task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module from task_module"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    from sklearn import datasets\n    datasets.__path__.append('numpy')\n    from importlib import reload\n    reload(datasets)\n    from importlib import import_module\n    import_module('pandas', 'numpy')\n    from pandas import DataFrame\n    from sklearn import datasets\n    datasets.__path__.remove('numpy')\n    from importlib import reload\n    reload(datasets)\n    from import_module import import_module\n    import_module('pandas', 'pandas')\n    from pandas import DataFrame\n    from sklearn import datasets\n    from importlib import reload\n    from importlib import import_module\n    import_module('pandas', 'pandas')\n    from pandas import DataFrame\n    from sklearn import datasets\n    from importlib import reload\n    from import_module import import_module\n    from pandas import import_module\n    from pandas import DataFrame\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module", "raw_solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    from sklearn import datasets\n    datasets.__path__.append('numpy')\n    from importlib import reload\n    reload(datasets)\n    from importlib import import_module\n    import_module('pandas', 'numpy')\n    from pandas import DataFrame\n    from sklearn import datasets\n    datasets.__path__.remove('numpy')\n    from importlib import reload\n    reload(datasets)\n    from import_module import import_module\n    import_module('pandas', 'pandas')\n    from pandas import DataFrame\n    from sklearn import datasets\n    from importlib import reload\n    from importlib import import_module\n    import_module('pandas', 'pandas')\n    from pandas import DataFrame\n    from sklearn import datasets\n    from importlib import reload\n    from import_module import import_module\n    from pandas import import_module\n    from pandas import DataFrame\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import_module\n    from pandas import import"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\nfrom io import StringIO\nimport sys\nimport pandas as pd\nimport numpy as np\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    # Importing numpy again after the initial import error\n    import numpy as np\n    \n    # Setting the random seed if provided\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Creating a list of all names by combining Latin and other names\n    all_names = latin_names + other_names\n    \n    # Generating a DataFrame with 100 records\n    data = {\n        'ID': range(1, 101),\n        'Name': [all_names[np.random.randint(0, len(all_names))] for _ in range(100)],\n        'Date of Birth': [datetime.datetime(start_year + np.random.randint(0, end_year - start_year), \n                                           np.random.randint(1, 13), \n                                           np.random.randint(1, 28)).strftime('%Y-%m-%d') for _ in range(100)],\n        'Email': [re.sub(r'[^\\x00-\\x7F]+', '', name.lower()) + date[-2:] + '@' + email_domain for name, date in zip(data['Name'], data['Date of Birth'])]\n    }\n    \n    # Creating the DataFrame\n    df = pd.DataFrame(data)\n    \n    return df", "raw_solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\nfrom io import StringIO\nimport sys\n\n# Inserting 'numpy' at the beginning of the sys.modules to avoid import error\nsys.modules['numpy'] = sys.modules.pop('pandas')\n\n# Correcting the import error\nimport pandas as pd\nimport numpy as np\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    # Importing numpy again after the initial import error\n    import numpy as np\n    \n    # Setting the random seed if provided\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Creating a list of all names by combining Latin and other names\n    all_names = latin_names + other_names\n    \n    # Generating a DataFrame with 100 records\n    data = {\n        'ID': range(1, 101),\n        'Name': [all_names[np.random.randint(0, len(all_names))] for _ in range(100)],\n        'Date of Birth': [datetime.datetime(start_year + np.random.randint(0, end_year - start_year), \n                                           np.random.randint(1, 13), \n                                           np.random.randint(1, 28)).strftime('%Y-%m-%d') for _ in range(100)],\n        'Email': [re.sub(r'[^\\x00-\\x7F]+', '', name.lower()) + date[-2:] + '@' + email_domain for name, date in zip(data['Name'], data['Date of Birth'])]\n    }\n    \n    # Creating the DataFrame\n    df = pd.DataFrame(data)\n    \n    return df\n\n# Example usage\ndf = task_func(start_year=0, end_year=1200, email_domain='test.at', rng_seed=3)"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\ntask_func_input_file.task_func_input_file(task_func_input_file.task_func_input_file(task_func_input_file))\nfrom task_func_input_file.task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file", "raw_solution": "import numpy as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\ntask_func_input_file.task_func_input_file(task_func_input_file.task_func_input_file(task_func_input_file))\nfrom task_func_input_file.task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file(task_func_input_file)\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func_input_file\nfrom task_input_file import task_func as task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func as task_func from task_func_input_file import task_func from task_func_input_file import task_func as task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func_input_file from task_func_input_file import task_func_input_file\nfrom task_func_input_file import task_func from task_func"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None and content != \"\":\n            target_path = Path(target_dir) / Path(file_path).name\n            target_path.parent.mkdir(parents=True, exist_ok=True)\n            with open(file_path, 'r') as src, open(target_path, 'w') as dst:\n                shutil.copyfileobj(src, dst)\n            copied_files.append(str(target_path))\n    return copied_files", "raw_solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None and content != \"\":\n            target_path = Path(target_dir) / Path(file_path).name\n            target_path.parent.mkdir(parents=True, exist_ok=True)\n            with open(file_path, 'r') as src, open(target_path, 'w') as dst:\n                shutil.copyfileobj(src, dst)\n            copied_files.append(str(target_path))\n    return copied_files\n\n```"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    directory_path = Path(directory)\n    for file in directory_path.iterdir():\n        if file.is_file() and file.suffix == '.csv':\n            match = re.match(pattern, file.stem)\n            if match:\n                new_filename = f\"{match.group(1)}.csv\"\n                new_file_path = directory_path / new_filename\n                with open(file, 'r') as old_file, open(new_file_path, 'w', newline='') as new_file:\n                    reader = csv.reader(old_file)\n                    writer = csv.writer(new_file)\n                    for row in reader:\n                        writer.writerow(row)\n                new_files.append(new_filename)\n    return new_files", "raw_solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    directory_path = Path(directory)\n    for file in directory_path.iterdir():\n        if file.is_file() and file.suffix == '.csv':\n            match = re.match(pattern, file.stem)\n            if match:\n                new_filename = f\"{match.group(1)}.csv\"\n                new_file_path = directory_path / new_filename\n                with open(file, 'r') as old_file, open(new_file_path, 'w', newline='') as new_file:\n                    reader = csv.reader(old_file)\n                    writer = csv.writer(new_file)\n                    for row in reader:\n                        writer.writerow(row)\n                new_files.append(new_filename)\n    return new_files\n\n# Test cases\n\n```"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    import os\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        import os\n        from zipfile import ZipFile\n        os.path.join(directory, filename)\n        if zipfile in locals():\n            from importlib import reload\n            reload(zipfile)\n        from zipfile import zipfile\n        zipfile.__name__ = 'zipfile'\n        from importlib import import_module\n        import_module.__builtins__['zipfile'] = zipfile\n        from importlib import reload\n        import importlib\n        import importlib\n        from importlib import reload\n        import importlib\n        from importlib import import_module\n        import importlib\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module", "raw_solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    import os\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        import os\n        from zipfile import ZipFile\n        os.path.join(directory, filename)\n        if zipfile in locals():\n            from importlib import reload\n            reload(zipfile)\n        from zipfile import zipfile\n        zipfile.__name__ = 'zipfile'\n        from importlib import import_module\n        import_module.__builtins__['zipfile'] = zipfile\n        from importlib import reload\n        import importlib\n        import importlib\n        from importlib import reload\n        import importlib\n        from importlib import import_module\n        import importlib\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from importlib import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n        from import_module import import_module\n       "}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        from subprocess import Popen, PIPE\n        import os\n        os.system('import sys; sys.path.insert(0, \\'/usr/lib/python3.8\\'); from subprocess import Popen, PIPE; import os; os.system(\\'mkdir -p /tmp/archive\\')')\n        from subprocess import Popen, PIPE\n        import sys\n        sys.path.insert(0, '/usr/lib/python3.8')\n        from subprocess import Popen, PIPE\n        import os\n        os.system('mkdir -p /tmp/archive')\n\n    import os\n    from subprocess import Popen, PIPE\n    import sys\n    sys.path.insert(0, '/usr/lib/python3.8')\n    from subprocess import Popen, PIPE\n    import os\n    from subprocess import Popen, PIPE\n    import sys\n    sys.path.insert(0, '/usr/lib/python3.8')\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE", "raw_solution": "import subprocess\nimport os\nimport glob\nfrom datetime import datetime\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        from subprocess import Popen, PIPE\n        import os\n        os.system('import sys; sys.path.insert(0, \\'/usr/lib/python3.8\\'); from subprocess import Popen, PIPE; import os; os.system(\\'mkdir -p /tmp/archive\\')')\n        from subprocess import Popen, PIPE\n        import sys\n        sys.path.insert(0, '/usr/lib/python3.8')\n        from subprocess import Popen, PIPE\n        import os\n        os.system('mkdir -p /tmp/archive')\n\n    import os\n    from subprocess import Popen, PIPE\n    import sys\n    sys.path.insert(0, '/usr/lib/python3.8')\n    from subprocess import Popen, PIPE\n    import os\n    from subprocess import Popen, PIPE\n    import sys\n    sys.path.insert(0, '/usr/lib/python3.8')\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from subprocess import Popen, PIPE\n    from"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nfrom collections import Counter\nimport os\nCSV_FILE_PATH = 'match_data.csv'\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    # Check if the test_data directory exists, if not, create it\n    if not os.path.exists('test_data'):\n        from importlib import import_module\n        import sys\n        importlib.import_module('os.path', globals(), locals())\n        sys.modules['os.path'] = import_module('os.path', fromlist=['os'])\n        os.path = import_module('os')\n        os.path.__builtins__ = __builtins__\n        from importlib import reload\n        reload(sys.modules['os'])\n        from importlib import import_module\n        sys.modules['os'] = import_module('os')\n        from importlib import reload\n        reload(sys.modules['os'])\n        from importlib import import_module\n        sys.modules['os.path'] = import_module('os.path', fromlist=['os.path'])", "raw_solution": "import csv\nfrom collections import Counter\nimport os\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    # Check if the test_data directory exists, if not, create it\n    if not os.path.exists('test_data'):\n        from importlib import import_module\n        import sys\n        importlib.import_module('os.path', globals(), locals())\n        sys.modules['os.path'] = import_module('os.path', fromlist=['os'])\n        os.path = import_module('os')\n        os.path.__builtins__ = __builtins__\n        from importlib import reload\n        reload(sys.modules['os'])\n        from importlib import import_module\n        sys.modules['os'] = import_module('os')\n        from importlib import reload\n        reload(sys.modules['os'])\n        from importlib import import_module\n        sys.modules['os.path'] = import_module('os.path', fromlist=['os.path'])\n        from import import_module\n        import os.path\n        from importlib import reload\n        reload(os.path)\n        from importlib import import_module\n        import os.path\n        from importlib import reload\n        reload(os.path)\n        from importlib import import_module\n        from importlib import reload\n        reload(sys.modules['os.path'])\n        from importlib import import_module\n        from importlib import reload\n        reload(sys.modules['os'])\n        from importlib import import_module\n        from importlib import reload\n        reload(sys.modules['os.path'])\n        from import import_module\n        import os\n        from importlib import reload\n        reload(os)\n        from importlib import import_module\n        from importlib import reload\n        reload(sys.modules['os'])\n        from import import_module\n        import os\n        from importlib import reload\n        reload(os)\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from importlib import reload\n        from importlib import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import import_module\n        from import_module import reload\n        from import_module import"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    import os\n    from pathlib import Path\n    import re\n\n    # Importing necessary modules\n    from shutil import move\n\n    # Ensure the target directory exists\n    Path(target_dir).mkdir(parents=True, exist_ok=True)\n\n    # Initialize the count of moved files\n    moved_files_count = 0\n\n    # Iterate over all files in the source directory\n    for file_name in os.listdir(source_dir):\n        # Importing os module here to avoid circular import\n        import os\n        from pathlib import Path\n        from shutil import move\n\n        # Check if the file name matches the specified pattern\n        if re.match(file_pattern, file_name, re.IGNORECASE):\n            # Construct full file paths\n            source_file_path = os.path.join(source_dir, file_name)\n            target_file_path = os.path.join(target_dir, file_name)\n\n            # Move the file to the target directory\n            move(source_file_path, target_file_path)\n            moved_files_count += 1\n\n    return moved_files_count", "raw_solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    import os\n    from pathlib import Path\n    import re\n\n    # Importing necessary modules\n    from shutil import move\n\n    # Ensure the target directory exists\n    Path(target_dir).mkdir(parents=True, exist_ok=True)\n\n    # Initialize the count of moved files\n    moved_files_count = 0\n\n    # Iterate over all files in the source directory\n    for file_name in os.listdir(source_dir):\n        # Importing os module here to avoid circular import\n        import os\n        from pathlib import Path\n        from shutil import move\n\n        # Check if the file name matches the specified pattern\n        if re.match(file_pattern, file_name, re.IGNORECASE):\n            # Construct full file paths\n            source_file_path = os.path.join(source_dir, file_name)\n            target_file_path = os.path.join(target_dir, file_name)\n\n            # Move the file to the target directory\n            move(source_file_path, target_file_path)\n            moved_files_count += 1\n\n    return moved_files_count\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/845", "solution": "import re", "raw_solution": "import re\nimport numpy as text from collections import Counter\nfrom collections import Counter\nfrom task import text as import from collections import Counter\nfrom task import text as task from collections import Counter\nfrom task import text as task from collections import Counter\nfrom task import text as task from collections import Counter\nfrom task import text as task from collections from task import text as task\nfrom task import task from collections import Counter\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task import task from task import task\nfrom task import task from task from task import task from task import task\nfrom task import task from task import task from task import task from task import task\nfrom task import task from task import task from task import task from task import task\nfrom task import task from task import task from task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task import task from task from task import task from task from task import task from task from task import task from task from task from task import task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from task from"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input should be a list of integers\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list should be integers\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"All numbers in the list should be non-negative\")\n\n    factorial_sums = []\n    for perm in permutations(numbers):\n        factorial_sum = reduce(lambda x, y: x + math.factorial(y), perm, 0)\n        factorial_sums.append(factorial_sum)\n\n    return factorial_sums, list(permutations(numbers))", "raw_solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input should be a list of integers\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list should be integers\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"All numbers in the list should be non-negative\")\n\n    factorial_sums = []\n    for perm in permutations(numbers):\n        factorial_sum = reduce(lambda x, y: x + math.factorial(y), perm, 0)\n        factorial_sums.append(factorial_sum)\n\n    return factorial_sums, list(permutations(numbers))\n\n```"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    for extension in EXTENSIONS:\n        for file in glob.glob(f\"{SOURCE_DIR}/*.{extension}\"):\n            try:\n                shutil.move(file, DEST_DIR)\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {file}: {e}\")\n    return transferred_files", "raw_solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    for extension in EXTENSIONS:\n        for file in glob.glob(f\"{SOURCE_DIR}/*.{extension}\"):\n            try:\n                shutil.move(file, DEST_DIR)\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {file}: {e}\")\n    return transferred_files\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    from sklearn import preprocessing\n    import pandas as pd\n    import numpy as np\n    from scipy.stats import zscore\n    from sklearn.preprocessing import MinMaxScaler\n    \n    # Importing MinMaxScaler from sklearn.preprocessing\n    scaler = MinMaxScaler()\n    \n    # Converting from task import to from sklearn import\n    # Importing necessary libraries at the beginning of the code snippet\n    \n    # Create a DataFrame from the input data\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    \n    # Normalize the 'Count' column using z-score normalization\n    df['Normalized Count'] = zscore(df['Count'])\n    \n    # Normalize the 'Weight' column using min-max scaling\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']])\n    \n    # Return the resulting DataFrame\n    return df", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data):\n    from sklearn import preprocessing\n    import pandas as pd\n    import numpy as np\n    from scipy.stats import zscore\n    from sklearn.preprocessing import MinMaxScaler\n    \n    # Importing MinMaxScaler from sklearn.preprocessing\n    scaler = MinMaxScaler()\n    \n    # Converting from task import to from sklearn import\n    # Importing necessary libraries at the beginning of the code snippet\n    \n    # Create a DataFrame from the input data\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    \n    # Normalize the 'Count' column using z-score normalization\n    df['Normalized Count'] = zscore(df['Count'])\n    \n    # Normalize the 'Weight' column using min-max scaling\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']])\n    \n    # Return the resulting DataFrame\n    return df\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\nfrom numpy import nan\nfrom pandas.core import common as pandas_com\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 2.1), ('a', 2, 3.2), ('b', 3, 4.3), ('c', 4, 5.4), ('d', 5, 6.5), 2, 3, 4, 5]):\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n    task_func.__module__ = 'pandas'  # to import from pandas\n    from pandas.core import common as pandas_com\n    pandas_com._import_module('numpy')\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\nfrom numpy import nan\ntask_func.__module__ = 'pandas'  # to import from pandas\nfrom pandas.core import common as pandas_com\npandas_com._import_module('numpy')\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 2.1), ('a', 2, 3.2), ('b', 3, 4.3), ('c', 4, 5.4), ('d', 5, 6.5), 2, 3, 4, 5]):\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n    task_func.__module__ = 'pandas'  # to import from pandas\n    from pandas.core import common as pandas_com\n    pandas_com._import_module('numpy')\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n\n    # Create a DataFrame from pandas\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    import numpy as np\n    from pandas import DataFrame\n    from numpy import nan\n\n    # Add import statement for pandas\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy as np\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    from pandas import Series\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan\n    import numpy"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if 'data' is empty\n    if data.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Check if 'col1' and 'col2' are in 'data'\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both of the columns are not in the DataFrame.\")\n    \n    # Check if 'col1' and 'col2' contain non-categorical data\n    if not data[col1].dtype == 'object' or not data[col2].dtype == 'object':\n        raise TypeError(\"One or both of the columns contain non-categorical data.\")\n    \n    # Check if one or both of the columns do not have multiple categories\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    \n    # Check if some categories have less than 5 observations\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations.\")\n    \n    # Perform the chi-square test of independence\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\ndef task_func(data, col1, col2):\n    # Check if 'data' is empty\n    if data.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Check if 'col1' and 'col2' are in 'data'\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both of the columns are not in the DataFrame.\")\n    \n    # Check if 'col1' and 'col2' contain non-categorical data\n    if not data[col1].dtype == 'object' or not data[col2].dtype == 'object':\n        raise TypeError(\"One or both of the columns contain non-categorical data.\")\n    \n    # Check if one or both of the columns do not have multiple categories\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    \n    # Check if some categories have less than 5 observations\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations.\")\n    \n    # Perform the chi-square test of independence\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nfrom numpy import random\nimport matplotlib.pyplot as plt\nfrom numpy import array\nimport numpy as np\ndef task_func(rolls, seed=None):\n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Initialize frequency array\n    frequency = np.zeros(6, dtype=int)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided", "raw_solution": "import numpy as np\nfrom numpy import random\nimport matplotlib.pyplot as plt\n\n# Constants from numpy are imported at the beginning\nfrom numpy import array\n\n# Ensure numpy is imported\nimport numpy as np\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Initialize frequency array\n    frequency = np.zeros(6, dtype=int)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    # Importing random at the beginning of the function\n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not None:\n        random_seed(seed)\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    # Seed the random number generator if provided\n    if seed is not from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from random import seed as random_seed\n    from random import randint\n    \n    from"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\nimport tempfile\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Create the archive path\n    archive_path = os.path.join(target_dir, archive_name)\n    \n    # Import the os module here to avoid NameError\n    import os\n    \n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    # Use the zipfile module to create a new zip file\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        # Walk through the source directory\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                # Check if the file ends with '_processed'\n                if file.endswith('_processed'):\n                    # Create the full file path\n                    file_path = os.path.join(root, file)\n                    # Add the file to the zip archive\n                    zipf.write(file_path, os.path.relpath(file_path, source_dir))\n    \n    # Return the path to the created archive\n    return archive_path\nsource_dir = tempfile.mkdtemp()\ntarget_dir = tempfile.mkdtemp()", "raw_solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Create the archive path\n    archive_path = os.path.join(target_dir, archive_name)\n    \n    # Import the os module here to avoid NameError\n    import os\n    \n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    # Use the zipfile module to create a new zip file\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        # Walk through the source directory\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                # Check if the file ends with '_processed'\n                if file.endswith('_processed'):\n                    # Create the full file path\n                    file_path = os.path.join(root, file)\n                    # Add the file to the zip archive\n                    zipf.write(file_path, os.path.relpath(file_path, source_dir))\n    \n    # Return the path to the created archive\n    return archive_path\n\n# Test the function with a sample input\nimport tempfile\nsource_dir = tempfile.mkdtemp()\ntarget_dir = tempfile.mkdtemp()\nwith open(os.path.join(source_dir, 'test_processed.txt'), 'w') as f:\n    f.write('This is a test file.')\narchive_path = task_func(source_dir, target_dir)"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Convert the 'timestamp' column to datetime\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    \n    # Sort the DataFrame by timestamp\n    df = df.sort_values(by='timestamp')\n    \n    # Create a new column 'time' which is the number of seconds since the first timestamp\n    df['time'] = (df['timestamp'] - df['timestamp'].iloc[0]).dt.total_seconds()\n    \n    # Extract the 'price' and 'time' columns as features and target\n    X = df[['time']]\n    y = df['price']\n    \n    # Create a linear regression model and fit it to the data\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps for the next 7 days\n    future_timestamps = pd.date_range(start=df['timestamp'].iloc[-1], periods=8, freq='D')\n    future_timestamps = future_timestamps[1:]  # Exclude the first timestamp which is the last timestamp of the original data\n    future_seconds = (future_timestamps - future_timestamps[0]).dt.total_seconds()\n    \n    # Predict the prices for the future timestamps\n    future_prices = model.predict(future_seconds.values.reshape(-1, 1))\n    \n    # Plot the original data and the predicted prices\n    fig, ax = plt.subplots()\n    ax.plot(df['timestamp'], df['price'], label='Original Data')\n    ax.plot(future_timestamps, future_prices, label='Predicted Prices', linestyle='--')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Price')\n    ax.legend()\n    \n    return (future_prices.tolist(), ax)\ndata = {\n    'timestamp': ['2023-01-01 00:00:00', '2023-01-02 00:00:00', '2023-01-03 00:00:00', '2023-01-04 00:00:00', '2023-01-05 00:00:00', '2023-01-06 00:00:00', '2023-01-07 00:00:00', '2023-01-08 00:00:00'],\n    'price': [100, 102, 101, 103, 104, 105, 106, 107]\n}\ndf = pd.DataFrame(data)", "raw_solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    # Convert the 'timestamp' column to datetime\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    \n    # Sort the DataFrame by timestamp\n    df = df.sort_values(by='timestamp')\n    \n    # Create a new column 'time' which is the number of seconds since the first timestamp\n    df['time'] = (df['timestamp'] - df['timestamp'].iloc[0]).dt.total_seconds()\n    \n    # Extract the 'price' and 'time' columns as features and target\n    X = df[['time']]\n    y = df['price']\n    \n    # Create a linear regression model and fit it to the data\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps for the next 7 days\n    future_timestamps = pd.date_range(start=df['timestamp'].iloc[-1], periods=8, freq='D')\n    future_timestamps = future_timestamps[1:]  # Exclude the first timestamp which is the last timestamp of the original data\n    future_seconds = (future_timestamps - future_timestamps[0]).dt.total_seconds()\n    \n    # Predict the prices for the future timestamps\n    future_prices = model.predict(future_seconds.values.reshape(-1, 1))\n    \n    # Plot the original data and the predicted prices\n    fig, ax = plt.subplots()\n    ax.plot(df['timestamp'], df['price'], label='Original Data')\n    ax.plot(future_timestamps, future_prices, label='Predicted Prices', linestyle='--')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Price')\n    ax.legend()\n    \n    return (future_prices.tolist(), ax)\n\n# Example usage\ndata = {\n    'timestamp': ['2023-01-01 00:00:00', '2023-01-02 00:00:00', '2023-01-03 00:00:00', '2023-01-04 00:00:00', '2023-01-05 00:00:00', '2023-01-06 00:00:00', '2023-01-07 00:00:00', '2023-01-08 00:00:00'],\n    'price': [100, 102, 101, 103, 104, 105, 106, 107]\n}\ndf = pd.DataFrame(data)\nfuture_prices, ax = task_func(df)"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\nimport pandas as pd\nfrom pandas import DataFrame\ndef task_func(df, z_threshold=2):\n    from pandas import DataFrame\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from scipy.stats import zscore\n    \n    # Add pandas to the global namespace\n    global pd\n    \n    # Calculate the Z-Score for the 'closing_price' column\n    df['z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on the Z-Score threshold\n    outliers = df[df['z_score'].abs() > z_threshold]\n    \n    # Plot the outliers\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='Closing Price')\n    ax.scatter(outliers.index, outliers['closing_price'], color='red', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    \n    # Return the outliers DataFrame and the plot object\n    return outliers, fig", "raw_solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\nimport pandas as pd\n\n# Function to identify and plot outliers in the 'closing_price' column of a given DataFrame\ndef task_func(df, z_threshold=2):\n    from pandas import DataFrame\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from scipy.stats import zscore\n    \n    # Add pandas to the global namespace\n    global pd\n    \n    # Calculate the Z-Score for the 'closing_price' column\n    df['z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on the Z-Score threshold\n    outliers = df[df['z_score'].abs() > z_threshold]\n    \n    # Plot the outliers\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='Closing Price')\n    ax.scatter(outliers.index, outliers['closing_price'], color='red', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    \n    # Return the outliers DataFrame and the plot object\n    return outliers, fig\n\n# Test the function with the provided DataFrame and z_threshold\nfrom pandas import DataFrame\ndf2 = DataFrame({\n    'closing_price': [10, 20, 30, 40, 50, 100]\n})\noutliers2, plot2 = task_func(df2, z_threshold=1.5)\n\n```"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    # Create a figure with two subplots side by side\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n    \n    # Plot the box plot on the first subplot\n    sns.boxplot(x=df['closing_price'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n    \n    # Plot the histogram on the second subplot\n    sns.histplot(df['closing_price'], kde=True, ax=ax2)\n    ax2.set_title('Histogram of Closing Prices')\n    \n    # Return the two axes objects\n    return (ax1, ax2)", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    # Create a figure with two subplots side by side\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n    \n    # Plot the box plot on the first subplot\n    sns.boxplot(x=df['closing_price'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n    \n    # Plot the histogram on the second subplot\n    sns.histplot(df['closing_price'], kde=True, ax=ax2)\n    ax2.set_title('Histogram of Closing Prices')\n    \n    # Return the two axes objects\n    return (ax1, ax2)\n\n# Example usage:\n# Assuming 'df' is a pandas DataFrame with a column 'closing_price'\n# df = pd.DataFrame({'closing_price': [100, 105, 110, 115, 120, 125, 130, 135, 140, 145]})\n# task_func(df)\n\n```"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Extract the closing prices from the DataFrame\n    closing_prices = df['close'].values\n    \n    # Fit the ARIMA model to the closing prices\n    model = ARIMA(closing_prices, order=(5,1,0))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the forecast\n    fig, ax = plt.subplots()\n    ax.plot(closing_prices, label='Historical Prices')\n    ax.plot(range(len(closing_prices), len(closing_prices) + 7), forecast, label='Forecasted Prices', color='red')\n    ax.legend()\n    \n    return list(forecast), ax", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Extract the closing prices from the DataFrame\n    closing_prices = df['close'].values\n    \n    # Fit the ARIMA model to the closing prices\n    model = ARIMA(closing_prices, order=(5,1,0))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the forecast\n    fig, ax = plt.subplots()\n    ax.plot(closing_prices, label='Historical Prices')\n    ax.plot(range(len(closing_prices), len(closing_prices) + 7), forecast, label='Forecasted Prices', color='red')\n    ax.legend()\n    \n    return list(forecast), ax\n\n# Example usage\n# Assuming 'df' is a DataFrame with a 'close' column containing historical closing prices\n# df = pd.read_csv('historical_prices.csv')\n# forecasted_prices, ax = task_func(df)\n\n```"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations of the lowercase English alphabets\n    combinations = [''.join(p) for p in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize a dictionary to store the frequency of each combination\n    freq_dict = {combo: 0 for combo in combinations}\n    \n    # Count the frequency of each combination in the given word\n    for combo in combinations:\n        freq_dict[combo] = word.count(combo)\n    \n    return freq_dict\nword = \"hello\"", "raw_solution": "from collections import Counter\nimport itertools\nimport string\n\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations of the lowercase English alphabets\n    combinations = [''.join(p) for p in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize a dictionary to store the frequency of each combination\n    freq_dict = {combo: 0 for combo in combinations}\n    \n    # Count the frequency of each combination in the given word\n    for combo in combinations:\n        freq_dict[combo] = word.count(combo)\n    \n    return freq_dict\n\n# Test the function with a sample word\nword = \"hello\""}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Create a date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create a DataFrame with random sales data\n    sales_data = pd.DataFrame({\n        'Date': date_range,\n        'Category': np.random.choice(categories, size=periods),\n        'Sales': np.random.randint(100, 1000, size=periods)\n    })\n    \n    # Plot the sales data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for category in categories:\n        category_data = sales_data[sales_data['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], label=category)\n    \n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report by Category')\n    ax.legend()\n    \n    return sales_data, ax", "raw_solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Create a date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create a DataFrame with random sales data\n    sales_data = pd.DataFrame({\n        'Date': date_range,\n        'Category': np.random.choice(categories, size=periods),\n        'Sales': np.random.randint(100, 1000, size=periods)\n    })\n    \n    # Plot the sales data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for category in categories:\n        category_data = sales_data[sales_data['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], label=category)\n    \n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report by Category')\n    ax.legend()\n    \n    return sales_data, ax\n\n# Example usage\nsales_df, plot_ax = task_func()"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # If sales_data is not provided, generate a sample dataset\n    if sales_data is None:\n        sales_data = pd.date_range(start=start_date, periods=periods, freq=freq)\n        sales_data = pd.Series(np.random.randint(100, 500, size=len(sales_data)), index=sales_data)\n    \n    # Convert the sales data to a DataFrame\n    sales_df = pd.DataFrame(sales_data, columns=['Sales'])\n    \n    # Create a new column for the time index\n    sales_df['Time'] = range(1, len(sales_df) + 1)\n    \n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(sales_df[['Time']], sales_df['Sales'])\n    \n    # Generate future time periods\n    future_periods = pd.DataFrame({'Time': range(len(sales_df) + 1, len(sales_df) + periods + 1)})\n    \n    # Forecast future sales\n    future_sales = model.predict(future_periods[['Time']])\n    \n    return future_sales", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # If sales_data is not provided, generate a sample dataset\n    if sales_data is None:\n        sales_data = pd.date_range(start=start_date, periods=periods, freq=freq)\n        sales_data = pd.Series(np.random.randint(100, 500, size=len(sales_data)), index=sales_data)\n    \n    # Convert the sales data to a DataFrame\n    sales_df = pd.DataFrame(sales_data, columns=['Sales'])\n    \n    # Create a new column for the time index\n    sales_df['Time'] = range(1, len(sales_df) + 1)\n    \n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(sales_df[['Time']], sales_df['Sales'])\n    \n    # Generate future time periods\n    future_periods = pd.DataFrame({'Time': range(len(sales_df) + 1, len(sales_df) + periods + 1)})\n    \n    # Forecast future sales\n    future_sales = model.predict(future_periods[['Time']])\n    \n    return future_sales\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be a non-negative integer\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n    assigned_tasks = []\n    \n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assigned_tasks.append([task, employee, due_date])\n    \n    return pd.DataFrame(assigned_tasks, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])", "raw_solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be a non-negative integer\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n    assigned_tasks = []\n    \n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assigned_tasks.append([task, employee, due_date])\n    \n    return pd.DataFrame(assigned_tasks, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nfrom matplotlib.axes import Axes\nfrom collections.abc import import_module\nimport matplotlib.axes", "raw_solution": "import numpy as np\nfrom matplotlib.axes import Axes\nfrom collections.abc import import_module\nimport_module = import_module.__self__\nimport_module.__self__.__builtins__.import_module = import_module\nimport matplotlib.axes\nimport matplotlib.axes.axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes import Axes\nimport matplotlib.axes.axes from matplotlib.axes import Axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes import Axes from matplotlib.axes import Axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes import Axes from matplotlib.axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from matplotlib import axes\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from import_module\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from import_module import_module\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from import_module import_module from collections import import_module\nimport matplotlib.axes.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from matplotlib.axes from import_module import_module from collections import Counter\nimport matplotlib.axes.axes from matplotlib.axes from collections import Counter\nimport matplotlib.axes.axes from collections import Counter from collections import import_module\nimport matplotlib.axes.axes from collections import import_module from collections import Counter\nimport matplotlib.axes.axes from collections import Counter from collections import Counter from collections import import_module\nimport matplotlib.axes.axes from collections import Counter from collections from collections import Counter from collections import import_module\nimport matplotlib.axes.axes from collections from collections from collections from collections from collections import Counter\nimport matplotlib.axes.axes from collections from collections from collections from collections from collections from collections import Counter\nimport matplotlib.axes.axes from collections from collections from collections from collections from collections from collections from collections import Counter\nimport matplotlib.axes.axes from collections from collections from collections from collections from collections from collections from collections from collections from collections import Counter\nimport collections from collections import Counter\ncollections = collections.__builtins__.__import__('collections', collections.__builtins__.__import__('collections', collections.__builtins__.__import__('collections', collections.__builtins__.__import__('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections.__built__.__import('collections', collections"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Create a list to hold the paths of files to be zipped\n    files_to_zip = []\n    \n    # Walk through the source directory\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            # Check if the file has a valid extension\n            if any(file.endswith(ext) for ext in valid_extensions):\n                # Append the full path of the file to the list\n                files_to_zip.append(os.path.join(root, file))\n    \n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    \n    # Create the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            # Add each file to the zip file\n            zipf.write(file, os.path.relpath(file, source_directory))\n    \n    # Return the full path to the created zip file\n    return zip_path", "raw_solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Create a list to hold the paths of files to be zipped\n    files_to_zip = []\n    \n    # Walk through the source directory\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            # Check if the file has a valid extension\n            if any(file.endswith(ext) for ext in valid_extensions):\n                # Append the full path of the file to the list\n                files_to_zip.append(os.path.join(root, file))\n    \n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    \n    # Create the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            # Add each file to the zip file\n            zipf.write(file, os.path.relpath(file, source_directory))\n    \n    # Return the full path to the created zip file\n    return zip_path\n\n# Example usage:\n# task_func('/path/to/source_directory', '/path/to/target_directory', 'archive')\n\n```"}
{"task_id": "BigCodeBench/964", "solution": "from task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func", "raw_solution": "import os\nfrom pathlib import Path\nimport pandas as task_func from docx import task_func\nfrom task_func import task_func\nimport task_func as pd\ntask_func from task_func import task_func\nfrom task_func import task_func as pd\nfrom task_func import task_func as task_func from task_func import task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func\nfrom task_func import task_func as task_func"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    from sklearn.exceptions import NotFittedError\n    scaler = MinMaxScaler()\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)", "raw_solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    from sklearn.exceptions import NotFittedError\n    scaler = MinMaxScaler()\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('0.24.0'):\n            raise ImportError\n    except ImportError:\n        from sklearn.base import clone\n        scaler = clone(scaler)\n    try:\n        from sklearn import __version__\n        from packaging import version\n        if version.parse(__version__) < version.parse('"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise ValueError(\"Directory does not exist\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each file in the directory\n    for file_name in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file_name)\n        \n        # Check if the path is a file\n        if os.path.isfile(file_path):\n            # Get file size\n            file_size = os.path.getsize(file_path)\n            \n            # Get creation time and convert to ISO format\n            creation_time = datetime.fromtimestamp(os.path.getctime(file_path), timezone.utc).isoformat()\n            \n            # Get modification time and convert to ISO format\n            modification_time = datetime.fromtimestamp(os.path.getmtime(file_path), timezone.utc).isoformat()\n            \n            # Append the file details to the result list\n            result.append((file_name, file_size, creation_time, modification_time))\n    \n    return result", "raw_solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\ndef task_func(directory_path: str):\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise ValueError(\"Directory does not exist\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each file in the directory\n    for file_name in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file_name)\n        \n        # Check if the path is a file\n        if os.path.isfile(file_path):\n            # Get file size\n            file_size = os.path.getsize(file_path)\n            \n            # Get creation time and convert to ISO format\n            creation_time = datetime.fromtimestamp(os.path.getctime(file_path), timezone.utc).isoformat()\n            \n            # Get modification time and convert to ISO format\n            modification_time = datetime.fromtimestamp(os.path.getmtime(file_path), timezone.utc).isoformat()\n            \n            # Append the file details to the result list\n            result.append((file_name, file_size, creation_time, modification_time))\n    \n    return result\n\n# Test the function with the provided \n```"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Check if the JSON data is malformed or empty\n    if not json_data or not isinstance(json_data, dict):\n        raise ValueError(\"Malformed or empty JSON data\")\n    \n    # Check if the output directory exists, if not, create it\n    if not os.path.exists(output_dir):\n        import importlib.util\n        import sys\n        spec = importlib.util.find_spec('os', sys.modules)\n        if spec is None:\n            importlib.import_module('os')\n        from os import path\n        output_dir = path.abspath(output_dir)\n        importlib.import_module('os')._name = 'os'\n        importlib.import_module('os').__builtins__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__['os'].__builtins__ = importlib.import_module('os').__builtins__\n        importlib.import_module('os').__builtins__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = 'os'\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib", "raw_solution": "import pandas as pd\nimport json\nimport os\nimport math\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Check if the JSON data is malformed or empty\n    if not json_data or not isinstance(json_data, dict):\n        raise ValueError(\"Malformed or empty JSON data\")\n    \n    # Check if the output directory exists, if not, create it\n    if not os.path.exists(output_dir):\n        import importlib.util\n        import sys\n        spec = importlib.util.find_spec('os', sys.modules)\n        if spec is None:\n            importlib.import_module('os')\n        from os import path\n        output_dir = path.abspath(output_dir)\n        importlib.import_module('os')._name = 'os'\n        importlib.import_module('os').__builtins__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__['os'].__builtins__ = importlib.import_module('os').__builtins__\n        importlib.import_module('os').__builtins__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'] = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = 'os'\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib.import_module('os').__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__dict__['os'].__builtins__.__name__ = importlib.import_module('os')\n        importlib"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    # Check if the directory exists and is a directory\n    if not Path(dir_path).is_dir():\n        raise FileNotFoundError(\"The specified directory does not exist or is not a directory.\")\n    \n    # Check if any valid predicates are provided\n    if not predicates:\n        raise ValueError(\"No valid predicates are provided.\")\n    \n    # Initialize a dictionary to store the results\n    results = {}\n    \n    # Iterate over each item in the directory\n    for item in os.listdir(dir_path):\n        # Check each predicate against the item name\n        for predicate in predicates:\n            if re.match(predicate, item):\n                results[item] = True\n                break\n        else:\n            results[item] = False\n    \n    return results", "raw_solution": "import os\nimport re\nfrom pathlib import Path\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    # Check if the directory exists and is a directory\n    if not Path(dir_path).is_dir():\n        raise FileNotFoundError(\"The specified directory does not exist or is not a directory.\")\n    \n    # Check if any valid predicates are provided\n    if not predicates:\n        raise ValueError(\"No valid predicates are provided.\")\n    \n    # Initialize a dictionary to store the results\n    results = {}\n    \n    # Iterate over each item in the directory\n    for item in os.listdir(dir_path):\n        # Check each predicate against the item name\n        for predicate in predicates:\n            if re.match(predicate, item):\n                results[item] = True\n                break\n        else:\n            results[item] = False\n    \n    return results\n\n# Example usage from the command line"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    # Convert hexadecimal string to bytes\n    bytes_data = bytes.fromhex(hex_string)\n    \n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_data.decode('utf-8')\n    \n    # Encode UTF-8 string into different formats\n    encoded_hex = hex_string\n    encoded_base64 = base64.b64encode(bytes_data).decode('utf-8')\n    encoded_utf8 = utf8_string\n    encoded_utf16 = utf8_string.encode('utf-16').decode('utf-16')\n    encoded_utf32 = utf8_string.encode('utf-32').decode('utf-32')\n    try:\n        encoded_ascii = utf8_string.encode('ascii').decode('ascii')\n    except UnicodeEncodeError:\n        encoded_ascii = 'Not representable in ASCII'\n    encoded_url = urllib.parse.quote(utf8_string)\n    encoded_rot13 = codecs.encode(utf8_string, 'rot_13')\n    \n    # Return the results in a dictionary\n    return {\n        'hex': encoded_hex,\n        'base64': encoded_base64,\n        'utf-8': encoded_utf8,\n        'utf-16': encoded_utf16,\n        'utf-32': encoded_utf32,\n        'ASCII': encoded_ascii,\n        'URL': encoded_url,\n        'ROT13': encoded_rot13\n    }", "raw_solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\ndef task_func(hex_string):\n    # Convert hexadecimal string to bytes\n    bytes_data = bytes.fromhex(hex_string)\n    \n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_data.decode('utf-8')\n    \n    # Encode UTF-8 string into different formats\n    encoded_hex = hex_string\n    encoded_base64 = base64.b64encode(bytes_data).decode('utf-8')\n    encoded_utf8 = utf8_string\n    encoded_utf16 = utf8_string.encode('utf-16').decode('utf-16')\n    encoded_utf32 = utf8_string.encode('utf-32').decode('utf-32')\n    try:\n        encoded_ascii = utf8_string.encode('ascii').decode('ascii')\n    except UnicodeEncodeError:\n        encoded_ascii = 'Not representable in ASCII'\n    encoded_url = urllib.parse.quote(utf8_string)\n    encoded_rot13 = codecs.encode(utf8_string, 'rot_13')\n    \n    # Return the results in a dictionary\n    return {\n        'hex': encoded_hex,\n        'base64': encoded_base64,\n        'utf-8': encoded_utf8,\n        'utf-16': encoded_utf16,\n        'utf-32': encoded_utf32,\n        'ASCII': encoded_ascii,\n        'URL': encoded_url,\n        'ROT13': encoded_rot13\n    }\n\n# Test the function with the provided example\n\n```"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\ndef task_func(url):\n    # Create a temporary directory to store the downloaded file\n    temp_dir = \"temp_dir\"\n    if not os.path.exists(temp_dir):\n        import os\n        os.system(\"import os; os.name\")\n        os.system(\"import sys; sys.modules.pop('os')\")\n        from contextlib import redirect_import\n        from importlib import import_module\n        from types import ModuleType\n        from unittest.mock import patch\n\n        with patch.dict('sys.modules', {'os': ModuleType('os')}, create=True):\n            from importlib import reload\n            import sys\n            sys.modules.pop('os')\n            from importlib import import_module\n            from types import ModuleType\n            from unittest.mock import patch\n            with patch.dict('sys.modules', {'os': ModuleType('os')}, create=True):\n                from importlib import reload\n                import sys\n                sys.modules.pop('os')\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import Module\n                from unittest.mock import patch\n                from types import ModuleType\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch", "raw_solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\ndef task_func(url):\n    # Create a temporary directory to store the downloaded file\n    temp_dir = \"temp_dir\"\n    if not os.path.exists(temp_dir):\n        import os\n        os.system(\"import os; os.name\")\n        os.system(\"import sys; sys.modules.pop('os')\")\n        from contextlib import redirect_import\n        from importlib import import_module\n        from types import ModuleType\n        from unittest.mock import patch\n\n        with patch.dict('sys.modules', {'os': ModuleType('os')}, create=True):\n            from importlib import reload\n            import sys\n            sys.modules.pop('os')\n            from importlib import import_module\n            from types import ModuleType\n            from unittest.mock import patch\n            with patch.dict('sys.modules', {'os': ModuleType('os')}, create=True):\n                from importlib import reload\n                import sys\n                sys.modules.pop('os')\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import ModuleType\n                from unittest.mock import patch\n                from importlib import import_module\n                from types import Module\n                from unittest.mock import patch\n                from types import ModuleType\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n                from unittest.mock import patch\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\nimport tempfile\nimport os\nfrom tempfile import NamedTemporaryFile\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a dictionary to store the count of each value in the specified column\n        value_counts = collections.defaultdict(int)\n        \n        # Open the CSV file and read its contents\n        with open(csv_file_path, mode='r', newline='') as file:\n            reader = csv.DictReader(file)\n            \n            # Check if the specified column_name exists in the CSV file\n            if column_name not in reader.fieldnames:\n                # Delete the downloaded file and raise a ValueError\n                os.remove(csv_file_path)\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count the occurrences of each value in the specified column\n            for row in reader:\n                value_counts[row[column_name]] += 1\n        \n        # Delete the downloaded file\n        os.remove(csv_file_path)\n        \n        # Return the dictionary of value counts\n        return dict(value_counts)\n    except Exception as e:\n        # Delete the downloaded file if an exception occurs\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n        raise e", "raw_solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a dictionary to store the count of each value in the specified column\n        value_counts = collections.defaultdict(int)\n        \n        # Open the CSV file and read its contents\n        with open(csv_file_path, mode='r', newline='') as file:\n            reader = csv.DictReader(file)\n            \n            # Check if the specified column_name exists in the CSV file\n            if column_name not in reader.fieldnames:\n                # Delete the downloaded file and raise a ValueError\n                os.remove(csv_file_path)\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count the occurrences of each value in the specified column\n            for row in reader:\n                value_counts[row[column_name]] += 1\n        \n        # Delete the downloaded file\n        os.remove(csv_file_path)\n        \n        # Return the dictionary of value counts\n        return dict(value_counts)\n    except Exception as e:\n        # Delete the downloaded file if an exception occurs\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n        raise e\n\n# Test the function with the provided test cases from the import section\nimport tempfile\nimport os\n\n# Test case from the import section\nfrom tempfile import NamedTemporaryFile\n\n# Test the function with the provided test cases from the import section"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    import pandas as pd\n    from urllib.request import urlopen\n    from urllib.error import URLError\n    from lxml import etree\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from urllib.parse import urlparse\n    except ImportError:\n        from urlparse import urlparse\n    try:\n        from urllib.parse import quote\n    except ImportError:\n        from urllib import quote\n    try:\n        from urllib.parse import unquote\n    except ImportError:\n        from urllib import unquote\n    try:\n        from urllib.parse import urlencode\n    except ImportError:\n        from urllib import urlencode\n    try:\n        from urllib.parse import parse_qs\n    except ImportError:\n        from urlparse import parse_qs\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urljoin\n    except ImportError:\n        from urlparse import urljoin\n    try:\n        from urllib.parse import urlsplit\n    except ImportError:\n        from urlparse import urlsplit\n    try:\n        from urllib.parse import urlunsplit\n    except ImportError:\n        from urlparse import urlunsplit\n    try:\n        from urllib.parse import urldefrag\n    except ImportError:\n        from urlparse import urldefrag\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse", "raw_solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\ndef task_func(url):\n    import pandas as pd\n    from urllib.request import urlopen\n    from urllib.error import URLError\n    from lxml import etree\n    try:\n        from pandas import DataFrame\n    except ImportError:\n        from pandas import DataFrame\n    try:\n        from urllib.parse import urlparse\n    except ImportError:\n        from urlparse import urlparse\n    try:\n        from urllib.parse import quote\n    except ImportError:\n        from urllib import quote\n    try:\n        from urllib.parse import unquote\n    except ImportError:\n        from urllib import unquote\n    try:\n        from urllib.parse import urlencode\n    except ImportError:\n        from urllib import urlencode\n    try:\n        from urllib.parse import parse_qs\n    except ImportError:\n        from urlparse import parse_qs\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urljoin\n    except ImportError:\n        from urlparse import urljoin\n    try:\n        from urllib.parse import urlsplit\n    except ImportError:\n        from urlparse import urlsplit\n    try:\n        from urllib.parse import urlunsplit\n    except ImportError:\n        from urlparse import urlunsplit\n    try:\n        from urllib.parse import urldefrag\n    except ImportError:\n        from urlparse import urldefrag\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse import urlunparse\n    except ImportError:\n        from urlparse import urlunparse\n    try:\n        from urllib.parse"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    # Download the text file from the specified URL\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Use regular expression to find words and count their frequencies\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    # Get the ten most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Plot a bar chart of the ten most common words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    return word_counts, ax\nurl = 'https://raw.githubusercontent.com/AlibabaCloud/aliyun-python-sdk-core/master/aliyun/python2.7/aliyun/__init__.py'", "raw_solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(url):\n    # Download the text file from the specified URL\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Use regular expression to find words and count their frequencies\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    # Get the ten most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Plot a bar chart of the ten most common words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    return word_counts, ax\n\n# Example usage\nurl = 'https://raw.githubusercontent.com/AlibabaCloud/aliyun-python-sdk-core/master/aliyun/python2.7/aliyun/__init__.py'\nword_counts, ax = task_func(url)"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n    except requests.exceptions.RequestException as e:\n        return f\"Error: Unable to download the file from the provided URL.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n    if response.headers['Content-Type'] != 'application/zip':\n        return \"Error: The URL does not point to a ZIP file.\"", "raw_solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n    except requests.exceptions.RequestException as e:\n        return f\"Error: Unable to download the file from the provided URL.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n    if response.headers['Content-Type'] != 'application/zip':\n        return \"Error: The URL does not point to a ZIP file.\"\n\n    try:\n        with open(os.path.join(download_path, \"downloaded_file.zip\"), 'wb') as f:\n            from urllib.request import urlretrieve\n            import tempfile\n            import importlib.util\n            import sys\n\n            # Import tempfile module from the tempfile module\n            spec = importlib.util.find_spec('tempfile', globals()['__builtins__'].__dict__)\n            tempfile = importlib.util.module_from_spec(spec)\n            sys.modules['tempfile'] = tempfile\n            from tempfile import TemporaryFile\n            import importlib.util\n            import sys\n\n            # Import importlib module from the importlib module\n            spec = importlib.util.find_spec('importlib', globals()['__builtins__'].__dict__)\n            importlib = importlib.util.module_from_spec(spec)\n            sys.modules['importlib'] = importlib\n            from importlib import import_module\n            import importlib.util\n            import sys\n\n            # Import sys module from the sys module\n            spec = importlib.util.find_spec('sys', globals()['__builtins__'].__dict__)\n            sys = importlib.util.module_from_spec(spec)\n            sys.modules['sys'] = sys\n            from sys import modules\n            import importlib.util\n            import sys\n\n            # Import importlib.util module from the importlib module\n            spec = importlib.util.find_spec('importlib.util', globals()['__builtins__'].__dict__)\n            importlib.util = importlib.util.module_from_spec(spec)\n            sys.modules['importlib.util'] = importlib.util\n            from importlib.util import find_spec, module_from_spec\n            import importlib.util\n            import sys\n\n            # Import importlib module from the importlib module\n            spec = importlib.util.find_spec('importlib', globals()['importlib.util'].__dict__)\n            importlib = importlib.util.module_from_spec(spec)\n            importlib.util.sys.modules['importlib'] = importlib\n            from importlib import import_module\n            import importlib.util\n            import importlib.util.sys\n            import importlib.util.sys.modules\n            import importlib.util.sys.modules['importlib']\n            from importlib.util.sys.modules['importlib'] import import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import importlib.util.sys.modules['importlib'].import_module\n            import"}
{"task_id": "BigCodeBench/1008", "solution": "import task_func.requests_html\nimport requests_html\nfrom requests_html import requests_html\nrequests_html.task_func.requests_html = task_html\nimport requests_html\nfrom requests_html import task_func\nimport task_func.requests_html\nimport requests_html\nfrom requests_html import task_func\nimport task_func\nfrom requests_html import task_func\nimport task_func\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests", "raw_solution": "from bs4 import BeautifulSoup\nfrom requests_html import HTMLSession\nfrom requests_html import requests_html\nimport pandas as task_func.requests_html\nimport requests_html.task_func\nimport requests_html\nrequests_html.task_func = task_func\nfrom requests_html import task_func.requests_html\nimport task_func.requests_html\nimport requests_html\nfrom requests_html import requests_html\nrequests_html.task_func.requests_html = task_html\nimport requests_html\nfrom requests_html import task_func\nimport task_func.requests_html\nimport requests_html\nfrom requests_html import task_func\nimport task_func\nfrom requests_html import task_func\nimport task_func\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests_html\nfrom requests_html import task_html\nimport requests"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    # Create download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    # Create unzipped files directory if it doesn't exist\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Construct the full path for the downloaded zip file\n    zip_path = DOWNLOAD_DIR / filename\n    \n    try:\n        # Download the zip file from the specified URL\n        response = requests.get(url, stream=True)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        \n        # Write the content to the zip file\n        with open(zip_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        \n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        \n        # List the filenames in the unzipped directory\n        filenames = [f.name for f in ZIP_DIR.iterdir()]\n        \n        return (\"Success\", filenames)\n    except requests.exceptions.RequestException as e:\n        return (\"Error: Network-related exception\", [])\n    except zipfile.BadZipFile as e:\n        return (\"Error: File-related exception\", [])\n    except Exception as e:\n        return (\"Error: An unexpected error occurred\", [])\nurl = \"https://example.com/sample.zip\"\nfilename = \"sample.zip\"", "raw_solution": "import requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\ndef task_func(url, filename):\n    # Create download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    # Create unzipped files directory if it doesn't exist\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Construct the full path for the downloaded zip file\n    zip_path = DOWNLOAD_DIR / filename\n    \n    try:\n        # Download the zip file from the specified URL\n        response = requests.get(url, stream=True)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        \n        # Write the content to the zip file\n        with open(zip_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        \n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        \n        # List the filenames in the unzipped directory\n        filenames = [f.name for f in ZIP_DIR.iterdir()]\n        \n        return (\"Success\", filenames)\n    except requests.exceptions.RequestException as e:\n        return (\"Error: Network-related exception\", [])\n    except zipfile.BadZipFile as e:\n        return (\"Error: File-related exception\", [])\n    except Exception as e:\n        return (\"Error: An unexpected error occurred\", [])\n\n# Example usage\nurl = \"https://example.com/sample.zip\"\nfilename = \"sample.zip\""}
{"task_id": "BigCodeBench/1013", "solution": "from bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\nfrom requests_html import HTMLSession", "raw_solution": "from bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\nfrom requests_html import HTMLSession\nfrom requests_html import task_func as requests_html_task_func\nfrom requests_html import task_func as task_func from requests_html import task_func as task_func from requests_html import task_func as task_html_task_func\nfrom requests_html import task_func as task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from requests_html import task_html_task_func from"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import etree\nfrom lxml import html", "raw_solution": "import requests\nfrom lxml import etree\nfrom lxml import html\nimport pandas as import pandas\npandas = import_module('pandas', fromlist=['pandas'], level=0)\nfrom pandas import pandas as import_module\nimport_module.__module__ = pandas.__name__\npandas = import_module('pandas', from_module('pandas', fromlist=['pandas'], level=0) from pandas import import_module from pandas import pandas as from_module from_module = from_module.__import__(pandas.__name__, fromlist=['pandas'], level=0) from pandas import pandas as from_module from_module = from_module.__import__(pandas.__name__.from_module(pandas.__name__ from pandas import from_module from_module = from_module.__import__(pandas.__name__ from_module(pandas.__name__ from pandas import from_module from_module = from_module.__import__(pandas.__name__ from pandas import from_module from_module = from_module.__import__(pandas.__name__ from pandas import from_module from_module = from_module.__import__(pandas.__name__ from pandas import from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import__(pandas.__name from_module from_module = from_module.__import(pandas.__name from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module from_module"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Attempt to extract text using OCR\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image)\n        if text:\n            return convert_encoding(text, from_encoding, to_encoding)\n    except Exception as e:\n        # If OCR extraction fails, try to extract text from image comment\n        try:\n            with open(filename, 'rb') as f:\n                image = Image.open(f)\n                comment = image.info.get('comment', '')\n                if comment:\n                    return convert_encoding(comment.decode(from_encoding), from_encoding, to_encoding)\n        except Exception as e:\n            # If both OCR extraction and comment processing fail, return an empty string\n            return ''\ndef convert_encoding(text, from_encoding, to_encoding):\n    try:\n        return text.encode(from_encoding).decode(to_encoding)\n    except (UnicodeDecodeError, LookupError) as e:\n        raise ValueError(\"Incorrect encodings provided for the text or comment conversion\")", "raw_solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\nIMAGE_PATH = \"image.png\"\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Attempt to extract text using OCR\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image)\n        if text:\n            return convert_encoding(text, from_encoding, to_encoding)\n    except Exception as e:\n        # If OCR extraction fails, try to extract text from image comment\n        try:\n            with open(filename, 'rb') as f:\n                image = Image.open(f)\n                comment = image.info.get('comment', '')\n                if comment:\n                    return convert_encoding(comment.decode(from_encoding), from_encoding, to_encoding)\n        except Exception as e:\n            # If both OCR extraction and comment processing fail, return an empty string\n            return ''\n\ndef convert_encoding(text, from_encoding, to_encoding):\n    try:\n        return text.encode(from_encoding).decode(to_encoding)\n    except (UnicodeDecodeError, LookupError) as e:\n        raise ValueError(\"Incorrect encodings provided for the text or comment conversion\")\n\n# Test the function with provided data points\n\n```"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        content = response.content\n        if not content:\n            return {}\n        if from_encoding is None:\n            from_encoding = chardet.detect(content)['encoding']\n        if from_encoding is None:\n            raise ValueError(\"Unable to detect encoding for non-empty content\")\n        decoded_content = content.decode(from_encoding)\n        encoded_content = decoded_content.encode(to_encoding)\n        return json.loads(encoded_content.decode(to_encoding))\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return {}\n    except ValueError as e:\n        print(f\"Error decoding content: {e}\")\n        return {}", "raw_solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        content = response.content\n        if not content:\n            return {}\n        if from_encoding is None:\n            from_encoding = chardet.detect(content)['encoding']\n        if from_encoding is None:\n            raise ValueError(\"Unable to detect encoding for non-empty content\")\n        decoded_content = content.decode(from_encoding)\n        encoded_content = decoded_content.encode(to_encoding)\n        return json.loads(encoded_content.decode(to_encoding))\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return {}\n    except ValueError as e:\n        print(f\"Error decoding content: {e}\")\n        return {}\n\n# Test the function\n\n```"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(\"The specified CSV file is not found at the given path.\")\n    \n    # Import the csv module from pandas\n    from pandas import read_csv\n    \n    # Add the import statement for os at the beginning of the code snippet\n    import os\n    \n    # Convert the csv_file_path to a string\n    csv_file_path = str(csv_file_path)\n    \n    # Check if the column_name is a string\n    if not isinstance(column_name, str):\n        raise ValueError(\"The specified column is not present in the CSV file.\")\n    \n    # Convert the date_format to a string\n    date_format = str(date_format)\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Convert the date_format to a string\n    date_format = str(date_format)\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError", "raw_solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(\"The specified CSV file is not found at the given path.\")\n    \n    # Import the csv module from pandas\n    from pandas import read_csv\n    \n    # Add the import statement for os at the beginning of the code snippet\n    import os\n    \n    # Convert the csv_file_path to a string\n    csv_file_path = str(csv_file_path)\n    \n    # Check if the column_name is a string\n    if not isinstance(column_name, str):\n        raise ValueError(\"The specified column is not present in the CSV file.\")\n    \n    # Convert the date_format to a string\n    date_format = str(date_format)\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Convert the date_format to a string\n    date_format = str(date_format)\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError(\"The specified date format is not a string.\")\n    \n    # Check if the date_format is a string\n    if not isinstance(date_format, str):\n        raise ValueError"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nimport os\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        # Wrap the client socket with SSL/TLS\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # Receive the file path from the client\n        file_path = secure_socket.recv(buffer_size).decode('utf-8')\n\n        # Check if the file exists\n        if not os.path.exists(file_path):\n            return 'File not found'\n\n        # Calculate the SHA256 hash of the file\n        with open(file_path, 'rb') as file:\n            sha256_hash = hashlib.sha256()\n            while chunk := file.read(buffer_size):\n                sha256_hash.update(chunk)\n\n        return sha256_hash.hexdigest()\n\n    except Exception as e:\n        return f'Error: {str(e)}'", "raw_solution": "import ssl\nimport os\nimport hashlib\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        # Wrap the client socket with SSL/TLS\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # Receive the file path from the client\n        file_path = secure_socket.recv(buffer_size).decode('utf-8')\n\n        # Check if the file exists\n        if not os.path.exists(file_path):\n            return 'File not found'\n\n        # Calculate the SHA256 hash of the file\n        with open(file_path, 'rb') as file:\n            sha256_hash = hashlib.sha256()\n            while chunk := file.read(buffer_size):\n                sha256_hash.update(chunk)\n\n        return sha256_hash.hexdigest()\n\n    except Exception as e:\n        return f'Error: {str(e)}'\n\n# Test the function with the required imports\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nimport os\n\nclass TestTaskFunc(unittest.TestCase):\n    @patch('os.path.exists')\n    @patch('hashlib.sha256')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_task_func(self, mock_open, mock_sha256, mock_exists):\n        mock_exists.return_value = True\n        mock_sha256.return_value.hexdigest.return_value = 'test_hash'\n\n        with patch('ssl.create_default_context') as mock_context:\n            mock_context.return_value.wrap_socket.return_value = MagicMock()\n            from io import StringIO\n            import sys\n            from unittest.mock import patch\n            with patch.dict('sys.modules', {'os': MagicMock()}):\n                from ctypes import cdll\n                cdll.LoadLibrary = MagicMock()\n                from ctypes import c_char_p\n                from ctypes import c_int\n                from ctypes import c_void_p\n                from ctypes import c_size_t\n                from ctypes import c_char\n                from ctypes import c_long\n                from ctypes import c_ulong\n                from ctypes import c_longlong\n                from ctypes import c_ulonglong\n                from ctypes import c_float\n                from ctypes import c_double\n                from ctypes import c_longdouble\n                from ctypes import c_bool\n                from ctypes import c_byte\n                from ctypes import c_ubyte\n                from ctypes import c_short\n                from ctypes import c_ushort\n                from ctypes import c_int16\n                from ctypes import c_uint16\n                from ctypes import c_int32\n                from ctypes import c_uint32\n                from ctypes import c_int64\n                from ctypes import c_uint64\n                from ctypes import c_int8\n                from ctypes import c_uint8\n                from ctypes import c_int128\n                from ctypes import c_uint128\n                from ctypes import c_int256\n                from ctypes import c_uint256\n                from ctypes import c_int512\n                from ctypes import c_uint512\n                from ctypes import c_int1024\n                from ctypes import c_uint1024\n                from ctypes import c_int2048\n                from ctypes import c_uint2048\n                from ctypes import c_int4096\n                from ctypes import c_uint4096\n                from ctypes import c_int8192\n                from ctypes import c_uint8192\n                from ctypes import c_int16384\n                from ctypes import c_uint16384\n                from ctypes import c_int32768\n                from ctypes import c_uint32768\n                from ctypes import c_int65536\n                from ctypes import c_uint65536\n                from ctypes import c_int131072\n                from ctypes import c_uint131072\n                from ctypes import c_int262144\n                from ctypes import c_uint262144\n                from ctypes import c_int524288\n                from ctypes import c_uint524288\n                from ctypes import c_int1048576\n                from ctypes import c_uint1048576\n                from ctypes import c_int2097152\n                from ctypes import c_uint2097152\n                from ctypes import c_int4194304\n                from ctypes import c_uint4194304\n                from ctypes import c_int8388608\n                from ctypes import c_uint8388608\n                from ctypes import c_int16777216\n                from ctypes import c_uint16777216\n                from ctypes import c_int3"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(False)\n\n    # Bind the socket to the server address and port\n    server_socket.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Create a list to keep track of client sockets\n    client_sockets = []\n\n    # Create a queue to handle incoming data\n    data_queue = queue.Queue()\n\n    # Start the server\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            # Wait for incoming connections or data\n            readable, writable, exceptional = select.select(\n                [server_socket] + client_sockets, client_sockets, client_sockets\n            )\n\n            # Handle incoming connections\n            for sock in readable:\n                if sock is server_socket:\n                    client_socket, client_address = sock.accept()\n                    client_socket.setblocking(False)\n                    client_sockets.append(client_socket)\n                    print(f\"Accepted connection from {client_address}\")\n                else:\n                    try:\n                        data = sock.recv(buffer_size)\n                        if data:\n                            data_queue.put((sock, data))\n                        else:\n                            client_sockets.remove(sock)\n                            sock.close()\n                            print(f\"Closed connection from {client_address}\")\n                    except Exception as e:\n                        print(f\"Exception occurred: {e}\")\n                        client_sockets.remove(sock)\n                        sock.close()\n                        print(f\"Closed connection from {client_address}\")\n\n            # Handle data from the queue\n            while not data_queue.empty():\n                sock, data = data_queue.get()\n                try:\n                    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                    response = f\"{data.decode()} - {current_time}\"\n                    sock.sendall(response.encode())\n                except Exception as e:\n                    print(f\"Exception occurred: {e}\")\n                    client_sockets.remove(sock)\n                    sock.close()\n                    print(f\"Closed connection from {client_address}\")\n\n            # Handle exceptional conditions\n            for sock in exceptional:\n                client_sockets.remove(sock)\n                sock.close()\n                print(f\"Closed connection from {client_address}\")\n\n    except Exception as e:\n        print(f\"Exception occurred: {e}\")\n\n    finally:\n        server_socket.close()\n        print(\"Server closed\")\n\n    # Return a status message indicating the server's operation and run duration\n    return f\"Server ran for {run_duration} seconds\"", "raw_solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(False)\n\n    # Bind the socket to the server address and port\n    server_socket.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Create a list to keep track of client sockets\n    client_sockets = []\n\n    # Create a queue to handle incoming data\n    data_queue = queue.Queue()\n\n    # Start the server\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            # Wait for incoming connections or data\n            readable, writable, exceptional = select.select(\n                [server_socket] + client_sockets, client_sockets, client_sockets\n            )\n\n            # Handle incoming connections\n            for sock in readable:\n                if sock is server_socket:\n                    client_socket, client_address = sock.accept()\n                    client_socket.setblocking(False)\n                    client_sockets.append(client_socket)\n                    print(f\"Accepted connection from {client_address}\")\n                else:\n                    try:\n                        data = sock.recv(buffer_size)\n                        if data:\n                            data_queue.put((sock, data))\n                        else:\n                            client_sockets.remove(sock)\n                            sock.close()\n                            print(f\"Closed connection from {client_address}\")\n                    except Exception as e:\n                        print(f\"Exception occurred: {e}\")\n                        client_sockets.remove(sock)\n                        sock.close()\n                        print(f\"Closed connection from {client_address}\")\n\n            # Handle data from the queue\n            while not data_queue.empty():\n                sock, data = data_queue.get()\n                try:\n                    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                    response = f\"{data.decode()} - {current_time}\"\n                    sock.sendall(response.encode())\n                except Exception as e:\n                    print(f\"Exception occurred: {e}\")\n                    client_sockets.remove(sock)\n                    sock.close()\n                    print(f\"Closed connection from {client_address}\")\n\n            # Handle exceptional conditions\n            for sock in exceptional:\n                client_sockets.remove(sock)\n                sock.close()\n                print(f\"Closed connection from {client_address}\")\n\n    except Exception as e:\n        print(f\"Exception occurred: {e}\")\n\n    finally:\n        server_socket.close()\n        print(\"Server closed\")\n\n    # Return a status message indicating the server's operation and run duration\n    return f\"Server ran for {run_duration} seconds\"\n\n```"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    # Receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    \n    # Ask for sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n    \n    # Create an email message\n    email = EmailMessage()\n    email.set_content(message)\n    email['From'] = sender_email\n    email['To'] = recipient_email\n    email['Subject'] = 'Message from client'\n    \n    # Connect to the SMTP server and send the email\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, sender_password)\n        server.send_message(email)\n    \n    # Close the client socket\n    client_socket.close()", "raw_solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\ndef task_func(client_socket):\n    # Receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    \n    # Ask for sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n    \n    # Create an email message\n    email = EmailMessage()\n    email.set_content(message)\n    email['From'] = sender_email\n    email['To'] = recipient_email\n    email['Subject'] = 'Message from client'\n    \n    # Connect to the SMTP server and send the email\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, sender_password)\n        server.send_message(email)\n    \n    # Close the client socket\n    client_socket.close()\n\n```"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the CSV file has a header\n        if 'Text' in df.columns:\n            text_data = df['Text']\n        else:\n            text_data = df.iloc[:, 0]\n        \n        # Split the text into words and create a histogram of the frequency of the top ten most common words\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_counts = vectorizer.fit_transform(text_data)\n        word_freq = word_counts.sum(axis=0).A1\n        word_freq_dict = dict(zip(vectorizer.get_feature_names_out(), word_freq))\n        sorted_word_freq = sorted(word_freq_dict.items(), key=lambda x: x[1], reverse=True)\n        top_ten_words = sorted_word_freq[:10]\n        \n        # Plot the histogram\n        fig, ax = plt.subplots()\n        ax.bar([word for word, _ in top_ten_words], [count for _, count in top_ten_words], color='blue')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Top 10 Most Common Words')\n        \n        # Save the plot to a file if save_path is provided\n        if save_path:\n            plt.savefig(save_path)\n        else:\n            return ax\n        \n        return None\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None", "raw_solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the CSV file has a header\n        if 'Text' in df.columns:\n            text_data = df['Text']\n        else:\n            text_data = df.iloc[:, 0]\n        \n        # Split the text into words and create a histogram of the frequency of the top ten most common words\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_counts = vectorizer.fit_transform(text_data)\n        word_freq = word_counts.sum(axis=0).A1\n        word_freq_dict = dict(zip(vectorizer.get_feature_names_out(), word_freq))\n        sorted_word_freq = sorted(word_freq_dict.items(), key=lambda x: x[1], reverse=True)\n        top_ten_words = sorted_word_freq[:10]\n        \n        # Plot the histogram\n        fig, ax = plt.subplots()\n        ax.bar([word for word, _ in top_ten_words], [count for _, count in top_ten_words], color='blue')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Top 10 Most Common Words')\n        \n        # Save the plot to a file if save_path is provided\n        if save_path:\n            plt.savefig(save_path)\n        else:\n            return ax\n        \n        return None\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n```"}
{"task_id": "BigCodeBench/1057", "solution": "from pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd", "raw_solution": "import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\nfrom pandas.core import pandas as pd\nimport pandas as pd\nfrom pandas.core import pandas as pd\nimport pandas as pd\nfrom pandas.core import pandas as pd\nimport pandas as pd\nfrom pandas import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as pd\nfrom pandas import pandas as from pandas import import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom pandas.core import pandas as pd\nfrom"}
{"task_id": "BigCodeBench/1077", "solution": "def task_func(time_strings, timezone):\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from datetime import datetime\n    import pytz\n    import numpy as np\n    # Add the task_func.time import statement at the beginning of the function\n    # Calculate the average time difference in seconds between each consecutive pair of timestamps\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from task_func.time import mean\n    task_func.time.mean = np.mean\n    from datetime import datetime\n    import pytz\n    import numpy as np\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from task_func.time import mean\n    task_func.time.mean = np.mean\n    from datetime import datetime\n    import pytz", "raw_solution": "from datetime import datetime\nimport pytz\nimport numpy as task_func.time\ntask_func.time = __import__('numpy')\n\ndef task_func(time_strings, timezone):\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from datetime import datetime\n    import pytz\n    import numpy as np\n    # Add the task_func.time import statement at the beginning of the function\n    # Calculate the average time difference in seconds between each consecutive pair of timestamps\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from task_func.time import mean\n    task_func.time.mean = np.mean\n    from datetime import datetime\n    import pytz\n    import numpy as np\n    import task_func.time\n    task_func.time = __import__('numpy')\n    from task_func.time import mean\n    task_func.time.mean = np.mean\n    from datetime import datetime\n    import pytz\n    import numpy as task_func.time\n    task_func.time = __import__('numpy')\n    from task_func.time import mean\n    task_func.time.mean = np.mean\n    from task_func.time import mean as task_func.time.mean\n    from datetime.datetime__import__ import mean as task_func.time.mean\n    from task_func.time import mean as task_func.time.mean\n    task_func.time.mean.__module__ = task_func.time\n    from task_func.time import mean as task_func.time.mean\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_strings\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ from datetime.datetime import mean\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module__ = task_func.time\n    task_func.time.mean.__module"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split text into words\n    words = text.split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10_words = word_counts.most_common(10)\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in top_10_words], [count for word, count in top_10_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n    ax.set_title('Top 10 Most Common Words')\n    \n    return top_10_words, ax\ntext = \"Hello, world! This is a test. This is only a test.\"", "raw_solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(text):\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split text into words\n    words = text.split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10_words = word_counts.most_common(10)\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in top_10_words], [count for word, count in top_10_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n    ax.set_title('Top 10 Most Common Words')\n    \n    return top_10_words, ax\n\n# Test the function\ntext = \"Hello, world! This is a test. This is only a test.\"\ntop_10_words, ax = task_func(text)"}
{"task_id": "BigCodeBench/1124", "solution": "from urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nfrom requests_html import requests_html_html as requests_html_html\nfrom requests_html_html import requests_html_html as requests_html_html", "raw_solution": "from urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nfrom requests_html import requests_html_html as requests_html_html\nfrom requests_html_html import requests_html_html as requests_html_html\nrequests_html_html.__module__ = 'requests_html_html' from requests_html_html import requests_html_html as requests_html_html_html from requests_html_html_html import requests_html_html_html as requests_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html_html"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON data\n    data = json.loads(json_data)\n    \n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    \n    if not url:\n        return \"URL not found for the specified key\"\n    \n    # Download the file from the URL\n    response = requests.get(url)\n    \n    if response.status_code != 200:\n        return f\"Failed to download file. Status code: {response.status_code}\"\n    \n    # Create a timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # Save the file in the specified directory or in the current working directory by default\n    if save_dir:\n        if not os.path.exists(save_dir):\n            import importlib.util\n            import sys\n            spec = importlib.util.find_spec('os', globals())\n            if spec is None:\n                importlib.util.module_from_spec(spec)\n                sys.modules['os'] = spec.loader.create_module(spec)\n            from os import makedirs\n            makedirs(save_dir)\n        importlib.reload(sys.modules['os'])\n        from os import path\n        save_dir = importlib.import_module('os.path')\n        save_dir.add_to_sys_path = lambda: None\n        importlib.reload(sys.modules['os.path'])\n        from sys.path import add_to_sys_path\n        add_to_sys_path = importlib.import_module('sys.path')\n        add_to_sys_path.add_to_sys_path = lambda: None\n        from importlib import reload\n        reload(sys.path)\n        from sys.path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.import_module('sys.path.add_to_sys_path')\n        from importlib import reload\n        reload(sys.path.add_to_sys_path)\n        from sys.path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.import_module('sys.path.add_to_sys_path.add_to_sys_path')\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)", "raw_solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON data\n    data = json.loads(json_data)\n    \n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    \n    if not url:\n        return \"URL not found for the specified key\"\n    \n    # Download the file from the URL\n    response = requests.get(url)\n    \n    if response.status_code != 200:\n        return f\"Failed to download file. Status code: {response.status_code}\"\n    \n    # Create a timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # Save the file in the specified directory or in the current working directory by default\n    if save_dir:\n        if not os.path.exists(save_dir):\n            import importlib.util\n            import sys\n            spec = importlib.util.find_spec('os', globals())\n            if spec is None:\n                importlib.util.module_from_spec(spec)\n                sys.modules['os'] = spec.loader.create_module(spec)\n            from os import makedirs\n            makedirs(save_dir)\n        importlib.reload(sys.modules['os'])\n        from os import path\n        save_dir = importlib.import_module('os.path')\n        save_dir.add_to_sys_path = lambda: None\n        importlib.reload(sys.modules['os.path'])\n        from sys.path import add_to_sys_path\n        add_to_sys_path = importlib.import_module('sys.path')\n        add_to_sys_path.add_to_sys_path = lambda: None\n        from importlib import reload\n        reload(sys.path)\n        from sys.path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.import_module('sys.path.add_to_sys_path')\n        from importlib import reload\n        reload(sys.path.add_to_sys_path)\n        from sys.path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.import_module('sys.path.add_to_sys_path.add_to_sys_path')\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path import add_to_sys_path\n        add_to_sys_path.add_to_sys_path = importlib.reload\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path\n        from importlib import reload\n        reload(sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path)\n        from sys.path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add_to_sys_path.add"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    # Check if the URL is local or remote\n    if url.startswith('http'):\n        response = requests.get(url)\n        html_content = response.text\n    else:\n        with open(url, 'r') as file:\n            html_content = file.read()\n\n    # Use regular expression to find phone numbers\n    phone_numbers = re.findall(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', html_content)\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as json_file:\n        json.dump(phone_numbers, json_file)\n\n    return phone_numbers\nurl = 'https://example.com'\noutput_path = 'output.json'", "raw_solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    # Check if the URL is local or remote\n    if url.startswith('http'):\n        response = requests.get(url)\n        html_content = response.text\n    else:\n        with open(url, 'r') as file:\n            html_content = file.read()\n\n    # Use regular expression to find phone numbers\n    phone_numbers = re.findall(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', html_content)\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as json_file:\n        json.dump(phone_numbers, json_file)\n\n    return phone_numbers\n\n# Example usage\nurl = 'https://example.com'  # Replace with the actual URL or local file path\noutput_path = 'output.json'  # Replace with the desired output file path\nphone_numbers = task_func(url, output_path)"}
